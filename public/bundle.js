((modules, entryPoint) => {
  let global = function() {
    return this;
  }();
  let cache = {};
  let esbuildRequire = (target, arg) => {
    let type = typeof target;
    if (type === "string") {
      return require(target);
    }
    if (type === "number") {
      let module = cache[target], exports;
      if (!module) {
        module = cache[target] = {
          exports: {}
        };
        modules[target].call(global, esbuildRequire, module.exports, module);
      }
      exports = module.exports;
      if (arg && (!exports || !exports.__esModule)) {
        if (!exports || typeof exports !== "object" && typeof exports !== "function") {
          exports = {};
        }
        if (!("default" in exports)) {
          Object.defineProperty(exports, "default", {
            get: () => module.exports,
            enumerable: true
          });
        }
      }
      return exports;
    }
    Object.defineProperty(target, "__esModule", {
      value: true
    });
    for (let name in arg) {
      Object.defineProperty(target, name, {
        get: arg[name],
        enumerable: true
      });
    }
  };
  return esbuildRequire(entryPoint);
})({
  58(require, exports, module) {
    // node_modules/object-assign/index.js
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  },

  62(require, exports, module) {
    // node_modules/prop-types/lib/ReactPropTypesSecret.js
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  },

  59(require, exports, module) {
    // node_modules/prop-types/checkPropTypes.js
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require(62 /* ./lib/ReactPropTypesSecret */);
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  },

  72(require, exports) {
    // node_modules/react/cjs/react.development.js
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var _assign = require(58 /* object-assign */);
        var checkPropTypes = require(59 /* prop-types/checkPropTypes */);
        var ReactVersion = "16.13.1";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          suspense: null
        };
        var ReactCurrentOwner = {
          current: null
        };
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        }
        var Resolved = 1;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = {};
        var currentlyValidatingElement = null;
        function setCurrentlyValidatingElement(element) {
          {
            currentlyValidatingElement = element;
          }
        }
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentlyValidatingElement) {
              var name = getComponentName(currentlyValidatingElement.type);
              var owner = currentlyValidatingElement._owner;
              stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          _assign(ReactSharedInternals, {
            ReactDebugCurrentFrame,
            ReactComponentTreeHook: {}
          });
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            self = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = ("" + key).replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
        }
        var POOL_SIZE = 10;
        var traverseContextPool = [];
        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
          if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
          } else {
            return {
              result: mapResult,
              keyPrefix,
              func: mapFunction,
              context: mapContext,
              count: 0
            };
          }
        }
        function releaseTraverseContext(traverseContext) {
          traverseContext.result = null;
          traverseContext.keyPrefix = null;
          traverseContext.func = null;
          traverseContext.context = null;
          traverseContext.count = 0;
          if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
          }
        }
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            callback(traverseContext, children, nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getComponentKey(child, i);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              {
                if (iteratorFn === children.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(children);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getComponentKey(child, ii++);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else if (type === "object") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
              }
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                }
              }
            }
          }
          return subtreeCount;
        }
        function traverseAllChildren(children, callback, traverseContext) {
          if (children == null) {
            return 0;
          }
          return traverseAllChildrenImpl(children, "", callback, traverseContext);
        }
        function getComponentKey(component, index) {
          if (typeof component === "object" && component !== null && component.key != null) {
            return escape(component.key);
          }
          return index.toString(36);
        }
        function forEachSingleChild(bookKeeping, child, name) {
          var func = bookKeeping.func, context = bookKeeping.context;
          func.call(context, child, bookKeeping.count++);
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          if (children == null) {
            return children;
          }
          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
          traverseAllChildren(children, forEachSingleChild, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
          var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
          var mappedChild = func.call(context, child, bookKeeping.count++);
          if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey);
            }
            result.push(mappedChild);
          }
        }
        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
          var escapedPrefix = "";
          if (prefix != null) {
            escapedPrefix = escapeUserProvidedKey(prefix) + "/";
          }
          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, func, context);
          return result;
        }
        function countChildren(children) {
          return traverseAllChildren(children, function() {
            return null;
          }, null);
        }
        function toArray(children) {
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
            return child;
          });
          return result;
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        function lazy(ctor) {
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            _status: -1,
            _result: null
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
        }
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          return {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement(element);
          {
            error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
          }
          setCurrentlyValidatingElement(null);
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var name = getComponentName(type);
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              setCurrentlyValidatingElement(element);
              checkPropTypes(propTypes, element.props, "prop", name, ReactDebugCurrentFrame.getStackAddendum);
              setCurrentlyValidatingElement(null);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            setCurrentlyValidatingElement(fragment);
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                break;
              }
            }
            if (fragment.ref !== null) {
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
            }
            setCurrentlyValidatingElement(null);
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            var testMap = new Map([[frozenObject, null]]);
            var testSet = new Set([frozenObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      })();
    }
  },

  73(require, exports, module) {
    // node_modules/react/index.js
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require(72 /* ./cjs/react.development.js */);
    }
  },

  76(require, exports) {
    // node_modules/scheduler/cjs/scheduler.development.js
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var shouldYieldToHost;
        var requestPaint;
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          var initialTime = Date.now();
          exports.unstable_now = function() {
            return Date.now() - initialTime;
          };
          requestHostCallback = function(cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          shouldYieldToHost = function() {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var performance = window.performance;
          var _Date = window.Date;
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
            if (typeof cancelAnimationFrame !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          if (typeof performance === "object" && typeof performance.now === "function") {
            exports.unstable_now = function() {
              return performance.now();
            };
          } else {
            var _initialTime = _Date.now();
            exports.unstable_now = function() {
              return _Date.now() - _initialTime;
            };
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            shouldYieldToHost = function() {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1000 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task, ms) {
          {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1000, task.id]);
            }
          }
        }
        function markTaskCanceled(task, ms) {
          {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1000, task.id]);
            }
          }
        }
        function markTaskErrored(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1000, task.id]);
            }
          }
        }
        function markTaskRun(task, ms) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms) {
          {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5000;
        var LOW_PRIORITY_TIMEOUT = 10000;
        var IDLE_PRIORITY = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (callback !== null) {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function timeoutForPriorityLevel(priorityLevel) {
          switch (priorityLevel) {
            case ImmediatePriority:
              return IMMEDIATE_PRIORITY_TIMEOUT;
            case UserBlockingPriority:
              return USER_BLOCKING_PRIORITY;
            case IdlePriority:
              return IDLE_PRIORITY;
            case LowPriority:
              return LOW_PRIORITY_TIMEOUT;
            case NormalPriority:
            default:
              return NORMAL_PRIORITY_TIMEOUT;
          }
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          var timeout;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
            timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
          } else {
            timeout = timeoutForPriorityLevel(priorityLevel);
            startTime = currentTime;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          }
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        function unstable_shouldYield() {
          var currentTime = exports.unstable_now();
          advanceTimers(currentTime);
          var firstTask = peek(taskQueue);
          return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = unstable_shouldYield;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  },

  77(require, exports, module) {
    // node_modules/scheduler/index.js
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require(76 /* ./cjs/scheduler.development.js */);
    }
  },

  75(require, exports) {
    // node_modules/scheduler/cjs/scheduler-tracing.development.js
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  },

  78(require, exports, module) {
    // node_modules/scheduler/tracing.js
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require(75 /* ./cjs/scheduler-tracing.development.js */);
    }
  },

  64(require, exports) {
    // node_modules/react-dom/cjs/react-dom.development.js
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require(73 /* react */);
        var _assign = require(58 /* object-assign */);
        var Scheduler = require(77 /* scheduler */);
        var checkPropTypes = require(59 /* prop-types/checkPropTypes */);
        var tracing = require(78 /* scheduler/tracing */);
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
          ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
          };
        }
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
          ReactSharedInternals.ReactCurrentBatchConfig = {
            suspense: null
          };
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        if (!React) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var getFiberCurrentPropsFromNode = null;
        var getInstanceFromNode = null;
        var getNodeFromInstance = null;
        function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
          getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
          getInstanceFromNode = getInstanceFromNodeImpl;
          getNodeFromInstance = getNodeFromInstanceImpl;
          {
            if (!getNodeFromInstance || !getInstanceFromNode) {
              error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
            }
          }
        }
        var validateEventDispatches;
        {
          validateEventDispatches = function(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
              error("EventPluginUtils: Invalid `event`.");
            }
          };
        }
        function executeDispatch(event, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = getNodeFromInstance(inst);
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var eventPluginOrder = null;
        var namesToPlugins = {};
        function recomputePluginOrdering() {
          if (!eventPluginOrder) {
            return;
          }
          for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            if (!(pluginIndex > -1)) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
              }
            }
            if (plugins[pluginIndex]) {
              continue;
            }
            if (!pluginModule.extractEvents) {
              {
                throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
              }
            }
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
              if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                {
                  throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                }
              }
            }
          }
        }
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
          if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
            }
          }
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
              if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
              }
            }
            return true;
          } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
          }
          return false;
        }
        function publishRegistrationName(registrationName, pluginModule, eventName) {
          if (!!registrationNameModules[registrationName]) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
            }
          }
          registrationNameModules[registrationName] = pluginModule;
          registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
        }
        var plugins = [];
        var eventNameDispatchConfigs = {};
        var registrationNameModules = {};
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function injectEventPluginOrder(injectedEventPluginOrder) {
          if (!!eventPluginOrder) {
            {
              throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
            }
          }
          eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
          recomputePluginOrdering();
        }
        function injectEventPluginsByName(injectedNamesToPlugins) {
          var isOrderingDirty = false;
          for (var pluginName in injectedNamesToPlugins) {
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
              continue;
            }
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
              if (!!namesToPlugins[pluginName]) {
                {
                  throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                }
              }
              namesToPlugins[pluginName] = pluginModule;
              isOrderingDirty = true;
            }
          }
          if (isOrderingDirty) {
            recomputePluginOrdering();
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var PLUGIN_EVENT_SYSTEM = 1;
        var IS_REPLAYED = 1 << 5;
        var IS_FIRST_ANCESTOR = 1 << 6;
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var enableProfilerTimer = true;
        var enableDeprecatedFlareAPI = false;
        var enableFundamentalAPI = false;
        var warnAboutStringRefs = false;
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a, b, c, d) {
          return fn(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            return fn(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
            flushDiscreteUpdatesImpl();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix = name.toLowerCase().slice(0, 5);
                return prefix !== "data-" && prefix !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
        }
        var properties = {};
        var reservedProps = ["children", "dangerouslySetInnerHTML", "defaultValue", "defaultChecked", "innerHTML", "suppressContentEditableWarning", "suppressHydrationWarning", "style"];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
        });
        ["allowFullScreen", "async", "autoFocus", "autoPlay", "controls", "default", "defer", "disabled", "disablePictureInPicture", "formNoValidate", "hidden", "loop", "noModule", "noValidate", "open", "playsInline", "readOnly", "required", "reversed", "scoped", "seamless", "itemScope"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
        });
        ["checked", "multiple", "muted", "selected"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
        });
        ["capture", "download"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
        });
        ["cols", "rows", "size", "span"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        ["accent-height", "alignment-baseline", "arabic-form", "baseline-shift", "cap-height", "clip-path", "clip-rule", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "dominant-baseline", "enable-background", "fill-opacity", "fill-rule", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "glyph-name", "glyph-orientation-horizontal", "glyph-orientation-vertical", "horiz-adv-x", "horiz-origin-x", "image-rendering", "letter-spacing", "lighting-color", "marker-end", "marker-mid", "marker-start", "overline-position", "overline-thickness", "paint-order", "panose-1", "pointer-events", "rendering-intent", "shape-rendering", "stop-color", "stop-opacity", "strikethrough-position", "strikethrough-thickness", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-anchor", "text-decoration", "text-rendering", "underline-position", "underline-thickness", "unicode-bidi", "unicode-range", "units-per-em", "v-alphabetic", "v-hanging", "v-ideographic", "v-mathematical", "vector-effect", "vert-adv-y", "vert-origin-x", "vert-origin-y", "word-spacing", "writing-mode", "xmlns:xlink", "x-height"].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
        });
        ["xlink:actuate", "xlink:arcrole", "xlink:role", "xlink:show", "xlink:title", "xlink:type"].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false);
        });
        ["xml:base", "xml:lang", "xml:space"].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
        });
        var ReactDebugCurrentFrame = null;
        {
          ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        }
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function initializeLazyComponentType(lazyComponent) {
          if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function(error2) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error2;
              }
            });
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
              return "";
            default:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name = getComponentName(fiber.type);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName(owner.type);
              }
              return describeComponentFrame(name, source, ownerName);
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        }
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var ReactDebugCurrentFrame$2 = null;
        var ReactControlledValuePropTypes = {
          checkPropTypes: null
        };
        {
          ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          var propTypes = {
            value: function(props, propName, componentName) {
              if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            checked: function(props, propName, componentName) {
              if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          };
          ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
            checkPropTypes(propTypes, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
          };
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || node.ownerDocument.activeElement !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;
                if (setDefaultSelected) {
                  options[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            ReactControlledValuePropTypes.checkPropTypes("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        function unsafeCastStringToDOMTopLevelType(topLevelType) {
          return topLevelType;
        }
        function unsafeCastDOMTopLevelTypeToString(topLevelType) {
          return topLevelType;
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
        var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
        var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
        var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
        var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
        var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
        var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
        var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
        var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
        var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
        var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
        var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
        var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
        var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
        var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
        var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
        var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
        var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
        var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
        var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
        var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
        var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
        var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
        var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
        var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
        var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
        var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
        var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
        var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
        var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
        var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
        var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
        var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
        var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
        var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
        var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
        var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
        var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
        var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
        var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
        var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
        var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
        var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
        var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
        var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
        var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
        var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
        var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
        var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
        var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
        var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
        var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
        var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
        var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
        var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
        var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
        var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
        var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
        var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
        var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
        var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
        var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
        var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
        var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
        var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
        var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
        var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
        var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
        var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
        var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
        var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
        var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
        var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
        var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
        var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
        var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
        var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
        var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
        var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
        var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
        var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
        function getRawEventName(topLevelType) {
          return unsafeCastDOMTopLevelTypeToString(topLevelType);
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        var elementListenerMap = new PossiblyWeakMap();
        function getListenerMapForElement(element) {
          var listenerMap = elementListenerMap.get(element);
          if (listenerMap === void 0) {
            listenerMap = new Map();
            elementListenerMap.set(element, listenerMap);
          }
          return listenerMap;
        }
        function get(key) {
          return key._reactInternalFiber;
        }
        function has(key) {
          return key._reactInternalFiber !== void 0;
        }
        function set(key, value) {
          key._reactInternalFiber = value;
        }
        var NoEffect = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function accumulateInto(current2, next) {
          if (!(next != null)) {
            {
              throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
            }
          }
          if (current2 == null) {
            return next;
          }
          if (Array.isArray(current2)) {
            if (Array.isArray(next)) {
              current2.push.apply(current2, next);
              return current2;
            }
            current2.push(next);
            return current2;
          }
          if (Array.isArray(next)) {
            return [current2].concat(next);
          }
          return [current2, next];
        }
        function forEachAccumulated(arr, cb, scope) {
          if (Array.isArray(arr)) {
            arr.forEach(cb, scope);
          } else if (arr) {
            cb.call(scope, arr);
          }
        }
        var eventQueue = null;
        var executeDispatchesAndRelease = function(event) {
          if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        var executeDispatchesAndReleaseTopLevel = function(e) {
          return executeDispatchesAndRelease(e);
        };
        function runEventsInBatch(events) {
          if (events !== null) {
            eventQueue = accumulateInto(eventQueue, events);
          }
          var processingEventQueue = eventQueue;
          eventQueue = null;
          if (!processingEventQueue) {
            return;
          }
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
          if (!!eventQueue) {
            {
              throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            }
          }
          rethrowCaughtError();
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        function releaseTopLevelCallbackBookKeeping(instance) {
          instance.topLevelType = null;
          instance.nativeEvent = null;
          instance.targetInst = null;
          instance.ancestors.length = 0;
          if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
          }
        }
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
          if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.eventSystemFlags = eventSystemFlags;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
          }
          return {
            topLevelType,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            ancestors: []
          };
        }
        function findRootContainerNode(inst) {
          if (inst.tag === HostRoot) {
            return inst.stateNode.containerInfo;
          }
          while (inst.return) {
            inst = inst.return;
          }
          if (inst.tag !== HostRoot) {
            return null;
          }
          return inst.stateNode.containerInfo;
        }
        function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = null;
          for (var i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
              var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              if (extractedEvents) {
                events = accumulateInto(events, extractedEvents);
              }
            }
          }
          return events;
        }
        function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          runEventsInBatch(events);
        }
        function handleTopLevel(bookKeeping) {
          var targetInst = bookKeeping.targetInst;
          var ancestor = targetInst;
          do {
            if (!ancestor) {
              var ancestors = bookKeeping.ancestors;
              ancestors.push(ancestor);
              break;
            }
            var root2 = findRootContainerNode(ancestor);
            if (!root2) {
              break;
            }
            var tag = ancestor.tag;
            if (tag === HostComponent || tag === HostText) {
              bookKeeping.ancestors.push(ancestor);
            }
            ancestor = getClosestInstanceFromNode(root2);
          } while (ancestor);
          for (var i = 0; i < bookKeeping.ancestors.length; i++) {
            targetInst = bookKeeping.ancestors[i];
            var eventTarget = getEventTarget(bookKeeping.nativeEvent);
            var topLevelType = bookKeeping.topLevelType;
            var nativeEvent = bookKeeping.nativeEvent;
            var eventSystemFlags = bookKeeping.eventSystemFlags;
            if (i === 0) {
              eventSystemFlags |= IS_FIRST_ANCESTOR;
            }
            runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
          }
        }
        function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
          var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
          try {
            batchedEventUpdates(handleTopLevel, bookKeeping);
          } finally {
            releaseTopLevelCallbackBookKeeping(bookKeeping);
          }
        }
        function legacyListenToEvent(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
          }
        }
        function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
          if (!listenerMap.has(topLevelType)) {
            switch (topLevelType) {
              case TOP_SCROLL:
                trapCapturedEvent(TOP_SCROLL, mountAt);
                break;
              case TOP_FOCUS:
              case TOP_BLUR:
                trapCapturedEvent(TOP_FOCUS, mountAt);
                trapCapturedEvent(TOP_BLUR, mountAt);
                listenerMap.set(TOP_BLUR, null);
                listenerMap.set(TOP_FOCUS, null);
                break;
              case TOP_CANCEL:
              case TOP_CLOSE:
                if (isEventSupported(getRawEventName(topLevelType))) {
                  trapCapturedEvent(topLevelType, mountAt);
                }
                break;
              case TOP_INVALID:
              case TOP_SUBMIT:
              case TOP_RESET:
                break;
              default:
                var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                if (!isMediaEvent) {
                  trapBubbledEvent(topLevelType, mountAt);
                }
                break;
            }
            listenerMap.set(topLevelType, null);
          }
        }
        function isListeningToAllDependencies(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!listenerMap.has(dependency)) {
              return false;
            }
          }
          return true;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
        var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
          legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
        }
        function eagerlyTrapReplayableEvents(container, document2) {
          var listenerMapForDoc = getListenerMapForElement(document2);
          discreteReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
          continuousReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
        }
        function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          return {
            blockedOn,
            topLevelType,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            container
          };
        }
        function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS:
            case TOP_BLUR:
              queuedFocus = null;
              break;
            case TOP_DRAG_ENTER:
            case TOP_DRAG_LEAVE:
              queuedDrag = null;
              break;
            case TOP_MOUSE_OVER:
            case TOP_MOUSE_OUT:
              queuedMouse = null;
              break;
            case TOP_POINTER_OVER:
            case TOP_POINTER_OUT: {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE: {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode$1(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS: {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
              return true;
            }
            case TOP_DRAG_ENTER: {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
              return true;
            }
            case TOP_MOUSE_OVER: {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
              return true;
            }
            case TOP_POINTER_OVER: {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
              return true;
            }
            case TOP_GOT_POINTER_CAPTURE: {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
            } else {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        function addEventBubbleListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, false);
        }
        function addEventCaptureListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, true);
        }
        var simpleEventPluginEventTypes = {};
        var topLevelEventsToDispatchConfig = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
        var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
        var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
        var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
        function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i += 2) {
            var topEvent = eventTypes2[i];
            var event = eventTypes2[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = "on" + capitalizedEvent;
            var config = {
              phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + "Capture"
              },
              dependencies: [topEvent],
              eventPriority: priority
            };
            eventPriorities.set(topEvent, priority);
            topLevelEventsToDispatchConfig.set(topEvent, config);
            simpleEventPluginEventTypes[event] = config;
          }
        }
        function processTopEventPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i++) {
            eventPriorities.set(eventTypes2[i], priority);
          }
        }
        processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
        function getEventPriorityForPluginSystem(topLevelType) {
          var priority = eventPriorities.get(topLevelType);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function trapBubbledEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, false);
        }
        function trapCapturedEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, true);
        }
        function trapEventForPluginEventSystem(container, topLevelType, capture) {
          var listener;
          switch (getEventPriorityForPluginSystem(topLevelType)) {
            case DiscreteEvent:
              listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case UserBlockingEvent:
              listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case ContinuousEvent:
            default:
              listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
          }
          var rawEventName = getRawEventName(topLevelType);
          if (capture) {
            addEventCaptureListener(container, rawEventName, listener);
          } else {
            addEventBubbleListener(container, rawEventName, listener);
          }
        }
        function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
          runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
        }
        function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          if (!_enabled) {
            return;
          }
          if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
          if (blockedOn === null) {
            clearIfContinuousEvent(topLevelType, nativeEvent);
            return;
          }
          if (isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(topLevelType, nativeEvent);
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
          }
        }
        function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
          }
          return null;
        }
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        var ReactDebugCurrentFrame$3 = null;
        {
          ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (canUseEventSystem) {
              if (registrationNameModules.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, canUseEventSystem) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, canUseEventSystem) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, canUseEventSystem);
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            time: true,
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, true);
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
          var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
          var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
          legacyListenToEvent(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              props = rawProps;
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            activeElementDetached: null,
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start, end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = ["applet", "caption", "html", "table", "td", "th", "marquee", "object", "template", "foreignObject", "desc", "title"];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum = getCurrentFiberStackInDev();
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          setEnabled(false);
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function shouldDeprioritizeSubtree(type, props) {
          return !!props.hidden;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactInternalInstance$" + randomKey;
        var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
        var internalContainerInstanceKey = "__reactContainere$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode$1(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance$1(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode$1(node) {
          return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalEventHandlersKey] = props;
        }
        function getParent(inst) {
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var depthA = 0;
          for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (instA === instB || instA === instB.alternate) {
              return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
          }
          return null;
        }
        function traverseTwoPhase(inst, fn, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i;
          for (i = path.length; i-- > 0; ) {
            fn(path[i], "captured", arg);
          }
          for (i = 0; i < path.length; i++) {
            fn(path[i], "bubbled", arg);
          }
        }
        function traverseEnterLeave(from, to, fn, argFrom, argTo) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          var pathFrom = [];
          while (true) {
            if (!from) {
              break;
            }
            if (from === common) {
              break;
            }
            var alternate = from.alternate;
            if (alternate !== null && alternate === common) {
              break;
            }
            pathFrom.push(from);
            from = getParent(from);
          }
          var pathTo = [];
          while (true) {
            if (!to) {
              break;
            }
            if (to === common) {
              break;
            }
            var _alternate = to.alternate;
            if (_alternate !== null && _alternate === common) {
              break;
            }
            pathTo.push(to);
            to = getParent(to);
          }
          for (var i = 0; i < pathFrom.length; i++) {
            fn(pathFrom[i], "bubbled", argFrom);
          }
          for (var _i = pathTo.length; _i-- > 0; ) {
            fn(pathTo[_i], "captured", argTo);
          }
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var listener;
          var stateNode = inst.stateNode;
          if (!stateNode) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            return null;
          }
          listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
          return getListener(inst, registrationName);
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            if (!inst) {
              error("Dispatching inst must not be null");
            }
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatches(events) {
          forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from, to) {
          traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
          forEachAccumulated(events, accumulateDirectDispatchesSingle);
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        var EVENT_POOL_SIZE = 10;
        var EventInterface = {
          type: null,
          target: null,
          currentTarget: function() {
            return null;
          },
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
          {
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
            delete this.isDefaultPrevented;
            delete this.isPropagationStopped;
          }
          this.dispatchConfig = dispatchConfig;
          this._targetInst = targetInst;
          this.nativeEvent = nativeEvent;
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            {
              delete this[propName];
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              if (propName === "target") {
                this.target = nativeEventTarget;
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
            this.isPersistent = functionThatReturnsTrue;
          },
          isPersistent: functionThatReturnsFalse,
          destructor: function() {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              {
                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
              }
            }
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            {
              Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
              Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
              Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
              Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
              }));
              Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
              }));
            }
          }
        });
        SyntheticEvent.Interface = EventInterface;
        SyntheticEvent.extend = function(Interface) {
          var Super = this;
          var E = function() {
          };
          E.prototype = Super.prototype;
          var prototype = new E();
          function Class() {
            return Super.apply(this, arguments);
          }
          _assign(prototype, Class.prototype);
          Class.prototype = prototype;
          Class.prototype.constructor = Class;
          Class.Interface = _assign({}, Super.Interface, Interface);
          Class.extend = Super.extend;
          addEventPoolingTo(Class);
          return Class;
        };
        addEventPoolingTo(SyntheticEvent);
        function getPooledWarningPropertyDefinition(propName, getVal) {
          var isFunction = typeof getVal === "function";
          return {
            configurable: true,
            set: set2,
            get: get2
          };
          function set2(val) {
            var action = isFunction ? "setting the method" : "setting the property";
            warn2(action, "This is effectively a no-op");
            return val;
          }
          function get2() {
            var action = isFunction ? "accessing the method" : "accessing the property";
            var result = isFunction ? "This is a no-op function" : "This is set to null";
            warn2(action, result);
            return getVal;
          }
          function warn2(action, result) {
            {
              error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
            }
          }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
          var EventConstructor = this;
          if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
          }
          return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
          var EventConstructor = this;
          if (!(event instanceof EventConstructor)) {
            {
              throw Error("Trying to release an event instance into a pool of a different type.");
            }
          }
          event.destructor();
          if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
          }
        }
        function addEventPoolingTo(EventConstructor) {
          EventConstructor.eventPool = [];
          EventConstructor.getPooled = getPooledEvent;
          EventConstructor.release = releasePooledEvent;
        }
        var SyntheticCompositionEvent = SyntheticEvent.extend({
          data: null
        });
        var SyntheticInputEvent = SyntheticEvent.extend({
          data: null
        });
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        var eventTypes = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: "onBeforeInput",
              captured: "onBeforeInputCapture"
            },
            dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: "onCompositionEnd",
              captured: "onCompositionEndCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: "onCompositionStart",
              captured: "onCompositionStartCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: "onCompositionUpdate",
              captured: "onCompositionUpdateCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          }
        };
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(topLevelType) {
          switch (topLevelType) {
            case TOP_COMPOSITION_START:
              return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
              return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
              return eventTypes.compositionUpdate;
          }
        }
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
          return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_KEY_UP:
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
              return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionStart;
            }
          } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === eventTypes.compositionStart) {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === eventTypes.compositionEnd) {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_COMPOSITION_END:
              return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
          if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (topLevelType) {
            case TOP_PASTE:
              return null;
            case TOP_KEY_PRESS:
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case TOP_COMPOSITION_END:
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
          event.data = chars;
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var BeforeInputEventPlugin = {
          eventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) {
              return beforeInput;
            }
            if (beforeInput === null) {
              return composition;
            }
            return [composition, beforeInput];
          }
        };
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        var eventTypes$1 = {
          change: {
            phasedRegistrationNames: {
              bubbled: "onChange",
              captured: "onChangeCapture"
            },
            dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
          }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
          var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
          event.type = "change";
          enqueueStateRestore(target);
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
          runEventsInBatch(event);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance$1(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CHANGE) {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
          if (topLevelType === TOP_FOCUS) {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (topLevelType === TOP_BLUR) {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
          if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CLICK) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        var ChangeEventPlugin = {
          eventTypes: eventTypes$1,
          _isInputEventSupported: isInputEventSupported,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(topLevelType, targetInst);
              if (inst) {
                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                return event;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(topLevelType, targetNode, targetInst);
            }
            if (topLevelType === TOP_BLUR) {
              handleControlledInputBlur(targetNode);
            }
          }
        };
        var SyntheticUIEvent = SyntheticEvent.extend({
          view: null,
          detail: null
        });
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var previousScreenX = 0;
        var previousScreenY = 0;
        var isMovementXSet = false;
        var isMovementYSet = false;
        var SyntheticMouseEvent = SyntheticUIEvent.extend({
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          pageX: null,
          pageY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: getEventModifierState,
          button: null,
          buttons: null,
          relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
              isMovementXSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenX - screenX : 0;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
              isMovementYSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenY - screenY : 0;
          }
        });
        var SyntheticPointerEvent = SyntheticMouseEvent.extend({
          pointerId: null,
          width: null,
          height: null,
          pressure: null,
          tangentialPressure: null,
          tiltX: null,
          tiltY: null,
          twist: null,
          pointerType: null,
          isPrimary: null
        });
        var eventTypes$2 = {
          mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          pointerEnter: {
            registrationName: "onPointerEnter",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          },
          pointerLeave: {
            registrationName: "onPointerLeave",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          }
        };
        var EnterLeaveEventPlugin = {
          eventTypes: eventTypes$2,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
              return null;
            }
            if (!isOutEvent && !isOverEvent) {
              return null;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              from = targetInst;
              var related = nativeEvent.relatedTarget || nativeEvent.toElement;
              to = related ? getClosestInstanceFromNode(related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return null;
            }
            var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
              eventInterface = SyntheticMouseEvent;
              leaveEventType = eventTypes$2.mouseLeave;
              enterEventType = eventTypes$2.mouseEnter;
              eventTypePrefix = "mouse";
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
              eventInterface = SyntheticPointerEvent;
              leaveEventType = eventTypes$2.pointerLeave;
              enterEventType = eventTypes$2.pointerEnter;
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to == null ? win : getNodeFromInstance$1(to);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + "leave";
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + "enter";
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to);
            if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
              return [leave];
            }
            return [leave, enter];
          }
        };
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        var eventTypes$3 = {
          select: {
            phasedRegistrationNames: {
              bubbled: "onSelect",
              captured: "onSelectCapture"
            },
            dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
          }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return null;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = "select";
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
          }
          return null;
        }
        var SelectEventPlugin = {
          eventTypes: eventTypes$3,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
            var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
            if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
              return null;
            }
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch (topLevelType) {
              case TOP_FOCUS:
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case TOP_BLUR:
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case TOP_MOUSE_DOWN:
                mouseDown = true;
                break;
              case TOP_CONTEXT_MENU:
              case TOP_MOUSE_UP:
              case TOP_DRAG_END:
                mouseDown = false;
                return constructSelectEvent(nativeEvent, nativeEventTarget);
              case TOP_SELECTION_CHANGE:
                if (skipSelectionChangeEvent) {
                  break;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
          }
        };
        var SyntheticAnimationEvent = SyntheticEvent.extend({
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticClipboardEvent = SyntheticEvent.extend({
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticFocusEvent = SyntheticUIEvent.extend({
          relatedTarget: null
        });
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
          key: getEventKey,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticDragEvent = SyntheticMouseEvent.extend({
          dataTransfer: null
        });
        var SyntheticTouchEvent = SyntheticUIEvent.extend({
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: getEventModifierState
        });
        var SyntheticTransitionEvent = SyntheticEvent.extend({
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticWheelEvent = SyntheticMouseEvent.extend({
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: null,
          deltaMode: null
        });
        var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
        var SimpleEventPlugin = {
          eventTypes: simpleEventPluginEventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
              case TOP_KEY_PRESS:
                if (getEventCharCode(nativeEvent) === 0) {
                  return null;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                EventConstructor = SyntheticKeyboardEvent;
                break;
              case TOP_BLUR:
              case TOP_FOCUS:
                EventConstructor = SyntheticFocusEvent;
                break;
              case TOP_CLICK:
                if (nativeEvent.button === 2) {
                  return null;
                }
              case TOP_AUX_CLICK:
              case TOP_DOUBLE_CLICK:
              case TOP_MOUSE_DOWN:
              case TOP_MOUSE_MOVE:
              case TOP_MOUSE_UP:
              case TOP_MOUSE_OUT:
              case TOP_MOUSE_OVER:
              case TOP_CONTEXT_MENU:
                EventConstructor = SyntheticMouseEvent;
                break;
              case TOP_DRAG:
              case TOP_DRAG_END:
              case TOP_DRAG_ENTER:
              case TOP_DRAG_EXIT:
              case TOP_DRAG_LEAVE:
              case TOP_DRAG_OVER:
              case TOP_DRAG_START:
              case TOP_DROP:
                EventConstructor = SyntheticDragEvent;
                break;
              case TOP_TOUCH_CANCEL:
              case TOP_TOUCH_END:
              case TOP_TOUCH_MOVE:
              case TOP_TOUCH_START:
                EventConstructor = SyntheticTouchEvent;
                break;
              case TOP_ANIMATION_END:
              case TOP_ANIMATION_ITERATION:
              case TOP_ANIMATION_START:
                EventConstructor = SyntheticAnimationEvent;
                break;
              case TOP_TRANSITION_END:
                EventConstructor = SyntheticTransitionEvent;
                break;
              case TOP_SCROLL:
                EventConstructor = SyntheticUIEvent;
                break;
              case TOP_WHEEL:
                EventConstructor = SyntheticWheelEvent;
                break;
              case TOP_COPY:
              case TOP_CUT:
              case TOP_PASTE:
                EventConstructor = SyntheticClipboardEvent;
                break;
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE:
              case TOP_POINTER_CANCEL:
              case TOP_POINTER_DOWN:
              case TOP_POINTER_MOVE:
              case TOP_POINTER_OUT:
              case TOP_POINTER_OVER:
              case TOP_POINTER_UP:
                EventConstructor = SyntheticPointerEvent;
                break;
              default:
                {
                  if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                    error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                  }
                }
                EventConstructor = SyntheticEvent;
                break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
        };
        var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
        injectEventPluginOrder(DOMEventPluginOrder);
        setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
        injectEventPluginsByName({
          SimpleEventPlugin,
          EnterLeaveEventPlugin,
          ChangeEventPlugin,
          SelectEventPlugin,
          BeforeInputEventPlugin
        });
        var reactEmoji = "⚛";
        var warningEmoji = "⛔";
        var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
        var currentFiber = null;
        var currentPhase = null;
        var currentPhaseFiber = null;
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var labelsInCurrentCommit = new Set();
        var formatMarkName = function(markName) {
          return reactEmoji + " " + markName;
        };
        var formatLabel = function(label, warning) {
          var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
          var suffix = warning ? " Warning: " + warning : "";
          return "" + prefix + label + suffix;
        };
        var beginMark = function(markName) {
          performance.mark(formatMarkName(markName));
        };
        var clearMark = function(markName) {
          performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function(label, markName, warning) {
          var formattedMarkName = formatMarkName(markName);
          var formattedLabel = formatLabel(label, warning);
          try {
            performance.measure(formattedLabel, formattedMarkName);
          } catch (err) {
          }
          performance.clearMarks(formattedMarkName);
          performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function(label, debugID) {
          return label + " (#" + debugID + ")";
        };
        var getFiberLabel = function(componentName, isMounted2, phase) {
          if (phase === null) {
            return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
          } else {
            return componentName + "." + phase;
          }
        };
        var beginFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          if (isCommitting && labelsInCurrentCommit.has(label)) {
            return false;
          }
          labelsInCurrentCommit.add(label);
          var markName = getFiberMarkName(label, debugID);
          beginMark(markName);
          return true;
        };
        var clearFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          clearMark(markName);
        };
        var endFiberMark = function(fiber, phase, warning) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          endMark(label, markName, warning);
        };
        var shouldIgnoreFiber = function(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
              return true;
            default:
              return false;
          }
        };
        var clearPendingPhaseMeasurement = function() {
          if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
          }
          currentPhaseFiber = null;
          currentPhase = null;
          hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function() {
          var fiber = currentFiber;
          while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
              endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
          }
        };
        var resumeTimersRecursively = function(fiber) {
          if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
          }
          if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
          }
        };
        var resumeTimers = function() {
          if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
          }
        };
        function recordEffect() {
          {
            effectCountInCurrentCommit++;
          }
        }
        function recordScheduleUpdate() {
          {
            if (isCommitting) {
              hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
              hasScheduledUpdateInCurrentPhase = true;
            }
          }
        }
        function startWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = true;
          }
        }
        function cancelWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
          }
        }
        function stopWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
          }
        }
        function stopFailedWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
            endFiberMark(fiber, null, warning);
          }
        }
        function startPhaseTimer(fiber, phase) {
          {
            if (!supportsUserTiming) {
              return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase)) {
              return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase;
          }
        }
        function stopPhaseTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
              var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
              endFiberMark(currentPhaseFiber, currentPhase, warning);
            }
            currentPhase = null;
            currentPhaseFiber = null;
          }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
          {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
              return;
            }
            commitCountInCurrentWorkLoop = 0;
            beginMark("(React Tree Reconciliation)");
            resumeTimers();
          }
        }
        function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning = null;
            if (interruptedBy2 !== null) {
              if (interruptedBy2.tag === HostRoot) {
                warning = "A top-level update interrupted the previous render";
              } else {
                var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                warning = "An update to " + componentName + " interrupted the previous render";
              }
            } else if (commitCountInCurrentWorkLoop > 1) {
              warning = "There were cascading updates";
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
            pauseTimers();
            endMark(label, "(React Tree Reconciliation)", warning);
          }
        }
        function startCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark("(Committing Changes)");
          }
        }
        function stopCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning = null;
            if (hasScheduledUpdateInCurrentCommit) {
              warning = "Lifecycle hook scheduled a cascading update";
            } else if (commitCountInCurrentWorkLoop > 0) {
              warning = "Caused by a cascading update in earlier commit";
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark("(Committing Changes)", "(Committing Changes)", warning);
          }
        }
        function startCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Snapshot Effects)");
          }
        }
        function stopCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
          }
        }
        function startCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Host Effects)");
          }
        }
        function stopCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
          }
        }
        function startCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Calling Lifecycle Methods)");
          }
        }
        function stopCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name, getCurrentFiberStackInDev);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext;
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
            }
            return _assign({}, parentContext, {}, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs = Scheduler_now();
        var now = initialTimeMs < 10000 ? Scheduler_now : function() {
          return Scheduler_now() - initialTimeMs;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
              return NormalPriority;
            case Scheduler_LowPriority:
              return LowPriority;
            case Scheduler_IdlePriority:
              return IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
              return Scheduler_UserBlockingPriority;
            case NormalPriority:
              return Scheduler_NormalPriority;
            case LowPriority:
              return Scheduler_LowPriority;
            case IdlePriority:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            try {
              var _isSync = true;
              var queue = syncQueue;
              runWithPriority$1(ImmediatePriority, function() {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(_isSync);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error2;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var NoWork = 0;
        var Never = 1;
        var Idle = 2;
        var ContinuousHydration = 3;
        var Sync = MAX_SIGNED_31_BIT_INT;
        var Batched = Sync - 1;
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = Batched - 1;
        function msToExpirationTime(ms) {
          return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
        }
        function expirationTimeToMs(expirationTime) {
          return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
          return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
          return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var LOW_PRIORITY_EXPIRATION = 5000;
        var LOW_PRIORITY_BATCH_SIZE = 250;
        function computeAsyncExpiration(currentTime) {
          return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
        }
        function computeSuspenseExpiration(currentTime, timeoutMs) {
          return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
        }
        var HIGH_PRIORITY_EXPIRATION = 500;
        var HIGH_PRIORITY_BATCH_SIZE = 100;
        function computeInteractiveExpiration(currentTime) {
          return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
        }
        function inferPriorityFromExpirationTime(currentTime, expirationTime) {
          if (expirationTime === Sync) {
            return ImmediatePriority;
          }
          if (expirationTime === Never || expirationTime === Idle) {
            return IdlePriority;
          }
          var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
          if (msUntil <= 0) {
            return ImmediatePriority;
          }
          if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
            return UserBlockingPriority$1;
          }
          if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
            return NormalPriority;
          }
          return IdlePriority;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            syncUpdates(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleWork(fiber, Sync);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function readLazyComponentType(lazyComponent) {
          initializeLazyComponentType(lazyComponent);
          if (lazyComponent._status !== Resolved) {
            throw lazyComponent._result;
          }
          return lazyComponent._result;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime2) {
              node.childExpirationTime = renderExpirationTime2;
              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              }
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(renderExpirationTime2, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  if (fiber.expirationTime < renderExpirationTime2) {
                    fiber.expirationTime = renderExpirationTime2;
                  }
                  var alternate = fiber.alternate;
                  if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                    alternate.expirationTime = renderExpirationTime2;
                  }
                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                  if (list.expirationTime < renderExpirationTime2) {
                    list.expirationTime = renderExpirationTime2;
                  }
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderExpirationTime2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (dependencies.expirationTime >= renderExpirationTime2) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                expirationTime: NoWork,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            baseQueue: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              baseQueue: currentQueue.baseQueue,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(expirationTime, suspenseConfig) {
          var update = {
            expirationTime,
            suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          update.next = update;
          {
            update.priority = getCurrentPriorityLevel();
          }
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, update) {
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            cloneUpdateQueue(current2, workInProgress2);
          }
          var queue = workInProgress2.updateQueue;
          var last = queue.baseQueue;
          if (last === null) {
            queue.baseQueue = update.next = update;
            update.next = update;
          } else {
            update.next = last.next;
            last.next = update;
          }
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    payload.call(instance, prevState, nextProps);
                  }
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    _payload.call(instance, prevState, nextProps);
                  }
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var baseQueue = queue.baseQueue;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            baseQueue = pendingQueue;
            queue.shared.pending = null;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (currentQueue !== null) {
                currentQueue.baseQueue = pendingQueue;
              }
            }
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = queue.baseState;
            var newExpirationTime = NoWork;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            if (first !== null) {
              var update = first;
              do {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime2) {
                  var clone = {
                    expirationTime: update.expirationTime,
                    suspenseConfig: update.suspenseConfig,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  if (updateExpirationTime > newExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update.suspenseConfig,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.effectTag |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null || update === first) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    update = baseQueue.next = pendingQueue.next;
                    pendingQueue.next = first;
                    queue.baseQueue = baseQueue = pendingQueue;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
            }
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            queue.baseState = newBaseState;
            queue.baseQueue = newBaseQueueLast;
            markUnprocessedUpdateTime(newExpirationTime);
            workInProgress2.expirationTime = newExpirationTime;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        function requestCurrentSuspenseConfig() {
          return ReactCurrentBatchConfig.suspense;
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              getDerivedStateFromProps(nextProps, prevState);
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.expirationTime === NoWork) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              }
            }
            startPhaseTimer(workInProgress2, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              new ctor(props, context);
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          startPhaseTimer(workInProgress2, "componentWillMount");
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress2, "componentWillReceiveProps");
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          stopPhaseTimer();
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress2, "componentWillMount");
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var oldProps = workInProgress2.memoizedProps;
          instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress2, "componentWillUpdate");
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            }
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
              }
            }
          }
        }
        function warnOnFunctionType() {
          {
            var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, expirationTime) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, expirationTime) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, expirationTime) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, expirationTime, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionComponent: {
                  var Component = returnFiber.type;
                  {
                    {
                      throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, renderExpirationTime2) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, renderExpirationTime2);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function createDeprecatedResponderListener(responder, props) {
          var eventResponderListener = {
            responder,
            props
          };
          {
            Object.freeze(eventResponderListener);
          }
          return eventResponderListener;
        }
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderExpirationTime = NoWork;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderExpirationTime) {
          renderExpirationTime = nextRenderExpirationTime;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.expirationTime = NoWork;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (workInProgress2.expirationTime === renderExpirationTime) {
            var numberOfReRenders = 0;
            do {
              workInProgress2.expirationTime = NoWork;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (workInProgress2.expirationTime === renderExpirationTime);
          }
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, expirationTime) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.effectTag &= ~(Passive | Update);
          if (current2.expirationTime <= expirationTime) {
            current2.expirationTime = NoWork;
          }
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
          }
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateExpirationTime = update.expirationTime;
              if (updateExpirationTime < renderExpirationTime) {
                var clone = {
                  expirationTime: update.expirationTime,
                  suspenseConfig: update.suspenseConfig,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                  currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                  markUnprocessedUpdateTime(updateExpirationTime);
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update.suspenseConfig,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookEffectTag, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value, config) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config]);
          return prevValue;
        }
        function updateDeferredValue(value, config) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config]);
          return prevValue;
        }
        function rerenderDeferredValue(value, config) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config]);
          return prevValue;
        }
        function startTransition(setPending, config, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }
        function mountTransition(config) {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
          return [start, isPending];
        }
        function updateTransition(config) {
          var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
          return [start, isPending];
        }
        function rerenderTransition(config) {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
          return [start, isPending];
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = {
            expirationTime,
            suspenseConfig,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            update.priority = getCurrentPriorityLevel();
          }
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdate = true;
            update.expirationTime = renderExpirationTime;
            currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
          } else {
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher.current;
                  ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleWork(fiber, expirationTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useResponder: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition(config);
            }
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition(config);
            }
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition(config);
            }
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition(config);
            }
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.effectTag = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
            }
          }
          var currentChild = current2.child;
          if (updateExpirationTime < renderExpirationTime2) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                outerMemoType = refineResolvedLazyComponent(outerMemoType);
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (updateExpirationTime < renderExpirationTime2) {
                workInProgress2.expirationTime = current2.expirationTime;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
        }
        function updateFragment(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
          {
            workInProgress2.effectTag |= Update;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.effectTag |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2);
          {
            var inst = workInProgress2.stateNode;
            if (inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                instance.render();
              }
              setIsRendering(false);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.effectTag = node.effectTag & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.effectTag |= ContentReset;
          }
          markRef(current2, workInProgress2);
          if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            {
              markSpawnedWork(Never);
            }
            workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
            return null;
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          cancelWorkTimer(workInProgress2);
          var Component = readLazyComponentType(elementType);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          startWorkTimer(workInProgress2);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName2 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName3 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support contextType.", _componentName3);
                didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryTime: NoWork
        };
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
          var mode = workInProgress2.mode;
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.effectTag |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var nextDidTimeout = false;
          var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            nextDidTimeout = true;
            workInProgress2.effectTag &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            if (nextDidTimeout) {
              var nextFallbackChildren = nextProps.fallback;
              var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
              primaryChildFragment.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var progressedState = workInProgress2.memoizedState;
                var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                primaryChildFragment.child = progressedPrimaryChild;
                var progressedChild = progressedPrimaryChild;
                while (progressedChild !== null) {
                  progressedChild.return = primaryChildFragment;
                  progressedChild = progressedChild.sibling;
                }
              }
              var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
              fallbackChildFragment.return = workInProgress2;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = primaryChildFragment;
              return fallbackChildFragment;
            } else {
              var nextPrimaryChildren = nextProps.children;
              workInProgress2.memoizedState = null;
              return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var currentPrimaryChildFragment = current2.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              if (nextDidTimeout) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                _primaryChildFragment2.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState = workInProgress2.memoizedState;
                  var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                    _primaryChildFragment2.child = _progressedPrimaryChild;
                    var _progressedChild2 = _progressedPrimaryChild;
                    while (_progressedChild2 !== null) {
                      _progressedChild2.return = _primaryChildFragment2;
                      _progressedChild2 = _progressedChild2.sibling;
                    }
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration = 0;
                  var _hiddenChild = _primaryChildFragment2.child;
                  while (_hiddenChild !== null) {
                    _treeBaseDuration += _hiddenChild.treeBaseDuration;
                    _hiddenChild = _hiddenChild.sibling;
                  }
                  _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                }
                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                _fallbackChildFragment2.return = workInProgress2;
                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                _primaryChildFragment2.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment2;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var currentPrimaryChild = currentPrimaryChildFragment.child;
                var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                workInProgress2.memoizedState = null;
                return workInProgress2.child = primaryChild;
              }
            } else {
              var _currentPrimaryChild = current2.child;
              if (nextDidTimeout) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                _primaryChildFragment3.return = workInProgress2;
                _primaryChildFragment3.child = _currentPrimaryChild;
                if (_currentPrimaryChild !== null) {
                  _currentPrimaryChild.return = _primaryChildFragment3;
                }
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState2 = workInProgress2.memoizedState;
                  var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                  _primaryChildFragment3.child = _progressedPrimaryChild2;
                  var _progressedChild3 = _progressedPrimaryChild2;
                  while (_progressedChild3 !== null) {
                    _progressedChild3.return = _primaryChildFragment3;
                    _progressedChild3 = _progressedChild3.sibling;
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration2 = 0;
                  var _hiddenChild2 = _primaryChildFragment3.child;
                  while (_hiddenChild2 !== null) {
                    _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                    _hiddenChild2 = _hiddenChild2.sibling;
                  }
                  _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                }
                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                _fallbackChildFragment3.return = workInProgress2;
                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                _fallbackChildFragment3.effectTag |= Placement;
                _primaryChildFragment3.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment3;
                return _fallbackChildFragment3;
              } else {
                workInProgress2.memoizedState = null;
                var _nextPrimaryChildren2 = nextProps.children;
                return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
              }
            }
          }
        }
        function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
          if (fiber.expirationTime < renderExpirationTime2) {
            fiber.expirationTime = renderExpirationTime2;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
            alternate.expirationTime = renderExpirationTime2;
          }
          scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailExpiration: 0,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.effectTag |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          return workInProgress2.child;
        }
        function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
          cancelWorkTimer(workInProgress2);
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          var updateExpirationTime = workInProgress2.expirationTime;
          if (updateExpirationTime !== NoWork) {
            markUnprocessedUpdateTime(updateExpirationTime);
          }
          var childExpirationTime = workInProgress2.childExpirationTime;
          if (childExpirationTime < renderExpirationTime2) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.effectTag = Deletion;
            newWorkInProgress.effectTag |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderExpirationTime2) {
          var updateExpirationTime = workInProgress2.expirationTime;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (updateExpirationTime < renderExpirationTime2) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                    {
                      markSpawnedWork(Never);
                    }
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                    return null;
                  }
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (hasChildWork) {
                      workInProgress2.effectTag |= Update;
                    }
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                      return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                  var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                    }
                    workInProgress2.effectTag |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            } else {
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.expirationTime = NoWork;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderExpirationTime2);
            case Mode:
              return updateMode(current2, workInProgress2, renderExpirationTime2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderExpirationTime2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.effectTag |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.effectTag |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderExpirationTime2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                workInProgress2.expirationTime = renderExpirationTime2;
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current2.child.sibling;
                  if (currentFallbackChild !== null) {
                    var first = workInProgress2.firstEffect;
                    if (first !== null) {
                      workInProgress2.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }
                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.effectTag |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderExpirationTime2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.effectTag |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime2 - 1;
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                }
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderExpirationTime2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var effectTag = workInProgress2.effectTag;
              if (effectTag & ShouldCapture) {
                workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _effectTag = workInProgress2.effectTag;
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _effectTag2 = workInProgress2.effectTag;
              if (_effectTag2 & ShouldCapture) {
                workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function logCapturedError(capturedError) {
          var error2 = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            if (error2 != null && error2._suppressLogging) {
              if (errorBoundaryFound && willRetry) {
                return;
              }
              console["error"](error2);
            }
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        function logError(boundary, errorInfo) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
          }
          var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : "",
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
          };
          if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
          }
          try {
            logCapturedError(capturedError);
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          startPhaseTimer(current2, "componentWillUnmount");
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.effectTag & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }
              return;
            }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveHookEffects(finishedWork) {
          if ((finishedWork.effectTag & Passive) !== NoEffect) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
              }
            }
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update) {
                if (current2 === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  stopPhaseTimer();
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority$1(priorityLevel, function() {
                      var effect = firstEffect;
                      do {
                        var _destroy = effect.destroy;
                        if (_destroy !== void 0) {
                          safelyCallDestroy(current2, _destroy);
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node = root2;
          while (true) {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiber(current2) {
          var alternate = current2.alternate;
          current2.return = null;
          current2.child = null;
          current2.memoizedState = null;
          current2.updateQueue = null;
          current2.dependencies = null;
          current2.alternate = null;
          current2.firstEffect = null;
          current2.lastEffect = null;
          current2.pendingProps = null;
          current2.memoizedProps = null;
          current2.stateNode = null;
          if (alternate !== null) {
            detachFiber(alternate);
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.effectTag & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.effectTag & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
          }
          detachFiber(current2);
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          var newDidTimeout;
          var primaryChildParent = finishedWork;
          if (newState === null) {
            newDidTimeout = false;
          } else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
          }
          if (primaryChildParent !== null) {
            hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var thenables = finishedWork.updateQueue;
          if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            thenables.forEach(function(thenable) {
              var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
              if (!retryCache.has(thenable)) {
                {
                  if (thenable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(thenable);
                thenable.then(retry, retry);
              }
            });
          }
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (fiber.expirationTime !== Sync) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root2, renderExpirationTime2, thenable) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(thenable, threadIDs);
            }
          }
          if (!threadIDs.has(renderExpirationTime2)) {
            threadIDs.add(renderExpirationTime2);
            var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime2);
            thenable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime2) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var thenable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.expirationTime = currentSource.expirationTime;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var thenables = _workInProgress.updateQueue;
                if (thenables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  thenables.add(thenable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.effectTag |= DidCapture;
                  sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(Sync, null);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.expirationTime = Sync;
                  return;
                }
                attachPingListener(root2, renderExpirationTime2, thenable);
                _workInProgress.effectTag |= ShouldCapture;
                _workInProgress.expirationTime = renderExpirationTime2;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var renderExpirationTime$1 = NoWork;
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootLatestProcessedExpirationTime = Sync;
        var workInProgressRootLatestSuspenseTimeout = Sync;
        var workInProgressRootCanSuspendUsingConfig = null;
        var workInProgressRootNextUnprocessedUpdateTime = NoWork;
        var workInProgressRootHasPendingPing = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority;
        var pendingPassiveEffectsExpirationTime = NoWork;
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var interruptedBy = null;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoWork;
        function requestCurrentTimeForUpdate() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return msToExpirationTime(now());
          }
          if (currentEventTime !== NoWork) {
            return currentEventTime;
          }
          currentEventTime = msToExpirationTime(now());
          return currentEventTime;
        }
        function getCurrentTime() {
          return msToExpirationTime(now());
        }
        function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return Sync;
          }
          var priorityLevel = getCurrentPriorityLevel();
          if ((mode & ConcurrentMode) === NoMode) {
            return priorityLevel === ImmediatePriority ? Sync : Batched;
          }
          if ((executionContext & RenderContext) !== NoContext) {
            return renderExpirationTime$1;
          }
          var expirationTime;
          if (suspenseConfig !== null) {
            expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          } else {
            switch (priorityLevel) {
              case ImmediatePriority:
                expirationTime = Sync;
                break;
              case UserBlockingPriority$1:
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
              case NormalPriority:
              case LowPriority:
                expirationTime = computeAsyncExpiration(currentTime);
                break;
              case IdlePriority:
                expirationTime = Idle;
                break;
              default: {
                {
                  throw Error("Expected a valid priority level");
                }
              }
            }
          }
          if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
            expirationTime -= 1;
          }
          return expirationTime;
        }
        function scheduleUpdateOnFiber(fiber, expirationTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
          }
          checkForInterruption(fiber, expirationTime);
          recordScheduleUpdate();
          var priorityLevel = getCurrentPriorityLevel();
          if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, expirationTime);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, expirationTime);
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          } else {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, expirationTime);
          }
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Map([[root2, expirationTime]]);
            } else {
              var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root2);
              if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                rootsWithPendingDiscreteUpdates.set(root2, expirationTime);
              }
            }
          }
        }
        var scheduleWork = scheduleUpdateOnFiber;
        function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
          if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
          }
          var node = fiber.return;
          var root2 = null;
          if (node === null && fiber.tag === HostRoot) {
            root2 = fiber.stateNode;
          } else {
            while (node !== null) {
              alternate = node.alternate;
              if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
              } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
              if (node.return === null && node.tag === HostRoot) {
                root2 = node.stateNode;
                break;
              }
              node = node.return;
            }
          }
          if (root2 !== null) {
            if (workInProgressRoot === root2) {
              markUnprocessedUpdateTime(expirationTime);
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspendedAtTime(root2, renderExpirationTime$1);
              }
            }
            markRootUpdatedAtTime(root2, expirationTime);
          }
          return root2;
        }
        function getNextRootExpirationTimeToWorkOn(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            return lastExpiredTime;
          }
          var firstPendingTime = root2.firstPendingTime;
          if (!isRootSuspendedAtTime(root2, firstPendingTime)) {
            return firstPendingTime;
          }
          var lastPingedTime = root2.lastPingedTime;
          var nextKnownPendingLevel = root2.nextKnownPendingLevel;
          var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
          if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
            return NoWork;
          }
          return nextLevel;
        }
        function ensureRootIsScheduled(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            root2.callbackExpirationTime = Sync;
            root2.callbackPriority = ImmediatePriority;
            root2.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            return;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          var existingCallbackNode = root2.callbackNode;
          if (expirationTime === NoWork) {
            if (existingCallbackNode !== null) {
              root2.callbackNode = null;
              root2.callbackExpirationTime = NoWork;
              root2.callbackPriority = NoPriority;
            }
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            var existingCallbackExpirationTime = root2.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          root2.callbackExpirationTime = expirationTime;
          root2.callbackPriority = priorityLevel;
          var callbackNode;
          if (expirationTime === Sync) {
            callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root2), {
              timeout: expirationTimeToMs(expirationTime) - now()
            });
          }
          root2.callbackNode = callbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          currentEventTime = NoWork;
          if (didTimeout) {
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root2, currentTime);
            ensureRootIsScheduled(root2);
            return null;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          if (expirationTime !== NoWork) {
            var originalCallbackNode = root2.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root2, expirationTime);
              startWorkOnPendingInteractions(root2, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root2);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root2, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root2, expirationTime);
                markRootSuspendedAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
                throw fatalError;
              }
              if (workInProgress !== null) {
                stopInterruptedWorkLoopTimer();
              } else {
                stopFinishedWorkLoopTimer();
                var finishedWork = root2.finishedWork = root2.current.alternate;
                root2.finishedExpirationTime = expirationTime;
                finishConcurrentRender(root2, finishedWork, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root2);
              if (root2.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root2);
              }
            }
          }
          return null;
        }
        function finishConcurrentRender(root2, finishedWork, exitStatus, expirationTime) {
          workInProgressRoot = null;
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              markRootExpiredAtTime(root2, expirationTime > Idle ? Idle : expirationTime);
              break;
            }
            case RootSuspended: {
              markRootSuspendedAtTime(root2, expirationTime);
              var lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root2.lastPingedTime;
                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root2.lastPingedTime = expirationTime;
                      prepareFreshStack(root2, expirationTime);
                      break;
                    }
                  }
                  var nextTime = getNextRootExpirationTimeToWorkOn(root2);
                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }
                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root2.lastPingedTime = lastSuspendedTime;
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspendedAtTime(root2, expirationTime);
              var _lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === _lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              if (!IsThisRendererActing.current) {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root2.lastPingedTime;
                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root2.lastPingedTime = expirationTime;
                    prepareFreshStack(root2, expirationTime);
                    break;
                  }
                }
                var _nextTime = getNextRootExpirationTimeToWorkOn(root2);
                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }
                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root2.lastPingedTime = _lastSuspendedTime;
                  break;
                }
                var _msUntilTimeout;
                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;
                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }
                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootCompleted: {
              if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root2, expirationTime);
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout2);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function performSyncWorkOnRoot(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
            prepareFreshStack(root2, expirationTime);
            startWorkOnPendingInteractions(root2, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root2);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root2, expirationTime);
              markRootSuspendedAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
              throw fatalError;
            }
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            } else {
              stopFinishedWorkLoopTimer();
              root2.finishedWork = root2.current.alternate;
              root2.finishedExpirationTime = expirationTime;
              finishSyncRender(root2);
            }
            ensureRootIsScheduled(root2);
          }
          return null;
        }
        function finishSyncRender(root2) {
          workInProgressRoot = null;
          commitRoot(root2);
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function syncUpdates(fn, a, b, c) {
          return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root2) {
              markRootExpiredAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
            });
            flushSyncCallbackQueue();
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              {
                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
              }
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
        function prepareFreshStack(root2, expirationTime) {
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          renderExpirationTime$1 = expirationTime;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootLatestProcessedExpirationTime = Sync;
          workInProgressRootLatestSuspenseTimeout = Sync;
          workInProgressRootCanSuspendUsingConfig = null;
          workInProgressRootNextUnprocessedUpdateTime = NoWork;
          workInProgressRootHasPendingPing = false;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              if (workInProgress === null || workInProgress.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return null;
              }
              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
              }
              throwException(root2, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
              workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher(root2) {
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
          if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
            workInProgressRootLatestProcessedExpirationTime = expirationTime;
          }
          if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
              workInProgressRootLatestSuspenseTimeout = expirationTime;
              workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
          }
        }
        function markUnprocessedUpdateTime(expirationTime) {
          if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
            workInProgressRootNextUnprocessedUpdateTime = expirationTime;
          }
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function inferTimeFromExpirationTime(expirationTime) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
        }
        function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          startWorkTimer(unitOfWork);
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            next = completeUnitOfWork(unitOfWork);
          }
          ReactCurrentOwner$2.current = null;
          return next;
        }
        function completeUnitOfWork(unitOfWork) {
          workInProgress = unitOfWork;
          do {
            var current2 = workInProgress.alternate;
            var returnFiber = workInProgress.return;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              setCurrentFiber(workInProgress);
              var next = void 0;
              if ((workInProgress.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
              } else {
                startProfilerTimer(workInProgress);
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              }
              stopWorkTimer(workInProgress);
              resetCurrentFiber();
              resetChildExpirationTime(workInProgress);
              if (next !== null) {
                return next;
              }
              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
            } else {
              var _next = unwindWork(workInProgress);
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                var actualDuration = workInProgress.actualDuration;
                var child = workInProgress.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                workInProgress.actualDuration = actualDuration;
              }
              if (_next !== null) {
                stopFailedWorkTimer(workInProgress);
                _next.effectTag &= HostEffectMask;
                return _next;
              }
              stopWorkTimer(workInProgress);
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) {
              return siblingFiber;
            }
            workInProgress = returnFiber;
          } while (workInProgress !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
          return null;
        }
        function getRemainingExpirationTime(fiber) {
          var updateExpirationTime = fiber.expirationTime;
          var childExpirationTime = fiber.childExpirationTime;
          return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
        }
        function resetChildExpirationTime(completedWork) {
          if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
            return;
          }
          var newChildExpirationTime = NoWork;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              var childUpdateExpirationTime = child.expirationTime;
              var childChildExpirationTime = child.childExpirationTime;
              if (childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childUpdateExpirationTime;
              }
              if (childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childChildExpirationTime;
              }
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              var _childUpdateExpirationTime = _child.expirationTime;
              var _childChildExpirationTime = _child.childExpirationTime;
              if (_childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childUpdateExpirationTime;
              }
              if (_childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childChildExpirationTime;
              }
              _child = _child.sibling;
            }
          }
          completedWork.childExpirationTime = newChildExpirationTime;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var expirationTime = root2.finishedExpirationTime;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          root2.callbackExpirationTime = NoWork;
          root2.callbackPriority = NoPriority;
          root2.nextKnownPendingLevel = NoWork;
          startCommitTimer();
          var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
          markRootFinishedAtTime(root2, expirationTime, remainingExpirationTimeBeforeCommit);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime$1 = NoWork;
          }
          var firstEffect;
          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root2.containerInfo);
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitHostEffectsTimer();
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, expirationTime);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitLifeCyclesTimer();
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
          }
          stopCommitTimer();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = nextNextEffect;
            }
          }
          var remainingExpirationTime = root2.firstPendingTime;
          if (remainingExpirationTime !== NoWork) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingExpirationTime);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, expirationTime);
            }
          }
          if (remainingExpirationTime === Sync) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, expirationTime);
          ensureRootIsScheduled(root2);
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
              setCurrentFiber(nextEffect);
              recordEffect();
              var current2 = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch (primaryEffectTag) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root2, nextEffect, renderPriorityLevel);
                break;
              }
            }
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedExpirationTime) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var expirationTime = pendingPassiveEffectsExpirationTime;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsExpirationTime = NoWork;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          {
            var _effect2 = root2.current.firstEffect;
            while (_effect2 !== null) {
              {
                setCurrentFiber(_effect2);
                invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                if (hasCaughtError()) {
                  if (!(_effect2 !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error5 = clearCaughtError();
                  captureCommitPhaseError(_effect2, _error5);
                }
                resetCurrentFiber();
              }
              var nextNextEffect = _effect2.nextEffect;
              _effect2.nextEffect = null;
              _effect2 = nextNextEffect;
            }
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, expirationTime);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
          enqueueUpdate(rootFiber, update);
          var root2 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, Sync);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                enqueueUpdate(fiber, update);
                var root2 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                if (root2 !== null) {
                  ensureRootIsScheduled(root2);
                  schedulePendingInteractions(root2, Sync);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, thenable, suspendedTime) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(thenable);
          }
          if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, renderExpirationTime$1);
            } else {
              workInProgressRootHasPendingPing = true;
            }
            return;
          }
          if (!isRootSuspendedAtTime(root2, suspendedTime)) {
            return;
          }
          var lastPingedTime = root2.lastPingedTime;
          if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
            return;
          }
          root2.lastPingedTime = suspendedTime;
          ensureRootIsScheduled(root2);
          schedulePendingInteractions(root2, suspendedTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryTime) {
          if (retryTime === NoWork) {
            var suspenseConfig = null;
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
          }
          var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, retryTime);
          }
        }
        function resolveRetryThenable(boundaryFiber, thenable) {
          var retryTime = NoWork;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(thenable);
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
          var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
          if (busyMinDurationMs <= 0) {
            return 0;
          }
          var busyDelayMs = suspenseConfig.busyDelayMs | 0;
          var currentTimeMs = now();
          var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
          var timeElapsed = currentTimeMs - eventTimeMs;
          if (timeElapsed <= busyDelayMs) {
            return 0;
          }
          var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
          return msUntilTimeout;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function stopFinishedWorkLoopTimer() {
          var didCompleteRoot = true;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function stopInterruptedWorkLoopTimer() {
          var didCompleteRoot = false;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
          if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
            interruptedBy = fiberThatReceivedUpdate;
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, expirationTime) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, expirationTime);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, expirationTime) {
          return expirationTime * 1000 + root2.interactionThreadID;
        }
        function markSpawnedWork(expirationTime) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [expirationTime];
          } else {
            spawnedWorkDuringRender.push(expirationTime);
          }
        }
        function scheduleInteractions(root2, expirationTime, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, expirationTime) {
          scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, expirationTime) {
          var interactions = new Set();
          root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedExpirationTime) {
          var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedExpirationTime);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                pendingInteractionMap.delete(scheduledExpirationTime);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        var onScheduleFiberRoot = null;
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            if (true) {
              if (typeof hook.onScheduleFiberRoot === "function") {
                onScheduleFiberRoot = function(root2, children) {
                  try {
                    hook.onScheduleFiberRoot(rendererID, root2, children);
                  } catch (err) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                };
              }
            }
            onCommitFiberRoot = function(root2, expirationTime) {
              try {
                var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var currentTime = getCurrentTime();
                  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                  hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  hook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
            onCommitFiberUnmount = function(fiber) {
              try {
                hook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          if (typeof onScheduleFiberRoot === "function") {
            onScheduleFiberRoot(root2, children);
          }
        }
        function onCommitRoot(root2, expirationTime) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root2, expirationTime);
          }
        }
        function onCommitUnmount(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = new Map([[nonExtensibleObject, null]]);
            var testSet = new Set([nonExtensibleObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.effectTag = NoEffect;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.expirationTime = NoWork;
          this.childExpirationTime = NoWork;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugIsCurrentlyTiming = false;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              {
                workInProgress2._debugID = current2._debugID;
              }
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.effectTag = NoEffect;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
          workInProgress2.effectTag &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childExpirationTime = NoWork;
            workInProgress2.expirationTime = renderExpirationTime2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
          var fiber;
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                case REACT_CONCURRENT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= ConcurrentMode | BlockingMode | StrictMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromElement(element, mode, expirationTime) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, expirationTime, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
          {
            if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
              error('Profiler must specify an "id" string and "onRender" function as props');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromText(content, mode, expirationTime) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, expirationTime) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.expirationTime = expirationTime;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.effectTag = source.effectTag;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.expirationTime = source.expirationTime;
          target.childExpirationTime = source.childExpirationTime;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          {
            target._debugID = source._debugID;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.current = null;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.pingCache = null;
          this.finishedExpirationTime = NoWork;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoPriority;
          this.firstPendingTime = NoWork;
          this.firstSuspendedTime = NoWork;
          this.lastSuspendedTime = NoWork;
          this.nextKnownPendingLevel = NoWork;
          this.lastPingedTime = NoWork;
          this.lastExpiredTime = NoWork;
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function isRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
        }
        function markRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          if (firstSuspendedTime < expirationTime) {
            root2.firstSuspendedTime = expirationTime;
          }
          if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
            root2.lastSuspendedTime = expirationTime;
          }
          if (expirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (expirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootUpdatedAtTime(root2, expirationTime) {
          var firstPendingTime = root2.firstPendingTime;
          if (expirationTime > firstPendingTime) {
            root2.firstPendingTime = expirationTime;
          }
          var firstSuspendedTime = root2.firstSuspendedTime;
          if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) {
              root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            } else if (expirationTime >= root2.lastSuspendedTime) {
              root2.lastSuspendedTime = expirationTime + 1;
            }
            if (expirationTime > root2.nextKnownPendingLevel) {
              root2.nextKnownPendingLevel = expirationTime;
            }
          }
        }
        function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
          root2.firstPendingTime = remainingExpirationTime;
          if (finishedExpirationTime <= root2.lastSuspendedTime) {
            root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
          } else if (finishedExpirationTime <= root2.firstSuspendedTime) {
            root2.firstSuspendedTime = finishedExpirationTime - 1;
          }
          if (finishedExpirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (finishedExpirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootExpiredAtTime(root2, expirationTime) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
            root2.lastExpiredTime = expirationTime;
          }
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var currentTime = requestCurrentTimeForUpdate();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleWork(current$1, expirationTime);
          return expirationTime;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryTimeImpl(fiber, retryTime) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) {
              suspenseState.retryTime = retryTime;
            }
          }
        }
        function markRetryTimeIfNotHydrated(fiber, retryTime) {
          markRetryTimeImpl(fiber, retryTime);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryTimeImpl(alternate, retryTime);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          scheduleWork(fiber, ContinuousHydration);
          markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var expTime = computeExpirationForFiber(currentTime, fiber, null);
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideProps = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithSetImpl = function(obj, path, idx, value) {
            if (idx >= path.length) {
              return value;
            }
            var key = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          overrideHookState = function(fiber, id, path, value) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            if (currentHook2 !== null) {
              var newState = copyWithSet(currentHook2.memoizedState, path, value);
              currentHook2.memoizedState = newState;
              currentHook2.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleWork(fiber, Sync);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
          };
          scheduleUpdate = function(fiber) {
            scheduleWork(fiber, Sync);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals(_assign({}, devToolsConfig, {
            overrideHookState,
            overrideProps,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber: function(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: function() {
              return current;
            }
          }));
        }
        var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
        function ReactDOMRoot(container, options) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
        }
        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options) {
          var hydrate2 = options != null && options.hydrate === true;
          var hydrationCallbacks = options != null && options.hydrationOptions || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          if (hydrate2 && tag !== LegacyRoot) {
            var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
            eagerlyTrapReplayableEvents(container, doc);
          }
          return root2;
        }
        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var ReactVersion = "16.13.1";
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  },

  65(require, exports, module) {
    // node_modules/react-dom/index.js
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (true) {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require(64 /* ./cjs/react-dom.development.js */);
    }
  },

  74(require, exports, module) {
    // node_modules/rematrix/dist/rematrix.js
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global.Rematrix = {});
    })(this, function(exports2) {
      "use strict";
      function format(source) {
        if (source.constructor !== Array) {
          throw new TypeError("Expected array.");
        }
        if (source.length === 16) {
          return source;
        }
        if (source.length === 6) {
          var matrix = identity();
          matrix[0] = source[0];
          matrix[1] = source[1];
          matrix[4] = source[2];
          matrix[5] = source[3];
          matrix[12] = source[4];
          matrix[13] = source[5];
          return matrix;
        }
        throw new RangeError("Expected array with either 6 or 16 values.");
      }
      function identity() {
        var matrix = [];
        for (var i = 0; i < 16; i++) {
          i % 5 == 0 ? matrix.push(1) : matrix.push(0);
        }
        return matrix;
      }
      function inverse(source) {
        var m = format(source);
        var s0 = m[0] * m[5] - m[4] * m[1];
        var s1 = m[0] * m[6] - m[4] * m[2];
        var s2 = m[0] * m[7] - m[4] * m[3];
        var s3 = m[1] * m[6] - m[5] * m[2];
        var s4 = m[1] * m[7] - m[5] * m[3];
        var s5 = m[2] * m[7] - m[6] * m[3];
        var c5 = m[10] * m[15] - m[14] * m[11];
        var c4 = m[9] * m[15] - m[13] * m[11];
        var c3 = m[9] * m[14] - m[13] * m[10];
        var c2 = m[8] * m[15] - m[12] * m[11];
        var c1 = m[8] * m[14] - m[12] * m[10];
        var c0 = m[8] * m[13] - m[12] * m[9];
        var determinant = 1 / (s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0);
        if (isNaN(determinant) || determinant === Infinity) {
          throw new Error("Inverse determinant attempted to divide by zero.");
        }
        return [(m[5] * c5 - m[6] * c4 + m[7] * c3) * determinant, (-m[1] * c5 + m[2] * c4 - m[3] * c3) * determinant, (m[13] * s5 - m[14] * s4 + m[15] * s3) * determinant, (-m[9] * s5 + m[10] * s4 - m[11] * s3) * determinant, (-m[4] * c5 + m[6] * c2 - m[7] * c1) * determinant, (m[0] * c5 - m[2] * c2 + m[3] * c1) * determinant, (-m[12] * s5 + m[14] * s2 - m[15] * s1) * determinant, (m[8] * s5 - m[10] * s2 + m[11] * s1) * determinant, (m[4] * c4 - m[5] * c2 + m[7] * c0) * determinant, (-m[0] * c4 + m[1] * c2 - m[3] * c0) * determinant, (m[12] * s4 - m[13] * s2 + m[15] * s0) * determinant, (-m[8] * s4 + m[9] * s2 - m[11] * s0) * determinant, (-m[4] * c3 + m[5] * c1 - m[6] * c0) * determinant, (m[0] * c3 - m[1] * c1 + m[2] * c0) * determinant, (-m[12] * s3 + m[13] * s1 - m[14] * s0) * determinant, (m[8] * s3 - m[9] * s1 + m[10] * s0) * determinant];
      }
      function multiply(m, x) {
        var fm = format(m);
        var fx = format(x);
        var product = [];
        for (var i = 0; i < 4; i++) {
          var row = [fm[i], fm[i + 4], fm[i + 8], fm[i + 12]];
          for (var j = 0; j < 4; j++) {
            var k = j * 4;
            var col = [fx[k], fx[k + 1], fx[k + 2], fx[k + 3]];
            var result = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];
            product[i + k] = result;
          }
        }
        return product;
      }
      function parse(source) {
        if (typeof source === "string") {
          var match = source.match(/matrix(3d)?\(([^)]+)\)/);
          if (match) {
            var raw = match[2].split(", ").map(parseFloat);
            return format(raw);
          }
        }
        return identity();
      }
      function rotate(angle) {
        return rotateZ(angle);
      }
      function rotateX(angle) {
        var theta = Math.PI / 180 * angle;
        var matrix = identity();
        matrix[5] = matrix[10] = Math.cos(theta);
        matrix[6] = matrix[9] = Math.sin(theta);
        matrix[9] *= -1;
        return matrix;
      }
      function rotateY(angle) {
        var theta = Math.PI / 180 * angle;
        var matrix = identity();
        matrix[0] = matrix[10] = Math.cos(theta);
        matrix[2] = matrix[8] = Math.sin(theta);
        matrix[2] *= -1;
        return matrix;
      }
      function rotateZ(angle) {
        var theta = Math.PI / 180 * angle;
        var matrix = identity();
        matrix[0] = matrix[5] = Math.cos(theta);
        matrix[1] = matrix[4] = Math.sin(theta);
        matrix[4] *= -1;
        return matrix;
      }
      function scale(scalar, scalarY) {
        var matrix = identity();
        matrix[0] = scalar;
        matrix[5] = typeof scalarY === "number" ? scalarY : scalar;
        return matrix;
      }
      function scaleX(scalar) {
        var matrix = identity();
        matrix[0] = scalar;
        return matrix;
      }
      function scaleY(scalar) {
        var matrix = identity();
        matrix[5] = scalar;
        return matrix;
      }
      function scaleZ(scalar) {
        var matrix = identity();
        matrix[10] = scalar;
        return matrix;
      }
      function skew(angleX, angleY) {
        var thetaX = Math.PI / 180 * angleX;
        var matrix = identity();
        matrix[4] = Math.tan(thetaX);
        if (angleY) {
          var thetaY = Math.PI / 180 * angleY;
          matrix[1] = Math.tan(thetaY);
        }
        return matrix;
      }
      function skewX(angle) {
        var theta = Math.PI / 180 * angle;
        var matrix = identity();
        matrix[4] = Math.tan(theta);
        return matrix;
      }
      function skewY(angle) {
        var theta = Math.PI / 180 * angle;
        var matrix = identity();
        matrix[1] = Math.tan(theta);
        return matrix;
      }
      function translate(distanceX, distanceY) {
        var matrix = identity();
        matrix[12] = distanceX;
        if (distanceY) {
          matrix[13] = distanceY;
        }
        return matrix;
      }
      function translateX(distance) {
        var matrix = identity();
        matrix[12] = distance;
        return matrix;
      }
      function translateY(distance) {
        var matrix = identity();
        matrix[13] = distance;
        return matrix;
      }
      function translateZ(distance) {
        var matrix = identity();
        matrix[14] = distance;
        return matrix;
      }
      exports2.format = format;
      exports2.identity = identity;
      exports2.inverse = inverse;
      exports2.multiply = multiply;
      exports2.parse = parse;
      exports2.rotate = rotate;
      exports2.rotateX = rotateX;
      exports2.rotateY = rotateY;
      exports2.rotateZ = rotateZ;
      exports2.scale = scale;
      exports2.scaleX = scaleX;
      exports2.scaleY = scaleY;
      exports2.scaleZ = scaleZ;
      exports2.skew = skew;
      exports2.skewX = skewX;
      exports2.skewY = skewY;
      exports2.translate = translate;
      exports2.translateX = translateX;
      exports2.translateY = translateY;
      exports2.translateZ = translateZ;
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
    });
  },

  67(require, exports) {
    // node_modules/react-is/cjs/react-is.development.js
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  },

  68(require, exports, module) {
    // node_modules/react-is/index.js
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require(67 /* ./cjs/react-is.development.js */);
    }
  },

  60(require, exports, module) {
    // node_modules/prop-types/factoryWithTypeCheckers.js
    "use strict";
    var ReactIs = require(68 /* react-is */);
    var assign = require(58 /* object-assign */);
    var ReactPropTypesSecret = require(62 /* ./lib/ReactPropTypesSecret */);
    var checkPropTypes = require(59 /* ./checkPropTypes */);
    var has = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  },

  61(require, exports, module) {
    // node_modules/prop-types/index.js
    if (true) {
      var ReactIs = require(68 /* react-is */);
      var throwOnDirectAccess = true;
      module.exports = require(60 /* ./factoryWithTypeCheckers */)(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
  },

  66(require, exports) {
    // node_modules/react-flip-toolkit/lib/index.js
    function t(t2) {
      return t2 && "object" == typeof t2 && "default" in t2 ? t2.default : t2;
    }
    var e = require(74 /* rematrix */), n = (t(require(61 /* prop-types */)), require(73 /* react */)), i = t(n), r = function(t2) {
      return "number" == typeof t2;
    }, o = function(t2) {
      return "[object Object]" === Object.prototype.toString.call(t2);
    }, a = function(t2) {
      return Array.prototype.slice.apply(t2);
    };
    function s(t2) {
      for (var e2 = [], n2 = arguments.length - 1; n2-- > 0; )
        e2[n2] = arguments[n2 + 1];
      return e2.forEach(function(e3) {
        if (e3)
          for (var n3 in e3)
            Object.prototype.hasOwnProperty.call(e3, n3) && (t2[n3] = e3[n3]);
      }), t2;
    }
    var l, p = function(t2, e2, n2) {
      return t2 + (e2 - t2) * n2;
    }, c = {
      noWobble: {
        stiffness: 200,
        damping: 26
      },
      gentle: {
        stiffness: 120,
        damping: 14
      },
      veryGentle: {
        stiffness: 130,
        damping: 17
      },
      wobbly: {
        stiffness: 180,
        damping: 12
      },
      stiff: {
        stiffness: 260,
        damping: 26
      }
    }, u = function(t2) {
      return o(t2) ? t2 : Object.keys(c).indexOf(t2) > -1 ? c[t2] : {};
    };
    "undefined" != typeof window && (l = window.requestAnimationFrame);
    var f = l = l || function(t2) {
      window.setTimeout(t2, 1000 / 60);
    }, d = Date.now(), h = "object" == typeof performance && "function" == typeof performance.now ? function() {
      return performance.now();
    } : function() {
      return Date.now() - d;
    };
    function g(t2, e2) {
      var n2 = t2.indexOf(e2);
      -1 !== n2 && t2.splice(n2, 1);
    }
    var m = function() {
    };
    m.prototype.run = function() {
      var t2 = this;
      f(function() {
        t2.springSystem.loop(h());
      });
    };
    var y = function() {
      this.position = 0, this.velocity = 0;
    }, v = 0, S = function(t2) {
      this._id = "s" + v++, this._springSystem = t2, this.listeners = [], this._startValue = 0, this._currentState = new y(), this._displacementFromRestThreshold = 0.001, this._endValue = 0, this._overshootClampingEnabled = false, this._previousState = new y(), this._restSpeedThreshold = 0.001, this._tempState = new y(), this._timeAccumulator = 0, this._wasAtRest = true, this._cachedSpringConfig = {};
    };
    S.prototype.getId = function() {
      return this._id;
    }, S.prototype.destroy = function() {
      this.listeners = [], this._springSystem.deregisterSpring(this);
    }, S.prototype.setSpringConfig = function(t2) {
      return this._springConfig = t2, this;
    }, S.prototype.getCurrentValue = function() {
      return this._currentState.position;
    }, S.prototype.getDisplacementDistanceForState = function(t2) {
      return Math.abs(this._endValue - t2.position);
    }, S.prototype.setEndValue = function(t2) {
      if (t2 === this._endValue)
        return this;
      if (this.prevEndValue = t2, this._endValue === t2 && this.isAtRest())
        return this;
      this._startValue = this.getCurrentValue(), this._endValue = t2, this._springSystem.activateSpring(this.getId());
      for (var e2 = 0, n2 = this.listeners.length; e2 < n2; e2++) {
        var i2 = this.listeners[e2].onSpringEndStateChange;
        i2 && i2(this);
      }
      return this;
    }, S.prototype.setVelocity = function(t2) {
      return t2 === this._currentState.velocity ? this : (this._currentState.velocity = t2, this._springSystem.activateSpring(this.getId()), this);
    }, S.prototype.setCurrentValue = function(t2) {
      this._startValue = t2, this._currentState.position = t2;
      for (var e2 = 0, n2 = this.listeners.length; e2 < n2; e2++) {
        var i2 = this.listeners[e2];
        i2.onSpringUpdate && i2.onSpringUpdate(this);
      }
      return this;
    }, S.prototype.setAtRest = function() {
      return this._endValue = this._currentState.position, this._tempState.position = this._currentState.position, this._currentState.velocity = 0, this;
    }, S.prototype.setOvershootClampingEnabled = function(t2) {
      return this._overshootClampingEnabled = t2, this;
    }, S.prototype.isOvershooting = function() {
      var t2 = this._startValue, e2 = this._endValue;
      return this._springConfig.tension > 0 && (t2 < e2 && this.getCurrentValue() > e2 || t2 > e2 && this.getCurrentValue() < e2);
    }, S.prototype.advance = function(t2, e2) {
      var n2 = this.isAtRest();
      if (!n2 || !this._wasAtRest) {
        var i2 = e2;
        e2 > 0.064 && (i2 = 0.064), this._timeAccumulator += i2;
        for (var r2, o2, a2, s2, l2, p2, c2 = this._springConfig.tension, u2 = this._springConfig.friction, f2 = this._currentState.position, d2 = this._currentState.velocity, h2 = this._tempState.position, g2 = this._tempState.velocity; this._timeAccumulator >= 0.001; )
          this._timeAccumulator -= 0.001, this._timeAccumulator < 0.001 && (this._previousState.position = f2, this._previousState.velocity = d2), o2 = c2 * (this._endValue - h2) - u2 * d2, s2 = c2 * (this._endValue - (h2 = f2 + 0.001 * (r2 = d2) * 0.5)) - u2 * (g2 = d2 + 0.001 * o2 * 0.5), p2 = c2 * (this._endValue - (h2 = f2 + 0.001 * (a2 = g2) * 0.5)) - u2 * (g2 = d2 + 0.001 * s2 * 0.5), h2 = f2 + 0.001 * (l2 = g2), f2 += 1 / 6 * (r2 + 2 * (a2 + l2) + (g2 = d2 + 0.001 * p2)) * 0.001, d2 += 1 / 6 * (o2 + 2 * (s2 + p2) + (c2 * (this._endValue - h2) - u2 * g2)) * 0.001;
        this._tempState.position = h2, this._tempState.velocity = g2, this._currentState.position = f2, this._currentState.velocity = d2, this._timeAccumulator > 0 && this._interpolate(this._timeAccumulator / 0.001), (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) && (this._springConfig.tension > 0 ? (this._startValue = this._endValue, this._currentState.position = this._endValue) : (this._endValue = this._currentState.position, this._startValue = this._endValue), this.setVelocity(0), n2 = true);
        var m2 = false;
        this._wasAtRest && (this._wasAtRest = false, m2 = true);
        var y2 = false;
        n2 && (this._wasAtRest = true, y2 = true), this.notifyPositionUpdated(m2, y2);
      }
    }, S.prototype.notifyPositionUpdated = function(t2, e2) {
      var n2 = this;
      this.listeners.filter(Boolean).forEach(function(i2) {
        t2 && i2.onSpringActivate && !n2._onActivateCalled && (i2.onSpringActivate(n2), n2._onActivateCalled = true), i2.onSpringUpdate && i2.onSpringUpdate(n2), e2 && i2.onSpringAtRest && i2.onSpringAtRest(n2);
      });
    }, S.prototype.systemShouldAdvance = function() {
      return !this.isAtRest() || !this.wasAtRest();
    }, S.prototype.wasAtRest = function() {
      return this._wasAtRest;
    }, S.prototype.isAtRest = function() {
      return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || 0 === this._springConfig.tension);
    }, S.prototype._interpolate = function(t2) {
      this._currentState.position = this._currentState.position * t2 + this._previousState.position * (1 - t2), this._currentState.velocity = this._currentState.velocity * t2 + this._previousState.velocity * (1 - t2);
    }, S.prototype.addListener = function(t2) {
      return this.listeners.push(t2), this;
    }, S.prototype.addOneTimeListener = function(t2) {
      var e2 = this;
      return Object.keys(t2).forEach(function(n2) {
        var i2;
        t2[n2] = (i2 = t2[n2], function() {
          for (var n3 = [], r2 = arguments.length; r2--; )
            n3[r2] = arguments[r2];
          i2.apply(void 0, n3), e2.removeListener(t2);
        });
      }), this.listeners.push(t2), this;
    }, S.prototype.removeListener = function(t2) {
      return g(this.listeners, t2), this;
    };
    var _ = function(t2) {
      this.looper = t2 || new m(), this.looper.springSystem = this, this.listeners = [], this._activeSprings = [], this._idleSpringIndices = [], this._isIdle = true, this._lastTimeMillis = -1, this._springRegistry = {};
    };
    _.prototype.createSpring = function(t2, e2) {
      return this.createSpringWithConfig({
        tension: t2,
        friction: e2
      });
    }, _.prototype.createSpringWithConfig = function(t2) {
      var e2 = new S(this);
      return this.registerSpring(e2), e2.setSpringConfig(t2), e2;
    }, _.prototype.getIsIdle = function() {
      return this._isIdle;
    }, _.prototype.registerSpring = function(t2) {
      this._springRegistry[t2.getId()] = t2;
    }, _.prototype.deregisterSpring = function(t2) {
      g(this._activeSprings, t2), delete this._springRegistry[t2.getId()];
    }, _.prototype.advance = function(t2, e2) {
      for (var n2 = this; this._idleSpringIndices.length > 0; )
        this._idleSpringIndices.pop();
      for (this._activeSprings.filter(Boolean).forEach(function(i3) {
        i3.systemShouldAdvance() ? i3.advance(t2 / 1000, e2 / 1000) : n2._idleSpringIndices.push(n2._activeSprings.indexOf(i3));
      }); this._idleSpringIndices.length > 0; ) {
        var i2 = this._idleSpringIndices.pop();
        i2 >= 0 && this._activeSprings.splice(i2, 1);
      }
    }, _.prototype.loop = function(t2) {
      var e2;
      -1 === this._lastTimeMillis && (this._lastTimeMillis = t2 - 1);
      var n2 = t2 - this._lastTimeMillis;
      this._lastTimeMillis = t2;
      var i2 = 0, r2 = this.listeners.length;
      for (i2 = 0; i2 < r2; i2++)
        (e2 = this.listeners[i2]).onBeforeIntegrate && e2.onBeforeIntegrate(this);
      for (this.advance(t2, n2), 0 === this._activeSprings.length && (this._isIdle = true, this._lastTimeMillis = -1), i2 = 0; i2 < r2; i2++)
        (e2 = this.listeners[i2]).onAfterIntegrate && e2.onAfterIntegrate(this);
      this._isIdle || this.looper.run();
    }, _.prototype.activateSpring = function(t2) {
      var e2 = this._springRegistry[t2];
      -1 === this._activeSprings.indexOf(e2) && this._activeSprings.push(e2), this.getIsIdle() && (this._isIdle = false, this.looper.run());
    };
    var E = new _(), C = function(t2) {
      var e2 = t2.springConfig, n2 = e2.overshootClamping, i2 = t2.getOnUpdateFunc, r2 = t2.onAnimationEnd, o2 = t2.onSpringActivate, a2 = E.createSpring(e2.stiffness, e2.damping);
      a2.setOvershootClampingEnabled(!!n2);
      var s2 = {
        onSpringActivate: o2,
        onSpringAtRest: function() {
          a2.destroy(), r2();
        },
        onSpringUpdate: i2({
          spring: a2,
          onAnimationEnd: r2
        })
      };
      return a2.addListener(s2), a2;
    }, A = function(t2) {
      var e2 = C(t2);
      return e2.setEndValue(1), e2;
    }, b = function(t2, e2) {
      if (void 0 === e2 && (e2 = {}), t2 && t2.length) {
        e2.reverse && t2.reverse();
        var n2, i2 = "number" != typeof (n2 = e2.speed) ? 1.1 : 1 + Math.min(Math.max(5 * n2, 0), 5), r2 = 1 / Math.max(Math.min(t2.length, 100), 10), o2 = t2.map(function(t3, e3) {
          var n3 = t3.getOnUpdateFunc;
          return t3.getOnUpdateFunc = function(t4) {
            var a2 = n3(t4);
            return function(t5) {
              var n4 = t5.getCurrentValue();
              (n4 = n4 < 0.01 ? 0 : n4 > 0.99 ? 1 : n4) >= r2 && o2[e3 + 1] && o2[e3 + 1](Math.max(Math.min(n4 * i2, 1), 0)), a2(t5);
            };
          }, t3;
        }).map(function(t3) {
          var e3 = C(t3);
          if (e3)
            return e3.setEndValue.bind(e3);
        }).filter(Boolean);
        o2[0] && o2[0](1);
      }
    }, I = function(t2) {
      return [0, 1, 4, 5, 12, 13].map(function(e2) {
        return t2[e2];
      });
    }, x = function(t2) {
      return t2.top < window.innerHeight && t2.bottom > 0 && t2.left < window.innerWidth && t2.right > 0;
    }, O = function(t2, e2) {
      var n2;
      return s(t2, ((n2 = {})[e2[0]] = e2[1], n2));
    }, w = function(t2, e2) {
      return a(e2 ? document.querySelectorAll('[data-portal-key="' + e2 + '"]') : t2.querySelectorAll("[data-flip-id]"));
    }, U = function(t2) {
      return t2.map(function(t3) {
        return [t3, t3.getBoundingClientRect()];
      });
    }, V = new _(), F = n.createContext({}), P = n.createContext("portal"), M = function(t2) {
      function n2() {
        t2.apply(this, arguments), this.inProgressAnimations = {}, this.flipCallbacks = {}, this.el = void 0;
      }
      return t2 && (n2.__proto__ = t2), (n2.prototype = Object.create(t2 && t2.prototype)).constructor = n2, n2.prototype.getSnapshotBeforeUpdate = function(t3) {
        return t3.flipKey !== this.props.flipKey && this.el ? function(t4) {
          var e2 = t4.element, n3 = t4.flipCallbacks;
          void 0 === n3 && (n3 = {});
          var i2 = t4.inProgressAnimations;
          void 0 === i2 && (i2 = {});
          var r2 = w(e2, t4.portalKey), o2 = a(e2.querySelectorAll("[data-inverse-flip-id]")), l2 = {}, p2 = [], c2 = {};
          r2.filter(function(t5) {
            return n3 && n3[t5.dataset.flipId] && n3[t5.dataset.flipId].onExit;
          }).forEach(function(t5) {
            var e3 = t5.parentNode;
            if (t5.closest) {
              var n4 = t5.closest("[data-exit-container]");
              n4 && (e3 = n4);
            }
            var i3 = p2.findIndex(function(t6) {
              return t6[0] === e3;
            });
            -1 === i3 && (p2.push([e3, e3.getBoundingClientRect()]), i3 = p2.length - 1), l2[t5.dataset.flipId] = p2[i3][1], c2[t5.dataset.flipId] = e3;
          });
          var u2 = U(r2), f2 = u2.map(function(t5) {
            var e3 = t5[0], i3 = t5[1], r3 = {};
            if (n3 && n3[e3.dataset.flipId] && n3[e3.dataset.flipId].onExit) {
              var o3 = l2[e3.dataset.flipId];
              s(r3, {
                element: e3,
                parent: c2[e3.dataset.flipId],
                childPosition: {
                  top: i3.top - o3.top,
                  left: i3.left - o3.left,
                  width: i3.width,
                  height: i3.height
                }
              });
            }
            return [e3.dataset.flipId, {
              rect: i3,
              opacity: parseFloat(window.getComputedStyle(e3).opacity || "1"),
              domDataForExitAnimations: r3
            }];
          }).reduce(O, {});
          return function(t5, e3) {
            Object.keys(t5).forEach(function(e4) {
              t5[e4].destroy && t5[e4].destroy(), t5[e4].onAnimationEnd && t5[e4].onAnimationEnd(true), delete t5[e4];
            }), e3.forEach(function(t6) {
              t6.style.transform = "", t6.style.opacity = "";
            });
          }(i2, r2.concat(o2)), {
            flippedElementPositions: f2,
            cachedOrderedFlipIds: u2.map(function(t5) {
              return t5[0].dataset.flipId;
            })
          };
        }({
          element: this.el,
          flipCallbacks: this.flipCallbacks,
          inProgressAnimations: this.inProgressAnimations,
          portalKey: this.props.portalKey
        }) : null;
      }, n2.prototype.componentDidUpdate = function(t3, n3, i2) {
        this.props.flipKey !== t3.flipKey && this.el && function(t4) {
          var n4 = t4.cachedOrderedFlipIds;
          void 0 === n4 && (n4 = []);
          var i3 = t4.inProgressAnimations;
          void 0 === i3 && (i3 = {});
          var o2 = t4.flippedElementPositionsBeforeUpdate;
          void 0 === o2 && (o2 = {});
          var l2 = t4.flipCallbacks;
          void 0 === l2 && (l2 = {});
          var f2 = t4.containerEl, d2 = t4.applyTransformOrigin, h2 = t4.spring, g2 = t4.debug, m2 = t4.portalKey, y2 = t4.staggerConfig;
          void 0 === y2 && (y2 = {});
          var v2 = t4.decisionData;
          void 0 === v2 && (v2 = {});
          var S2 = t4.handleEnterUpdateDelete, _2 = t4.onComplete, E2 = t4.onStart, C2 = function(t5) {
            return U(w(t5.element, t5.portalKey)).map(function(t6) {
              var e2 = t6[0], n5 = t6[1], i4 = window.getComputedStyle(e2);
              return [e2.dataset.flipId, {
                element: e2,
                rect: n5,
                opacity: parseFloat(i4.opacity),
                transform: i4.transform
              }];
            }).reduce(O, {});
          }({
            element: f2,
            portalKey: m2
          }), V2 = function(t5) {
            var e2 = t5.containerEl, n5 = t5.portalKey;
            return n5 ? function(t6) {
              return function(e3) {
                return a(document.querySelectorAll('[data-portal-key="' + t6 + '"]' + e3));
              };
            }(n5) : e2 ? function(t6) {
              var e3 = Math.random().toFixed(5);
              return t6.dataset.flipperId = e3, function(n6) {
                return a(t6.querySelectorAll('[data-flipper-id="' + e3 + '"] ' + n6));
              };
            }(e2) : function() {
              return [];
            };
          }({
            containerEl: f2,
            portalKey: m2
          }), F2 = function(t5) {
            return function(e2) {
              return t5('[data-flip-id="' + e2 + '"]')[0];
            };
          }(V2), P2 = function(t5) {
            return o2[t5] && C2[t5];
          }, M2 = Object.keys(o2).concat(Object.keys(C2)).filter(function(t5) {
            return !P2(t5);
          }), R2 = {
            flipCallbacks: l2,
            getElement: F2,
            flippedElementPositionsBeforeUpdate: o2,
            flippedElementPositionsAfterUpdate: C2,
            inProgressAnimations: i3,
            decisionData: v2
          }, k2 = function(t5) {
            var e2, n5 = t5.unflippedIds, i4 = t5.flipCallbacks, r2 = t5.getElement, o3 = t5.flippedElementPositionsBeforeUpdate, a2 = t5.flippedElementPositionsAfterUpdate, s2 = t5.inProgressAnimations, l3 = t5.decisionData, p2 = n5.filter(function(t6) {
              return a2[t6];
            }).filter(function(t6) {
              return i4[t6] && i4[t6].onAppear;
            }), c2 = n5.filter(function(t6) {
              return o3[t6] && i4[t6] && i4[t6].onExit;
            }), u2 = new Promise(function(t6) {
              e2 = t6;
            }), f3 = [], d3 = 0, h3 = c2.map(function(t6, n6) {
              var r3 = o3[t6].domDataForExitAnimations, a3 = r3.element, p3 = r3.parent, c3 = r3.childPosition, u3 = c3.top, h4 = c3.left, g3 = c3.width, m3 = c3.height;
              "static" === getComputedStyle(p3).position && (p3.style.position = "relative"), a3.style.transform = "matrix(1, 0, 0, 1, 0, 0)", a3.style.position = "absolute", a3.style.top = u3 + "px", a3.style.left = h4 + "px", a3.style.height = m3 + "px", a3.style.width = g3 + "px";
              var y3 = f3.filter(function(t7) {
                return t7[0] === p3;
              })[0];
              y3 || (y3 = [p3, document.createDocumentFragment()], f3.push(y3)), y3[1].appendChild(a3), d3 += 1;
              var v3 = function() {
                try {
                  p3.removeChild(a3);
                } catch (t7) {
                } finally {
                  0 == (d3 -= 1) && e2();
                }
              };
              return s2[t6] = {
                stop: v3
              }, function() {
                return i4[t6].onExit(a3, n6, v3, l3);
              };
            });
            return f3.forEach(function(t6) {
              t6[0].appendChild(t6[1]);
            }), h3.length || e2(), {
              hideEnteringElements: function() {
                p2.forEach(function(t6) {
                  var e3 = r2(t6);
                  e3 && (e3.style.opacity = "0");
                });
              },
              animateEnteringElements: function() {
                p2.forEach(function(t6, e3) {
                  var n6 = r2(t6);
                  n6 && i4[t6].onAppear(n6, e3, l3);
                });
              },
              animateExitingElements: function() {
                return h3.forEach(function(t6) {
                  return t6();
                }), u2;
              }
            };
          }(s({}, R2, {
            unflippedIds: M2
          })), j2 = k2.hideEnteringElements, D = k2.animateEnteringElements, T = k2.animateExitingElements, K = s({}, R2, {
            containerEl: f2,
            flippedIds: n4.filter(P2),
            applyTransformOrigin: d2,
            spring: h2,
            debug: g2,
            staggerConfig: y2,
            scopedSelector: V2,
            onComplete: _2
          });
          E2 && E2(f2, v2);
          var B = function(t5) {
            var n5 = K.flippedIds, i4 = K.flipCallbacks, o3 = K.inProgressAnimations, l3 = K.flippedElementPositionsBeforeUpdate, f3 = K.flippedElementPositionsAfterUpdate, d3 = K.applyTransformOrigin, h3 = K.spring, g3 = K.getElement, m3 = K.debug, y3 = K.staggerConfig;
            void 0 === y3 && (y3 = {});
            var v3 = K.decisionData;
            void 0 === v3 && (v3 = {});
            var S3, _3 = K.onComplete, E3 = K.containerEl, C3 = new Promise(function(t6) {
              S3 = t6;
            });
            if (_3 && C3.then(function() {
              return _3(E3, v3);
            }), !n5.length)
              return function() {
                return S3([]), C3;
              };
            var O2, w2 = [], U2 = g3(n5[0]), V3 = U2 ? U2.ownerDocument.querySelector("body") : document.querySelector("body");
            O2 = n5.reduce(function(t6, e2) {
              return t6[e2] = (t6[e2] || 0) + 1, t6;
            }, {}), Object.keys(O2).filter(function(t6) {
              return O2[t6] > 1;
            });
            var F3 = n5.map(function(t6) {
              var n6 = l3[t6].rect, g4 = f3[t6].rect, m4 = l3[t6].opacity, y4 = f3[t6].opacity, _4 = g4.width < 1 || g4.height < 1, E4 = f3[t6].element;
              if (!x(n6) && !x(g4))
                return false;
              if (!E4)
                return false;
              var C4 = JSON.parse(E4.dataset.flipConfig), A2 = function(t7) {
                void 0 === t7 && (t7 = {});
                var e2 = t7.flippedSpring;
                return s({}, c.noWobble, u(t7.flipperSpring), u(e2));
              }({
                flipperSpring: h3,
                flippedSpring: C4.spring
              }), b2 = true === C4.stagger ? "default" : C4.stagger, O3 = {
                element: E4,
                id: t6,
                stagger: b2,
                springConfig: A2
              };
              if (i4[t6] && i4[t6].shouldFlip && !i4[t6].shouldFlip(v3.previous, v3.current))
                return false;
              var U3 = Math.abs(n6.left - g4.left) + Math.abs(n6.top - g4.top), P4 = Math.abs(n6.width - g4.width) + Math.abs(n6.height - g4.height), M4 = Math.abs(y4 - m4);
              if (U3 < 0.5 && P4 < 0.5 && M4 < 0.01)
                return false;
              var R4 = e.parse(f3[t6].transform), k4 = {
                matrix: R4
              }, j4 = {
                matrix: []
              }, D3 = [R4];
              C4.translate && (D3.push(e.translateX(n6.left - g4.left)), D3.push(e.translateY(n6.top - g4.top))), C4.scale && (D3.push(e.scaleX(Math.max(n6.width, 1) / Math.max(g4.width, 1))), D3.push(e.scaleY(Math.max(n6.height, 1) / Math.max(g4.height, 1)))), C4.opacity && (j4.opacity = m4, k4.opacity = y4);
              var T2 = [];
              if (!i4[t6] || !i4[t6].shouldInvert || i4[t6].shouldInvert(v3.previous, v3.current)) {
                var K2 = function(t7, e2) {
                  return a(t7.querySelectorAll('[data-inverse-flip-id="' + e2 + '"]'));
                }(E4, t6);
                T2 = K2.map(function(t7) {
                  return [t7, JSON.parse(t7.dataset.flipConfig)];
                });
              }
              j4.matrix = I(D3.reduce(e.multiply)), k4.matrix = I(k4.matrix);
              var B2, q = function(t7) {
                var e2 = t7.element, n7 = t7.invertedChildren, i5 = t7.body;
                return function(t8) {
                  var o4 = t8.matrix, a2 = t8.opacity, s2 = t8.forceMinVals;
                  if (r(a2) && (e2.style.opacity = a2 + ""), s2 && (e2.style.minHeight = "1px", e2.style.minWidth = "1px"), o4) {
                    var l4 = function(t9) {
                      return "matrix(" + t9.join(", ") + ")";
                    }(o4);
                    e2.style.transform = l4, n7 && function(t9) {
                      var e3 = t9.matrix, n8 = t9.body;
                      t9.invertedChildren.forEach(function(t10) {
                        var i6 = t10[0], r2 = t10[1];
                        if (n8.contains(i6)) {
                          var o5 = e3[0], a3 = e3[3], s3 = e3[5], l5 = {
                            translateX: 0,
                            translateY: 0,
                            scaleX: 1,
                            scaleY: 1
                          }, p2 = "";
                          r2.translate && (l5.translateX = -e3[4] / o5, l5.translateY = -s3 / a3, p2 += "translate(" + l5.translateX + "px, " + l5.translateY + "px)"), r2.scale && (l5.scaleX = 1 / o5, l5.scaleY = 1 / a3, p2 += " scale(" + l5.scaleX + ", " + l5.scaleY + ")"), i6.style.transform = p2;
                        }
                      });
                    }({
                      invertedChildren: n7,
                      matrix: o4,
                      body: i5
                    });
                  }
                };
              }({
                element: E4,
                invertedChildren: T2,
                body: V3
              });
              if (i4[t6] && i4[t6].onComplete) {
                var W = i4[t6].onComplete;
                B2 = function() {
                  return W(E4, v3);
                };
              }
              var X = r(j4.opacity) && r(k4.opacity) && j4.opacity !== k4.opacity, Y = false;
              return s({}, O3, {
                stagger: b2,
                springConfig: A2,
                getOnUpdateFunc: function(e2) {
                  var n7 = e2.spring, r2 = e2.onAnimationEnd;
                  return o3[t6] = {
                    destroy: n7.destroy.bind(n7),
                    onAnimationEnd: r2
                  }, function(e3) {
                    i4[t6] && i4[t6].onSpringUpdate && i4[t6].onSpringUpdate(e3.getCurrentValue()), Y || (Y = true, i4[t6] && i4[t6].onStart && i4[t6].onStart(E4, v3));
                    var n8 = e3.getCurrentValue();
                    if (V3.contains(E4)) {
                      var r3 = {
                        matrix: []
                      };
                      r3.matrix = j4.matrix.map(function(t7, e4) {
                        return p(t7, k4.matrix[e4], n8);
                      }), X && (r3.opacity = p(j4.opacity, k4.opacity, n8)), q(r3);
                    } else
                      e3.destroy();
                  };
                },
                initializeFlip: function() {
                  q({
                    matrix: j4.matrix,
                    opacity: X ? j4.opacity : void 0,
                    forceMinVals: _4
                  }), i4[t6] && i4[t6].onStartImmediate && i4[t6].onStartImmediate(E4, v3), C4.transformOrigin ? E4.style.transformOrigin = C4.transformOrigin : d3 && (E4.style.transformOrigin = "0 0"), T2.forEach(function(t7) {
                    var e2 = t7[0], n7 = t7[1];
                    n7.transformOrigin ? e2.style.transformOrigin = n7.transformOrigin : d3 && (e2.style.transformOrigin = "0 0");
                  });
                },
                onAnimationEnd: function(e2) {
                  delete o3[t6], "function" == typeof B2 && B2(), E4.style.transform = "", T2.forEach(function(t7) {
                    t7[0].style.transform = "";
                  }), _4 && E4 && (E4.style.minHeight = "", E4.style.minWidth = ""), e2 || (w2.push(t6), w2.length >= F3.length && S3(w2));
                },
                delayUntil: C4.delayUntil
              });
            }).filter(Boolean);
            if (F3.forEach(function(t6) {
              return (0, t6.initializeFlip)();
            }), m3)
              return function() {
              };
            var P3 = F3.filter(function(t6) {
              return t6.delayUntil && (e2 = t6.delayUntil, F3.filter(function(t7) {
                return t7.id === e2;
              }).length);
              var e2;
            }), M3 = {}, R3 = {}, k3 = {};
            P3.forEach(function(t6) {
              t6.stagger ? (k3[t6.stagger] = true, R3[t6.delayUntil] ? R3[t6.delayUntil].push(t6.stagger) : R3[t6.delayUntil] = [t6.stagger]) : M3[t6.delayUntil] ? M3[t6.delayUntil].push(t6) : M3[t6.delayUntil] = [t6];
            });
            var j3 = F3.filter(function(t6) {
              return t6.stagger;
            }).reduce(function(t6, e2) {
              return t6[e2.stagger] ? t6[e2.stagger].push(e2) : t6[e2.stagger] = [e2], t6;
            }, {}), D2 = F3.filter(function(t6) {
              return -1 === P3.indexOf(t6);
            });
            return D2.forEach(function(t6) {
              t6.onSpringActivate = function() {
                M3[t6.id] && M3[t6.id].forEach(A), R3[t6.id] && Object.keys(R3[t6.id].reduce(function(t7, e2) {
                  var n6;
                  return s(t7, ((n6 = {})[e2] = true, n6));
                }, {})).forEach(function(t7) {
                  b(j3[t7], y3[t7]);
                });
              };
            }), function() {
              return F3.length || S3([]), D2.filter(function(t6) {
                return !t6.stagger;
              }).forEach(A), Object.keys(j3).forEach(function(t6) {
                k3[t6] || b(j3[t6], y3[t6]);
              }), C3;
            };
          }();
          S2 ? S2({
            hideEnteringElements: j2,
            animateEnteringElements: D,
            animateExitingElements: T,
            animateFlippedElements: B
          }) : (j2(), T().then(D), B());
        }({
          flippedElementPositionsBeforeUpdate: i2.flippedElementPositions,
          cachedOrderedFlipIds: i2.cachedOrderedFlipIds,
          containerEl: this.el,
          inProgressAnimations: this.inProgressAnimations,
          flipCallbacks: this.flipCallbacks,
          applyTransformOrigin: this.props.applyTransformOrigin,
          spring: this.props.spring,
          debug: this.props.debug,
          portalKey: this.props.portalKey,
          staggerConfig: this.props.staggerConfig,
          handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,
          decisionData: {
            previous: t3.decisionData,
            current: this.props.decisionData
          },
          onComplete: this.props.onComplete,
          onStart: this.props.onStart
        });
      }, n2.prototype.render = function() {
        var t3 = this, e2 = this.props, n3 = e2.portalKey, r2 = i.createElement(F.Provider, {
          value: this.flipCallbacks
        }, i.createElement(e2.element, {
          className: e2.className,
          ref: function(e3) {
            return t3.el = e3;
          }
        }, this.props.children));
        return n3 && (r2 = i.createElement(P.Provider, {
          value: n3
        }, r2)), r2;
      }, n2;
    }(n.Component);
    function R(t2, e2) {
      var n2 = {};
      for (var i2 in t2)
        Object.prototype.hasOwnProperty.call(t2, i2) && -1 === e2.indexOf(i2) && (n2[i2] = t2[i2]);
      return n2;
    }
    M.defaultProps = {
      applyTransformOrigin: true,
      element: "div"
    };
    var k = function(t2) {
      var e2 = t2.children, i2 = t2.flipId, r2 = t2.inverseFlipId, o2 = t2.portalKey, a2 = R(t2, ["children", "flipId", "inverseFlipId", "portalKey"]), l2 = e2, p2 = function(t3) {
        return "function" == typeof t3;
      }(l2);
      if (!p2)
        try {
          l2 = n.Children.only(e2);
        } catch (t3) {
          throw new Error("Each Flipped component must wrap a single child");
        }
      a2.scale || a2.translate || a2.opacity || s(a2, {
        translate: true,
        scale: true,
        opacity: true
      });
      var c2 = {};
      return c2["data-flip-config"] = JSON.stringify(a2), i2 ? c2["data-flip-id"] = String(i2) : r2 && (c2["data-inverse-flip-id"] = String(r2)), o2 && (c2["data-portal-key"] = o2), p2 ? l2(c2) : n.cloneElement(l2, c2);
    }, j = function(t2) {
      var e2 = t2.children, n2 = t2.flipId, r2 = t2.shouldFlip, a2 = t2.shouldInvert, s2 = t2.onAppear, l2 = t2.onStart, p2 = t2.onStartImmediate, c2 = t2.onComplete, u2 = t2.onExit, f2 = t2.onSpringUpdate, d2 = R(t2, ["children", "flipId", "shouldFlip", "shouldInvert", "onAppear", "onStart", "onStartImmediate", "onComplete", "onExit", "onSpringUpdate"]);
      return e2 ? d2.inverseFlipId ? i.createElement(k, Object.assign({}, d2), e2) : i.createElement(P.Consumer, null, function(t3) {
        return i.createElement(F.Consumer, null, function(h2) {
          return o(h2) && n2 && (h2[n2] = {
            shouldFlip: r2,
            shouldInvert: a2,
            onAppear: s2,
            onStart: l2,
            onStartImmediate: p2,
            onComplete: c2,
            onExit: u2,
            onSpringUpdate: f2
          }), i.createElement(k, Object.assign({
            flipId: n2
          }, d2, {
            portalKey: t3
          }), e2);
        });
      }) : null;
    };
    j.displayName = "Flipped", exports.Flipper = M, exports.Flipped = j, exports.ExitContainer = function(t2) {
      var e2;
      return n.cloneElement(t2.children, ((e2 = {})["data-exit-container"] = true, e2));
    }, exports.spring = function(t2) {
      var e2 = t2.values, n2 = t2.onUpdate, i2 = t2.delay;
      void 0 === i2 && (i2 = 0);
      var r2 = t2.onComplete, o2 = s({}, c.noWobble, u(t2.config)), a2 = o2.overshootClamping, l2 = V.createSpring(o2.stiffness, o2.damping);
      return l2.setOvershootClampingEnabled(!!a2), l2.addListener({
        onSpringAtRest: function(t3) {
          r2 && r2(), t3.destroy();
        },
        onSpringUpdate: function(t3) {
          var i3 = t3.getCurrentValue();
          if (!e2)
            return n2(i3);
          var r3 = Object.keys(e2).map(function(t4) {
            return [t4, p(e2[t4][0], e2[t4][1], i3)];
          }).reduce(function(t4, e3) {
            var n3;
            return Object.assign(t4, ((n3 = {})[e3[0]] = e3[1], n3));
          }, {});
          n2(r3);
        }
      }), i2 ? setTimeout(function() {
        l2.setEndValue(1);
      }, i2) : l2.setEndValue(1), l2;
    };
  },

  38(require, exports, module) {
    // node_modules/fast-memoize/src/index.js
    function memoize(fn, options) {
      var cache = options && options.cache ? options.cache : cacheDefault;
      var serializer = options && options.serializer ? options.serializer : serializerDefault;
      var strategy = options && options.strategy ? options.strategy : strategyDefault;
      return strategy(fn, {
        cache,
        serializer
      });
    }
    function isPrimitive(value) {
      return value == null || typeof value === "number" || typeof value === "boolean";
    }
    function monadic(fn, cache, serializer, arg) {
      var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === "undefined") {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
      }
      return computedValue;
    }
    function variadic(fn, cache, serializer) {
      var args = Array.prototype.slice.call(arguments, 3);
      var cacheKey = serializer(args);
      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === "undefined") {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
      }
      return computedValue;
    }
    function assemble(fn, context, strategy, cache, serialize) {
      return strategy.bind(context, fn, cache, serialize);
    }
    function strategyDefault(fn, options) {
      var strategy = fn.length === 1 ? monadic : variadic;
      return assemble(fn, this, strategy, options.cache.create(), options.serializer);
    }
    function strategyVariadic(fn, options) {
      var strategy = variadic;
      return assemble(fn, this, strategy, options.cache.create(), options.serializer);
    }
    function strategyMonadic(fn, options) {
      var strategy = monadic;
      return assemble(fn, this, strategy, options.cache.create(), options.serializer);
    }
    function serializerDefault() {
      return JSON.stringify(arguments);
    }
    function ObjectWithoutPrototypeCache() {
      this.cache = Object.create(null);
    }
    ObjectWithoutPrototypeCache.prototype.has = function(key) {
      return key in this.cache;
    };
    ObjectWithoutPrototypeCache.prototype.get = function(key) {
      return this.cache[key];
    };
    ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
      this.cache[key] = value;
    };
    var cacheDefault = {
      create: function create() {
        return new ObjectWithoutPrototypeCache();
      }
    };
    module.exports = memoize;
    module.exports.strategies = {
      variadic: strategyVariadic,
      monadic: strategyMonadic
    };
  },

  63(require, exports) {
    // node_modules/re-resizable/lib/index.es5.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require(73 /* react */);
    var memoize = _interopDefault(require(38 /* fast-memoize */));
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var styles = {
      top: {
        width: "100%",
        height: "10px",
        top: "-5px",
        left: "0px",
        cursor: "row-resize"
      },
      right: {
        width: "10px",
        height: "100%",
        top: "0px",
        right: "-5px",
        cursor: "col-resize"
      },
      bottom: {
        width: "100%",
        height: "10px",
        bottom: "-5px",
        left: "0px",
        cursor: "row-resize"
      },
      left: {
        width: "10px",
        height: "100%",
        top: "0px",
        left: "-5px",
        cursor: "col-resize"
      },
      topRight: {
        width: "20px",
        height: "20px",
        position: "absolute",
        right: "-10px",
        top: "-10px",
        cursor: "ne-resize"
      },
      bottomRight: {
        width: "20px",
        height: "20px",
        position: "absolute",
        right: "-10px",
        bottom: "-10px",
        cursor: "se-resize"
      },
      bottomLeft: {
        width: "20px",
        height: "20px",
        position: "absolute",
        left: "-10px",
        bottom: "-10px",
        cursor: "sw-resize"
      },
      topLeft: {
        width: "20px",
        height: "20px",
        position: "absolute",
        left: "-10px",
        top: "-10px",
        cursor: "nw-resize"
      }
    };
    var Resizer = function(_super) {
      __extends(Resizer2, _super);
      function Resizer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onMouseDown = function(e) {
          _this.props.onResizeStart(e, _this.props.direction);
        };
        _this.onTouchStart = function(e) {
          _this.props.onResizeStart(e, _this.props.direction);
        };
        return _this;
      }
      Resizer2.prototype.render = function() {
        return React.createElement("div", {
          className: this.props.className || "",
          style: __assign(__assign({
            position: "absolute",
            userSelect: "none"
          }, styles[this.props.direction]), this.props.replaceStyles || {}),
          onMouseDown: this.onMouseDown,
          onTouchStart: this.onTouchStart
        }, this.props.children);
      };
      return Resizer2;
    }(React.PureComponent);
    var DEFAULT_SIZE = {
      width: "auto",
      height: "auto"
    };
    var clamp = memoize(function(n, min, max) {
      return Math.max(Math.min(n, max), min);
    });
    var snap = memoize(function(n, size) {
      return Math.round(n / size) * size;
    });
    var hasDirection = memoize(function(dir, target) {
      return new RegExp(dir, "i").test(target);
    });
    var findClosestSnap = memoize(function(n, snapArray, snapGap) {
      if (snapGap === void 0) {
        snapGap = 0;
      }
      var closestGapIndex = snapArray.reduce(function(prev, curr, index) {
        return Math.abs(curr - n) < Math.abs(snapArray[prev] - n) ? index : prev;
      }, 0);
      var gap = Math.abs(snapArray[closestGapIndex] - n);
      return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;
    });
    var endsWith = memoize(function(str, searchStr) {
      return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
    });
    var getStringSize = memoize(function(n) {
      n = n.toString();
      if (n === "auto") {
        return n;
      }
      if (endsWith(n, "px")) {
        return n;
      }
      if (endsWith(n, "%")) {
        return n;
      }
      if (endsWith(n, "vh")) {
        return n;
      }
      if (endsWith(n, "vw")) {
        return n;
      }
      if (endsWith(n, "vmax")) {
        return n;
      }
      if (endsWith(n, "vmin")) {
        return n;
      }
      return n + "px";
    });
    var getPixelSize = function(size, parentSize, innerWidth, innerHeight) {
      if (size && typeof size === "string") {
        if (endsWith(size, "%")) {
          var ratio = Number(size.replace("%", "")) / 100;
          return parentSize * ratio;
        } else if (endsWith(size, "vw")) {
          var ratio = Number(size.replace("vw", "")) / 100;
          return innerWidth * ratio;
        } else if (endsWith(size, "vh")) {
          var ratio = Number(size.replace("vh", "")) / 100;
          return innerHeight * ratio;
        }
      }
      return size;
    };
    var calculateNewMax = memoize(function(parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {
      maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);
      maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);
      minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);
      minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);
      return {
        maxWidth: typeof maxWidth === "undefined" ? void 0 : Number(maxWidth),
        maxHeight: typeof maxHeight === "undefined" ? void 0 : Number(maxHeight),
        minWidth: typeof minWidth === "undefined" ? void 0 : Number(minWidth),
        minHeight: typeof minHeight === "undefined" ? void 0 : Number(minHeight)
      };
    });
    var definedProps = ["as", "style", "className", "grid", "snap", "bounds", "size", "defaultSize", "minWidth", "minHeight", "maxWidth", "maxHeight", "lockAspectRatio", "lockAspectRatioExtraWidth", "lockAspectRatioExtraHeight", "enable", "handleStyles", "handleClasses", "handleWrapperStyle", "handleWrapperClass", "children", "onResizeStart", "onResize", "onResizeStop", "handleComponent", "scale", "resizeRatio", "snapGap"];
    var baseClassName = "__resizable_base__";
    var Resizable = function(_super) {
      __extends(Resizable2, _super);
      function Resizable2(props) {
        var _this = _super.call(this, props) || this;
        _this.ratio = 1;
        _this.resizable = null;
        _this.parentLeft = 0;
        _this.parentTop = 0;
        _this.resizableLeft = 0;
        _this.resizableTop = 0;
        _this.targetLeft = 0;
        _this.targetTop = 0;
        _this.ref = function(c) {
          if (c) {
            _this.resizable = c;
          }
        };
        _this.state = {
          isResizing: false,
          width: typeof (_this.propsSize && _this.propsSize.width) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.width,
          height: typeof (_this.propsSize && _this.propsSize.height) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.height,
          direction: "right",
          original: {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          },
          backgroundStyle: {
            height: "100%",
            width: "100%",
            backgroundColor: "rgba(0,0,0,0)",
            cursor: "auto",
            opacity: 0,
            position: "fixed",
            zIndex: 9999,
            top: "0",
            left: "0",
            bottom: "0",
            right: "0"
          },
          flexBasis: void 0
        };
        _this.onResizeStart = _this.onResizeStart.bind(_this);
        _this.onMouseMove = _this.onMouseMove.bind(_this);
        _this.onMouseUp = _this.onMouseUp.bind(_this);
        return _this;
      }
      Object.defineProperty(Resizable2.prototype, "parentNode", {
        get: function() {
          if (!this.resizable) {
            return null;
          }
          return this.resizable.parentNode;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "window", {
        get: function() {
          if (!this.resizable) {
            return null;
          }
          if (!this.resizable.ownerDocument) {
            return null;
          }
          return this.resizable.ownerDocument.defaultView;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "propsSize", {
        get: function() {
          return this.props.size || this.props.defaultSize || DEFAULT_SIZE;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "base", {
        get: function() {
          var parent = this.parentNode;
          if (!parent) {
            return void 0;
          }
          var children = [].slice.call(parent.children);
          for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var n = children_1[_i];
            if (n.classList.contains(baseClassName)) {
              return n;
            }
          }
          return void 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "size", {
        get: function() {
          var width = 0;
          var height = 0;
          if (this.resizable && this.window) {
            var orgWidth = this.resizable.offsetWidth;
            var orgHeight = this.resizable.offsetHeight;
            var orgPosition = this.resizable.style.position;
            if (orgPosition !== "relative") {
              this.resizable.style.position = "relative";
            }
            width = this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
            height = this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
            this.resizable.style.position = orgPosition;
          }
          return {
            width,
            height
          };
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "sizeStyle", {
        get: function() {
          var _this = this;
          var size = this.props.size;
          var getSize = function(key) {
            if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto") {
              return "auto";
            }
            if (_this.propsSize && _this.propsSize[key] && endsWith(_this.propsSize[key].toString(), "%")) {
              if (endsWith(_this.state[key].toString(), "%")) {
                return _this.state[key].toString();
              }
              var parentSize = _this.getParentSize();
              var value = Number(_this.state[key].toString().replace("px", ""));
              var percent = value / parentSize[key] * 100;
              return percent + "%";
            }
            return getStringSize(_this.state[key]);
          };
          var width = size && typeof size.width !== "undefined" && !this.state.isResizing ? getStringSize(size.width) : getSize("width");
          var height = size && typeof size.height !== "undefined" && !this.state.isResizing ? getStringSize(size.height) : getSize("height");
          return {
            width,
            height
          };
        },
        enumerable: true,
        configurable: true
      });
      Resizable2.prototype.getParentSize = function() {
        if (!this.base || !this.parentNode) {
          if (!this.window) {
            return {
              width: 0,
              height: 0
            };
          }
          return {
            width: this.window.innerWidth,
            height: this.window.innerHeight
          };
        }
        var wrapChanged = false;
        var wrap = this.parentNode.style.flexWrap;
        var minWidth = this.base.style.minWidth;
        if (wrap !== "wrap") {
          wrapChanged = true;
          this.parentNode.style.flexWrap = "wrap";
        }
        this.base.style.position = "relative";
        this.base.style.minWidth = "100%";
        var size = {
          width: this.base.offsetWidth,
          height: this.base.offsetHeight
        };
        this.base.style.position = "absolute";
        if (wrapChanged) {
          this.parentNode.style.flexWrap = wrap;
        }
        this.base.style.minWidth = minWidth;
        return size;
      };
      Resizable2.prototype.bindEvents = function() {
        if (this.window) {
          this.window.addEventListener("mouseup", this.onMouseUp);
          this.window.addEventListener("mousemove", this.onMouseMove);
          this.window.addEventListener("mouseleave", this.onMouseUp);
          this.window.addEventListener("touchmove", this.onMouseMove);
          this.window.addEventListener("touchend", this.onMouseUp);
        }
      };
      Resizable2.prototype.unbindEvents = function() {
        if (this.window) {
          this.window.removeEventListener("mouseup", this.onMouseUp);
          this.window.removeEventListener("mousemove", this.onMouseMove);
          this.window.removeEventListener("mouseleave", this.onMouseUp);
          this.window.removeEventListener("touchmove", this.onMouseMove);
          this.window.removeEventListener("touchend", this.onMouseUp);
        }
      };
      Resizable2.prototype.componentDidMount = function() {
        if (!this.resizable || !this.window) {
          return;
        }
        var computedStyle = this.window.getComputedStyle(this.resizable);
        this.setState({
          width: this.state.width || this.size.width,
          height: this.state.height || this.size.height,
          flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : void 0
        });
        var parent = this.parentNode;
        if (!parent) {
          return;
        }
        if (this.base) {
          return;
        }
        var element = this.window.document.createElement("div");
        element.style.width = "100%";
        element.style.height = "100%";
        element.style.position = "absolute";
        element.style.transform = "scale(0, 0)";
        element.style.left = "0";
        element.style.flex = "0";
        if (element.classList) {
          element.classList.add(baseClassName);
        } else {
          element.className += baseClassName;
        }
        parent.appendChild(element);
      };
      Resizable2.prototype.componentWillUnmount = function() {
        if (this.window) {
          this.unbindEvents();
          var parent_1 = this.parentNode;
          if (!this.base || !parent_1) {
            return;
          }
          if (!parent_1 || !this.base) {
            return;
          }
          parent_1.removeChild(this.base);
        }
      };
      Resizable2.prototype.createSizeForCssProperty = function(newSize, kind) {
        var propsSize = this.propsSize && this.propsSize[kind];
        return this.state[kind] === "auto" && this.state.original[kind] === newSize && (typeof propsSize === "undefined" || propsSize === "auto") ? "auto" : newSize;
      };
      Resizable2.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {
        if (this.props.bounds === "parent") {
          var parent_2 = this.parentNode;
          if (parent_2) {
            var boundWidth = parent_2.offsetWidth + (this.parentLeft - this.resizableLeft);
            var boundHeight = parent_2.offsetHeight + (this.parentTop - this.resizableTop);
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
          }
        } else if (this.props.bounds === "window") {
          if (this.window) {
            var boundWidth = this.window.innerWidth - this.resizableLeft;
            var boundHeight = this.window.innerHeight - this.resizableTop;
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
          }
        } else if (this.props.bounds) {
          var boundWidth = this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
          var boundHeight = this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
          maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
          maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
        }
        return {
          maxWidth,
          maxHeight
        };
      };
      Resizable2.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {
        var scale = this.props.scale || 1;
        var resizeRatio = this.props.resizeRatio || 1;
        var _a = this.state, direction = _a.direction, original = _a.original;
        var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
        var newWidth = original.width;
        var newHeight = original.height;
        var extraHeight = lockAspectRatioExtraHeight || 0;
        var extraWidth = lockAspectRatioExtraWidth || 0;
        if (hasDirection("right", direction)) {
          newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
          if (lockAspectRatio) {
            newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
          }
        }
        if (hasDirection("left", direction)) {
          newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
          if (lockAspectRatio) {
            newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
          }
        }
        if (hasDirection("bottom", direction)) {
          newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
          if (lockAspectRatio) {
            newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
          }
        }
        if (hasDirection("top", direction)) {
          newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
          if (lockAspectRatio) {
            newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
          }
        }
        return {
          newWidth,
          newHeight
        };
      };
      Resizable2.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max, min) {
        var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
        var computedMinWidth = typeof min.width === "undefined" ? 10 : min.width;
        var computedMaxWidth = typeof max.width === "undefined" || max.width < 0 ? newWidth : max.width;
        var computedMinHeight = typeof min.height === "undefined" ? 10 : min.height;
        var computedMaxHeight = typeof max.height === "undefined" || max.height < 0 ? newHeight : max.height;
        var extraHeight = lockAspectRatioExtraHeight || 0;
        var extraWidth = lockAspectRatioExtraWidth || 0;
        if (lockAspectRatio) {
          var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
          var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
          var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
          var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
          var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
          var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
          var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
          var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
          newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
          newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
        } else {
          newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
          newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
        }
        return {
          newWidth,
          newHeight
        };
      };
      Resizable2.prototype.setBoundingClientRect = function() {
        if (this.props.bounds === "parent") {
          var parent_3 = this.parentNode;
          if (parent_3) {
            var parentRect = parent_3.getBoundingClientRect();
            this.parentLeft = parentRect.left;
            this.parentTop = parentRect.top;
          }
        }
        if (this.props.bounds && typeof this.props.bounds !== "string") {
          var targetRect = this.props.bounds.getBoundingClientRect();
          this.targetLeft = targetRect.left;
          this.targetTop = targetRect.top;
        }
        if (this.resizable) {
          var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top;
          this.resizableLeft = left;
          this.resizableTop = top_1;
        }
      };
      Resizable2.prototype.onResizeStart = function(event, direction) {
        if (!this.resizable || !this.window) {
          return;
        }
        var clientX = 0;
        var clientY = 0;
        if (event.nativeEvent instanceof this.window.MouseEvent) {
          clientX = event.nativeEvent.clientX;
          clientY = event.nativeEvent.clientY;
          if (event.nativeEvent.which === 3) {
            return;
          }
        } else if (event.nativeEvent instanceof this.window.TouchEvent) {
          clientX = event.nativeEvent.touches[0].clientX;
          clientY = event.nativeEvent.touches[0].clientY;
        }
        if (this.props.onResizeStart) {
          if (this.resizable) {
            var startResize = this.props.onResizeStart(event, direction, this.resizable);
            if (startResize === false) {
              return;
            }
          }
        }
        if (this.props.size) {
          if (typeof this.props.size.height !== "undefined" && this.props.size.height !== this.state.height) {
            this.setState({
              height: this.props.size.height
            });
          }
          if (typeof this.props.size.width !== "undefined" && this.props.size.width !== this.state.width) {
            this.setState({
              width: this.props.size.width
            });
          }
        }
        this.ratio = typeof this.props.lockAspectRatio === "number" ? this.props.lockAspectRatio : this.size.width / this.size.height;
        var flexBasis;
        var computedStyle = this.window.getComputedStyle(this.resizable);
        if (computedStyle.flexBasis !== "auto") {
          var parent_4 = this.parentNode;
          if (parent_4) {
            var dir = this.window.getComputedStyle(parent_4).flexDirection;
            this.flexDir = dir.startsWith("row") ? "row" : "column";
            flexBasis = computedStyle.flexBasis;
          }
        }
        this.setBoundingClientRect();
        this.bindEvents();
        var state = {
          original: {
            x: clientX,
            y: clientY,
            width: this.size.width,
            height: this.size.height
          },
          isResizing: true,
          backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {
            cursor: this.window.getComputedStyle(event.target).cursor || "auto"
          }),
          direction,
          flexBasis
        };
        this.setState(state);
      };
      Resizable2.prototype.onMouseMove = function(event) {
        if (!this.state.isResizing || !this.resizable || !this.window) {
          return;
        }
        var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
        var clientX = event instanceof this.window.MouseEvent ? event.clientX : event.touches[0].clientX;
        var clientY = event instanceof this.window.MouseEvent ? event.clientY : event.touches[0].clientY;
        var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
        var parentSize = this.getParentSize();
        var max = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
        maxWidth = max.maxWidth;
        maxHeight = max.maxHeight;
        minWidth = max.minWidth;
        minHeight = max.minHeight;
        var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
        var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
        var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, {
          width: boundaryMax.maxWidth,
          height: boundaryMax.maxHeight
        }, {
          width: minWidth,
          height: minHeight
        });
        newWidth = newSize.newWidth;
        newHeight = newSize.newHeight;
        if (this.props.grid) {
          var newGridWidth = snap(newWidth, this.props.grid[0]);
          var newGridHeight = snap(newHeight, this.props.grid[1]);
          var gap = this.props.snapGap || 0;
          newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
          newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
        }
        if (this.props.snap && this.props.snap.x) {
          newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
        }
        if (this.props.snap && this.props.snap.y) {
          newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
        }
        var delta = {
          width: newWidth - original.width,
          height: newHeight - original.height
        };
        if (width && typeof width === "string") {
          if (endsWith(width, "%")) {
            var percent = newWidth / parentSize.width * 100;
            newWidth = percent + "%";
          } else if (endsWith(width, "vw")) {
            var vw = newWidth / this.window.innerWidth * 100;
            newWidth = vw + "vw";
          } else if (endsWith(width, "vh")) {
            var vh = newWidth / this.window.innerHeight * 100;
            newWidth = vh + "vh";
          }
        }
        if (height && typeof height === "string") {
          if (endsWith(height, "%")) {
            var percent = newHeight / parentSize.height * 100;
            newHeight = percent + "%";
          } else if (endsWith(height, "vw")) {
            var vw = newHeight / this.window.innerWidth * 100;
            newHeight = vw + "vw";
          } else if (endsWith(height, "vh")) {
            var vh = newHeight / this.window.innerHeight * 100;
            newHeight = vh + "vh";
          }
        }
        var newState = {
          width: this.createSizeForCssProperty(newWidth, "width"),
          height: this.createSizeForCssProperty(newHeight, "height")
        };
        if (this.flexDir === "row") {
          newState.flexBasis = newState.width;
        } else if (this.flexDir === "column") {
          newState.flexBasis = newState.height;
        }
        this.setState(newState);
        if (this.props.onResize) {
          this.props.onResize(event, direction, this.resizable, delta);
        }
      };
      Resizable2.prototype.onMouseUp = function(event) {
        var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;
        if (!isResizing || !this.resizable) {
          return;
        }
        var delta = {
          width: this.size.width - original.width,
          height: this.size.height - original.height
        };
        if (this.props.onResizeStop) {
          this.props.onResizeStop(event, direction, this.resizable, delta);
        }
        if (this.props.size) {
          this.setState(this.props.size);
        }
        this.unbindEvents();
        this.setState({
          isResizing: false,
          backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {
            cursor: "auto"
          })
        });
      };
      Resizable2.prototype.updateSize = function(size) {
        this.setState({
          width: size.width,
          height: size.height
        });
      };
      Resizable2.prototype.renderResizer = function() {
        var _this = this;
        var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
        if (!enable) {
          return null;
        }
        var resizers = Object.keys(enable).map(function(dir) {
          if (enable[dir] !== false) {
            return React.createElement(Resizer, {
              key: dir,
              direction: dir,
              onResizeStart: _this.onResizeStart,
              replaceStyles: handleStyles && handleStyles[dir],
              className: handleClasses && handleClasses[dir]
            }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);
          }
          return null;
        });
        return React.createElement("span", {
          className: handleWrapperClass,
          style: handleWrapperStyle
        }, resizers);
      };
      Resizable2.prototype.render = function() {
        var _this = this;
        var extendsProps = Object.keys(this.props).reduce(function(acc, key) {
          if (definedProps.indexOf(key) !== -1) {
            return acc;
          }
          acc[key] = _this.props[key];
          return acc;
        }, {});
        var style = __assign(__assign(__assign({
          position: "relative",
          userSelect: this.state.isResizing ? "none" : "auto"
        }, this.props.style), this.sizeStyle), {
          maxWidth: this.props.maxWidth,
          maxHeight: this.props.maxHeight,
          minWidth: this.props.minWidth,
          minHeight: this.props.minHeight,
          boxSizing: "border-box",
          flexShrink: 0
        });
        if (this.state.flexBasis) {
          style.flexBasis = this.state.flexBasis;
        }
        var Wrapper = this.props.as;
        return React.createElement(Wrapper, __assign({
          ref: this.ref,
          style,
          className: this.props.className
        }, extendsProps), this.state.isResizing && React.createElement("div", {
          style: this.state.backgroundStyle
        }), this.props.children, this.renderResizer());
      };
      Resizable2.defaultProps = {
        as: "div",
        onResizeStart: function() {
        },
        onResize: function() {
        },
        onResizeStop: function() {
        },
        enable: {
          top: true,
          right: true,
          bottom: true,
          left: true,
          topRight: true,
          bottomRight: true,
          bottomLeft: true,
          topLeft: true
        },
        style: {},
        grid: [1, 1],
        lockAspectRatio: false,
        lockAspectRatioExtraWidth: 0,
        lockAspectRatioExtraHeight: 0,
        scale: 1,
        resizeRatio: 1,
        snapGap: 0
      };
      return Resizable2;
    }(React.PureComponent);
    exports.Resizable = Resizable;
  },

  71(require, exports, module) {
    // node_modules/react-rnd/node_modules/react-draggable/build/web/react-draggable.min.js
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module ? module.exports = e(require(73 /* react */), require(65 /* react-dom */)) : "function" == typeof define && define.amd ? define(["react", "react-dom"], e) : "object" == typeof exports ? exports.ReactDraggable = e(require(73 /* react */), require(65 /* react-dom */)) : t.ReactDraggable = e(t.React, t.ReactDOM);
    }(window, function(t, e) {
      return function(t2) {
        var e2 = {};
        function n(r) {
          if (e2[r])
            return e2[r].exports;
          var o = e2[r] = {
            i: r,
            l: false,
            exports: {}
          };
          return t2[r].call(o.exports, o, o.exports, n), o.l = true, o.exports;
        }
        return n.m = t2, n.c = e2, n.d = function(t3, e3, r) {
          n.o(t3, e3) || Object.defineProperty(t3, e3, {
            enumerable: true,
            get: r
          });
        }, n.r = function(t3) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, {
            value: "Module"
          }), Object.defineProperty(t3, "__esModule", {
            value: true
          });
        }, n.t = function(t3, e3) {
          if (1 & e3 && (t3 = n(t3)), 8 & e3)
            return t3;
          if (4 & e3 && "object" == typeof t3 && t3 && t3.__esModule)
            return t3;
          var r = Object.create(null);
          if (n.r(r), Object.defineProperty(r, "default", {
            enumerable: true,
            value: t3
          }), 2 & e3 && "string" != typeof t3)
            for (var o in t3)
              n.d(r, o, function(e4) {
                return t3[e4];
              }.bind(null, o));
          return r;
        }, n.n = function(t3) {
          var e3 = t3 && t3.__esModule ? function() {
            return t3.default;
          } : function() {
            return t3;
          };
          return n.d(e3, "a", e3), e3;
        }, n.o = function(t3, e3) {
          return Object.prototype.hasOwnProperty.call(t3, e3);
        }, n.p = "", n(n.s = 4);
      }([function(t2, e2, n) {
        t2.exports = n(5)();
      }, function(e2, n) {
        e2.exports = t;
      }, function(t2, n) {
        t2.exports = e;
      }, function(t2, e2, n) {
        var r;
        !function() {
          "use strict";
          var n2 = {}.hasOwnProperty;
          function o() {
            for (var t3 = [], e3 = 0; e3 < arguments.length; e3++) {
              var r2 = arguments[e3];
              if (r2) {
                var a = typeof r2;
                if ("string" === a || "number" === a)
                  t3.push(r2);
                else if (Array.isArray(r2) && r2.length) {
                  var i = o.apply(null, r2);
                  i && t3.push(i);
                } else if ("object" === a)
                  for (var s in r2)
                    n2.call(r2, s) && r2[s] && t3.push(s);
              }
            }
            return t3.join(" ");
          }
          t2.exports ? (o.default = o, t2.exports = o) : void 0 === (r = function() {
            return o;
          }.apply(e2, [])) || (t2.exports = r);
        }();
      }, function(t2, e2, n) {
        var r = n(7), o = r.default, a = r.DraggableCore;
        t2.exports = o, t2.exports.default = o, t2.exports.DraggableCore = a;
      }, function(t2, e2, n) {
        "use strict";
        var r = n(6);
        function o() {
        }
        function a() {
        }
        a.resetWarningCache = o, t2.exports = function() {
          function t3(t4, e4, n3, o2, a2, i) {
            if (i !== r) {
              var s = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
              throw s.name = "Invariant Violation", s;
            }
          }
          function e3() {
            return t3;
          }
          t3.isRequired = t3;
          var n2 = {
            array: t3,
            bool: t3,
            func: t3,
            number: t3,
            object: t3,
            string: t3,
            symbol: t3,
            any: t3,
            arrayOf: e3,
            element: t3,
            elementType: t3,
            instanceOf: e3,
            node: t3,
            objectOf: e3,
            oneOf: e3,
            oneOfType: e3,
            shape: e3,
            exact: e3,
            checkPropTypes: a,
            resetWarningCache: o
          };
          return n2.PropTypes = n2, n2;
        };
      }, function(t2, e2, n) {
        "use strict";
        t2.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      }, function(t2, e2, n) {
        "use strict";
        n.r(e2);
        var r = n(1), o = n.n(r), a = n(0), i = n.n(a), s = n(2), u = n.n(s), c = n(3), l = n.n(c);
        function f(t3, e3) {
          for (var n2 = 0, r2 = t3.length; n2 < r2; n2++)
            if (e3.apply(e3, [t3[n2], n2, t3]))
              return t3[n2];
        }
        function p(t3) {
          return "function" == typeof t3 || "[object Function]" === Object.prototype.toString.call(t3);
        }
        function d(t3) {
          return "number" == typeof t3 && !isNaN(t3);
        }
        function g(t3) {
          return parseInt(t3, 10);
        }
        function y(t3, e3, n2) {
          if (t3[e3])
            return new Error("Invalid prop ".concat(e3, " passed to ").concat(n2, " - do not set this, set it on the child."));
        }
        var h = ["Moz", "Webkit", "O", "ms"];
        function b(t3, e3) {
          return e3 ? "".concat(e3).concat(function(t4) {
            for (var e4 = "", n2 = true, r2 = 0; r2 < t4.length; r2++)
              n2 ? (e4 += t4[r2].toUpperCase(), n2 = false) : "-" === t4[r2] ? n2 = true : e4 += t4[r2];
            return e4;
          }(t3)) : t3;
        }
        var m = function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "transform";
          if ("undefined" == typeof window || void 0 === window.document)
            return "";
          var e3 = window.document.documentElement.style;
          if (t3 in e3)
            return "";
          for (var n2 = 0; n2 < h.length; n2++)
            if (b(t3, h[n2]) in e3)
              return h[n2];
          return "";
        }();
        function v(t3, e3) {
          var n2 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var r2 = Object.getOwnPropertySymbols(t3);
            e3 && (r2 = r2.filter(function(e4) {
              return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
            })), n2.push.apply(n2, r2);
          }
          return n2;
        }
        function w(t3, e3, n2) {
          return e3 in t3 ? Object.defineProperty(t3, e3, {
            value: n2,
            enumerable: true,
            configurable: true,
            writable: true
          }) : t3[e3] = n2, t3;
        }
        var O = "";
        function S(t3, e3) {
          return O || (O = f(["matches", "webkitMatchesSelector", "mozMatchesSelector", "msMatchesSelector", "oMatchesSelector"], function(e4) {
            return p(t3[e4]);
          })), !!p(t3[O]) && t3[O](e3);
        }
        function D(t3, e3, n2) {
          var r2 = t3;
          do {
            if (S(r2, e3))
              return true;
            if (r2 === n2)
              return false;
            r2 = r2.parentNode;
          } while (r2);
          return false;
        }
        function x(t3, e3, n2) {
          t3 && (t3.attachEvent ? t3.attachEvent("on" + e3, n2) : t3.addEventListener ? t3.addEventListener(e3, n2, true) : t3["on" + e3] = n2);
        }
        function P(t3, e3, n2) {
          t3 && (t3.detachEvent ? t3.detachEvent("on" + e3, n2) : t3.removeEventListener ? t3.removeEventListener(e3, n2, true) : t3["on" + e3] = null);
        }
        function j(t3) {
          var e3 = t3.clientHeight, n2 = t3.ownerDocument.defaultView.getComputedStyle(t3);
          return e3 += g(n2.borderTopWidth), e3 += g(n2.borderBottomWidth);
        }
        function E(t3) {
          var e3 = t3.clientWidth, n2 = t3.ownerDocument.defaultView.getComputedStyle(t3);
          return e3 += g(n2.borderLeftWidth), e3 += g(n2.borderRightWidth);
        }
        function T(t3) {
          var e3 = t3.clientHeight, n2 = t3.ownerDocument.defaultView.getComputedStyle(t3);
          return e3 -= g(n2.paddingTop), e3 -= g(n2.paddingBottom);
        }
        function N(t3) {
          var e3 = t3.clientWidth, n2 = t3.ownerDocument.defaultView.getComputedStyle(t3);
          return e3 -= g(n2.paddingLeft), e3 -= g(n2.paddingRight);
        }
        function C(t3, e3, n2) {
          var r2 = t3.x, o2 = t3.y, a2 = "translate(".concat(r2).concat(n2, ",").concat(o2).concat(n2, ")");
          if (e3) {
            var i2 = "".concat("string" == typeof e3.x ? e3.x : e3.x + n2), s2 = "".concat("string" == typeof e3.y ? e3.y : e3.y + n2);
            a2 = "translate(".concat(i2, ", ").concat(s2, ")") + a2;
          }
          return a2;
        }
        function M(t3) {
          if (t3) {
            var e3, n2, r2 = t3.getElementById("react-draggable-style-el");
            r2 || ((r2 = t3.createElement("style")).type = "text/css", r2.id = "react-draggable-style-el", r2.innerHTML = ".react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n", r2.innerHTML += ".react-draggable-transparent-selection *::selection {all: inherit;}\n", t3.getElementsByTagName("head")[0].appendChild(r2)), t3.body && (e3 = t3.body, n2 = "react-draggable-transparent-selection", e3.classList ? e3.classList.add(n2) : e3.className.match(new RegExp("(?:^|\\s)".concat(n2, "(?!\\S)"))) || (e3.className += " ".concat(n2)));
          }
        }
        function k(t3) {
          try {
            t3 && t3.body && (e3 = t3.body, n2 = "react-draggable-transparent-selection", e3.classList ? e3.classList.remove(n2) : e3.className = e3.className.replace(new RegExp("(?:^|\\s)".concat(n2, "(?!\\S)"), "g"), "")), t3.selection ? t3.selection.empty() : window.getSelection().removeAllRanges();
          } catch (t4) {
          }
          var e3, n2;
        }
        function _() {
          return function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var n2 = null != arguments[e3] ? arguments[e3] : {};
              e3 % 2 ? v(n2, true).forEach(function(e4) {
                w(t3, e4, n2[e4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(n2)) : v(n2).forEach(function(e4) {
                Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(n2, e4));
              });
            }
            return t3;
          }({
            touchAction: "none"
          }, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {});
        }
        function X(t3) {
          return "both" === t3.props.axis || "x" === t3.props.axis;
        }
        function Y(t3) {
          return "both" === t3.props.axis || "y" === t3.props.axis;
        }
        function L(t3, e3, n2) {
          var r2 = "number" == typeof e3 ? function(t4, e4) {
            return t4.targetTouches && f(t4.targetTouches, function(t5) {
              return e4 === t5.identifier;
            }) || t4.changedTouches && f(t4.changedTouches, function(t5) {
              return e4 === t5.identifier;
            });
          }(t3, e3) : null;
          if ("number" == typeof e3 && !r2)
            return null;
          var o2 = I(n2);
          return function(t4, e4, n3) {
            var r3 = e4 === e4.ownerDocument.body ? {
              left: 0,
              top: 0
            } : e4.getBoundingClientRect();
            return {
              x: (t4.clientX + e4.scrollLeft - r3.left) / n3,
              y: (t4.clientY + e4.scrollTop - r3.top) / n3
            };
          }(r2 || t3, n2.props.offsetParent || o2.offsetParent || o2.ownerDocument.body, n2.props.scale);
        }
        function R(t3, e3, n2) {
          var r2 = t3.state, o2 = !d(r2.lastX), a2 = I(t3);
          return o2 ? {
            node: a2,
            deltaX: 0,
            deltaY: 0,
            lastX: e3,
            lastY: n2,
            x: e3,
            y: n2
          } : {
            node: a2,
            deltaX: e3 - r2.lastX,
            deltaY: n2 - r2.lastY,
            lastX: r2.lastX,
            lastY: r2.lastY,
            x: e3,
            y: n2
          };
        }
        function A(t3, e3) {
          var n2 = t3.props.scale;
          return {
            node: e3.node,
            x: t3.state.x + e3.deltaX / n2,
            y: t3.state.y + e3.deltaY / n2,
            deltaX: e3.deltaX / n2,
            deltaY: e3.deltaY / n2,
            lastX: t3.state.x,
            lastY: t3.state.y
          };
        }
        function I(t3) {
          var e3 = u.a.findDOMNode(t3);
          if (!e3)
            throw new Error("<DraggableCore>: Unmounted during event!");
          return e3;
        }
        function U(t3) {
          return (U = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          })(t3);
        }
        function V(t3, e3) {
          return function(t4) {
            if (Array.isArray(t4))
              return t4;
          }(t3) || function(t4, e4) {
            var n2 = [], r2 = true, o2 = false, a2 = void 0;
            try {
              for (var i2, s2 = t4[Symbol.iterator](); !(r2 = (i2 = s2.next()).done) && (n2.push(i2.value), !e4 || n2.length !== e4); r2 = true)
                ;
            } catch (t5) {
              o2 = true, a2 = t5;
            } finally {
              try {
                r2 || null == s2.return || s2.return();
              } finally {
                if (o2)
                  throw a2;
              }
            }
            return n2;
          }(t3, e3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        function W(t3, e3) {
          for (var n2 = 0; n2 < e3.length; n2++) {
            var r2 = e3[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(t3, r2.key, r2);
          }
        }
        function B(t3) {
          return (B = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          })(t3);
        }
        function H(t3) {
          if (void 0 === t3)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t3;
        }
        function q(t3, e3) {
          return (q = Object.setPrototypeOf || function(t4, e4) {
            return t4.__proto__ = e4, t4;
          })(t3, e3);
        }
        function G(t3, e3, n2) {
          return e3 in t3 ? Object.defineProperty(t3, e3, {
            value: n2,
            enumerable: true,
            configurable: true,
            writable: true
          }) : t3[e3] = n2, t3;
        }
        var z = {
          touch: {
            start: "touchstart",
            move: "touchmove",
            stop: "touchend"
          },
          mouse: {
            start: "mousedown",
            move: "mousemove",
            stop: "mouseup"
          }
        }, F = z.mouse, J = function(t3) {
          function e3() {
            var t4, n3, r3, o2;
            !function(t5, e4) {
              if (!(t5 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, e3);
            for (var a3 = arguments.length, i2 = new Array(a3), s2 = 0; s2 < a3; s2++)
              i2[s2] = arguments[s2];
            return r3 = this, o2 = (t4 = B(e3)).call.apply(t4, [this].concat(i2)), n3 = !o2 || "object" !== U(o2) && "function" != typeof o2 ? H(r3) : o2, G(H(n3), "state", {
              dragging: false,
              lastX: NaN,
              lastY: NaN,
              touchIdentifier: null
            }), G(H(n3), "handleDragStart", function(t5) {
              if (n3.props.onMouseDown(t5), !n3.props.allowAnyClick && "number" == typeof t5.button && 0 !== t5.button)
                return false;
              var e4 = u.a.findDOMNode(H(n3));
              if (!e4 || !e4.ownerDocument || !e4.ownerDocument.body)
                throw new Error("<DraggableCore> not mounted on DragStart!");
              var r4 = e4.ownerDocument;
              if (!(n3.props.disabled || !(t5.target instanceof r4.defaultView.Node) || n3.props.handle && !D(t5.target, n3.props.handle, e4) || n3.props.cancel && D(t5.target, n3.props.cancel, e4))) {
                var o3 = function(t6) {
                  return t6.targetTouches && t6.targetTouches[0] ? t6.targetTouches[0].identifier : t6.changedTouches && t6.changedTouches[0] ? t6.changedTouches[0].identifier : void 0;
                }(t5);
                n3.setState({
                  touchIdentifier: o3
                });
                var a4 = L(t5, o3, H(n3));
                if (null != a4) {
                  var i3 = a4.x, s3 = a4.y, c2 = R(H(n3), i3, s3);
                  n3.props.onStart, false !== n3.props.onStart(t5, c2) && (n3.props.enableUserSelectHack && M(r4), n3.setState({
                    dragging: true,
                    lastX: i3,
                    lastY: s3
                  }), x(r4, F.move, n3.handleDrag), x(r4, F.stop, n3.handleDragStop));
                }
              }
            }), G(H(n3), "handleDrag", function(t5) {
              "touchmove" === t5.type && t5.preventDefault();
              var e4 = L(t5, n3.state.touchIdentifier, H(n3));
              if (null != e4) {
                var r4, o3, a4, i3 = e4.x, s3 = e4.y;
                if (Array.isArray(n3.props.grid)) {
                  var u2 = i3 - n3.state.lastX, c2 = s3 - n3.state.lastY, l2 = V((r4 = n3.props.grid, o3 = u2, a4 = c2, [Math.round(o3 / r4[0]) * r4[0], Math.round(a4 / r4[1]) * r4[1]]), 2);
                  if (u2 = l2[0], c2 = l2[1], !u2 && !c2)
                    return;
                  i3 = n3.state.lastX + u2, s3 = n3.state.lastY + c2;
                }
                var f2 = R(H(n3), i3, s3);
                if (false !== n3.props.onDrag(t5, f2))
                  n3.setState({
                    lastX: i3,
                    lastY: s3
                  });
                else
                  try {
                    n3.handleDragStop(new MouseEvent("mouseup"));
                  } catch (t6) {
                    var p2 = document.createEvent("MouseEvents");
                    p2.initMouseEvent("mouseup", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null), n3.handleDragStop(p2);
                  }
              }
            }), G(H(n3), "handleDragStop", function(t5) {
              if (n3.state.dragging) {
                var e4 = L(t5, n3.state.touchIdentifier, H(n3));
                if (null != e4) {
                  var r4 = e4.x, o3 = e4.y, a4 = R(H(n3), r4, o3), i3 = u.a.findDOMNode(H(n3));
                  i3 && n3.props.enableUserSelectHack && k(i3.ownerDocument), n3.setState({
                    dragging: false,
                    lastX: NaN,
                    lastY: NaN
                  }), n3.props.onStop(t5, a4), i3 && (P(i3.ownerDocument, F.move, n3.handleDrag), P(i3.ownerDocument, F.stop, n3.handleDragStop));
                }
              }
            }), G(H(n3), "onMouseDown", function(t5) {
              return F = z.mouse, n3.handleDragStart(t5);
            }), G(H(n3), "onMouseUp", function(t5) {
              return F = z.mouse, n3.handleDragStop(t5);
            }), G(H(n3), "onTouchStart", function(t5) {
              return F = z.touch, n3.handleDragStart(t5);
            }), G(H(n3), "onTouchEnd", function(t5) {
              return F = z.touch, n3.handleDragStop(t5);
            }), n3;
          }
          var n2, r2, a2;
          return function(t4, e4) {
            if ("function" != typeof e4 && null !== e4)
              throw new TypeError("Super expression must either be null or a function");
            t4.prototype = Object.create(e4 && e4.prototype, {
              constructor: {
                value: t4,
                writable: true,
                configurable: true
              }
            }), e4 && q(t4, e4);
          }(e3, o.a.Component), n2 = e3, (r2 = [{
            key: "componentWillUnmount",
            value: function() {
              var t4 = u.a.findDOMNode(this);
              if (t4) {
                var e4 = t4.ownerDocument;
                P(e4, z.mouse.move, this.handleDrag), P(e4, z.touch.move, this.handleDrag), P(e4, z.mouse.stop, this.handleDragStop), P(e4, z.touch.stop, this.handleDragStop), this.props.enableUserSelectHack && k(e4);
              }
            }
          }, {
            key: "render",
            value: function() {
              return o.a.cloneElement(o.a.Children.only(this.props.children), {
                style: _(this.props.children.props.style),
                onMouseDown: this.onMouseDown,
                onTouchStart: this.onTouchStart,
                onMouseUp: this.onMouseUp,
                onTouchEnd: this.onTouchEnd
              });
            }
          }]) && W(n2.prototype, r2), a2 && W(n2, a2), e3;
        }();
        function K(t3) {
          return (K = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          })(t3);
        }
        function Q() {
          return (Q = Object.assign || function(t3) {
            for (var e3 = 1; e3 < arguments.length; e3++) {
              var n2 = arguments[e3];
              for (var r2 in n2)
                Object.prototype.hasOwnProperty.call(n2, r2) && (t3[r2] = n2[r2]);
            }
            return t3;
          }).apply(this, arguments);
        }
        function Z(t3, e3) {
          if (null == t3)
            return {};
          var n2, r2, o2 = function(t4, e4) {
            if (null == t4)
              return {};
            var n3, r3, o3 = {}, a3 = Object.keys(t4);
            for (r3 = 0; r3 < a3.length; r3++)
              n3 = a3[r3], e4.indexOf(n3) >= 0 || (o3[n3] = t4[n3]);
            return o3;
          }(t3, e3);
          if (Object.getOwnPropertySymbols) {
            var a2 = Object.getOwnPropertySymbols(t3);
            for (r2 = 0; r2 < a2.length; r2++)
              n2 = a2[r2], e3.indexOf(n2) >= 0 || Object.prototype.propertyIsEnumerable.call(t3, n2) && (o2[n2] = t3[n2]);
          }
          return o2;
        }
        function $(t3, e3) {
          return function(t4) {
            if (Array.isArray(t4))
              return t4;
          }(t3) || function(t4, e4) {
            var n2 = [], r2 = true, o2 = false, a2 = void 0;
            try {
              for (var i2, s2 = t4[Symbol.iterator](); !(r2 = (i2 = s2.next()).done) && (n2.push(i2.value), !e4 || n2.length !== e4); r2 = true)
                ;
            } catch (t5) {
              o2 = true, a2 = t5;
            } finally {
              try {
                r2 || null == s2.return || s2.return();
              } finally {
                if (o2)
                  throw a2;
              }
            }
            return n2;
          }(t3, e3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        function tt(t3, e3) {
          var n2 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var r2 = Object.getOwnPropertySymbols(t3);
            e3 && (r2 = r2.filter(function(e4) {
              return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
            })), n2.push.apply(n2, r2);
          }
          return n2;
        }
        function et(t3) {
          for (var e3 = 1; e3 < arguments.length; e3++) {
            var n2 = null != arguments[e3] ? arguments[e3] : {};
            e3 % 2 ? tt(n2, true).forEach(function(e4) {
              st(t3, e4, n2[e4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(n2)) : tt(n2).forEach(function(e4) {
              Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(n2, e4));
            });
          }
          return t3;
        }
        function nt(t3) {
          return (nt = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          })(t3);
        }
        function rt(t3) {
          if (void 0 === t3)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t3;
        }
        function ot(t3, e3) {
          for (var n2 = 0; n2 < e3.length; n2++) {
            var r2 = e3[n2];
            r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(t3, r2.key, r2);
          }
        }
        function at(t3, e3, n2) {
          return e3 && ot(t3.prototype, e3), n2 && ot(t3, n2), t3;
        }
        function it(t3, e3) {
          return (it = Object.setPrototypeOf || function(t4, e4) {
            return t4.__proto__ = e4, t4;
          })(t3, e3);
        }
        function st(t3, e3, n2) {
          return e3 in t3 ? Object.defineProperty(t3, e3, {
            value: n2,
            enumerable: true,
            configurable: true,
            writable: true
          }) : t3[e3] = n2, t3;
        }
        G(J, "displayName", "DraggableCore"), G(J, "propTypes", {
          allowAnyClick: i.a.bool,
          disabled: i.a.bool,
          enableUserSelectHack: i.a.bool,
          offsetParent: function(t3, e3) {
            if (t3[e3] && 1 !== t3[e3].nodeType)
              throw new Error("Draggable's offsetParent must be a DOM Node.");
          },
          grid: i.a.arrayOf(i.a.number),
          handle: i.a.string,
          cancel: i.a.string,
          onStart: i.a.func,
          onDrag: i.a.func,
          onStop: i.a.func,
          onMouseDown: i.a.func,
          scale: i.a.number,
          className: y,
          style: y,
          transform: y
        }), G(J, "defaultProps", {
          allowAnyClick: false,
          cancel: null,
          disabled: false,
          enableUserSelectHack: true,
          offsetParent: null,
          handle: null,
          grid: null,
          transform: null,
          onStart: function() {
          },
          onDrag: function() {
          },
          onStop: function() {
          },
          onMouseDown: function() {
          },
          scale: 1
        }), n.d(e2, "default", function() {
          return ut;
        }), n.d(e2, "DraggableCore", function() {
          return J;
        });
        var ut = function(t3) {
          function e3(t4) {
            var n2, r2, o2;
            return function(t5, e4) {
              if (!(t5 instanceof e4))
                throw new TypeError("Cannot call a class as a function");
            }(this, e3), r2 = this, o2 = nt(e3).call(this, t4), n2 = !o2 || "object" !== K(o2) && "function" != typeof o2 ? rt(r2) : o2, st(rt(n2), "onDragStart", function(t5, e4) {
              if (false === n2.props.onStart(t5, A(rt(n2), e4)))
                return false;
              n2.setState({
                dragging: true,
                dragged: true
              });
            }), st(rt(n2), "onDrag", function(t5, e4) {
              if (!n2.state.dragging)
                return false;
              var r3 = A(rt(n2), e4), o3 = {
                x: r3.x,
                y: r3.y
              };
              if (n2.props.bounds) {
                var a2 = o3.x, i2 = o3.y;
                o3.x += n2.state.slackX, o3.y += n2.state.slackY;
                var s2 = $(function(t6, e5, n3) {
                  if (!t6.props.bounds)
                    return [e5, n3];
                  var r4 = t6.props.bounds;
                  r4 = "string" == typeof r4 ? r4 : function(t7) {
                    return {
                      left: t7.left,
                      top: t7.top,
                      right: t7.right,
                      bottom: t7.bottom
                    };
                  }(r4);
                  var o4 = I(t6);
                  if ("string" == typeof r4) {
                    var a3, i3 = o4.ownerDocument, s3 = i3.defaultView;
                    if (!((a3 = "parent" === r4 ? o4.parentNode : i3.querySelector(r4)) instanceof s3.HTMLElement))
                      throw new Error('Bounds selector "' + r4 + '" could not find an element.');
                    var u3 = s3.getComputedStyle(o4), c3 = s3.getComputedStyle(a3);
                    r4 = {
                      left: -o4.offsetLeft + g(c3.paddingLeft) + g(u3.marginLeft),
                      top: -o4.offsetTop + g(c3.paddingTop) + g(u3.marginTop),
                      right: N(a3) - E(o4) - o4.offsetLeft + g(c3.paddingRight) - g(u3.marginRight),
                      bottom: T(a3) - j(o4) - o4.offsetTop + g(c3.paddingBottom) - g(u3.marginBottom)
                    };
                  }
                  return d(r4.right) && (e5 = Math.min(e5, r4.right)), d(r4.bottom) && (n3 = Math.min(n3, r4.bottom)), d(r4.left) && (e5 = Math.max(e5, r4.left)), d(r4.top) && (n3 = Math.max(n3, r4.top)), [e5, n3];
                }(rt(n2), o3.x, o3.y), 2), u2 = s2[0], c2 = s2[1];
                o3.x = u2, o3.y = c2, o3.slackX = n2.state.slackX + (a2 - o3.x), o3.slackY = n2.state.slackY + (i2 - o3.y), r3.x = o3.x, r3.y = o3.y, r3.deltaX = o3.x - n2.state.x, r3.deltaY = o3.y - n2.state.y;
              }
              if (false === n2.props.onDrag(t5, r3))
                return false;
              n2.setState(o3);
            }), st(rt(n2), "onDragStop", function(t5, e4) {
              if (!n2.state.dragging)
                return false;
              if (false === n2.props.onStop(t5, A(rt(n2), e4)))
                return false;
              var r3 = {
                dragging: false,
                slackX: 0,
                slackY: 0
              };
              if (Boolean(n2.props.position)) {
                var o3 = n2.props.position, a2 = o3.x, i2 = o3.y;
                r3.x = a2, r3.y = i2;
              }
              n2.setState(r3);
            }), n2.state = {
              dragging: false,
              dragged: false,
              x: t4.position ? t4.position.x : t4.defaultPosition.x,
              y: t4.position ? t4.position.y : t4.defaultPosition.y,
              prevPropsPosition: et({}, t4.position),
              slackX: 0,
              slackY: 0,
              isElementSVG: false
            }, !t4.position || t4.onDrag || t4.onStop || console.warn("A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element."), n2;
          }
          return function(t4, e4) {
            if ("function" != typeof e4 && null !== e4)
              throw new TypeError("Super expression must either be null or a function");
            t4.prototype = Object.create(e4 && e4.prototype, {
              constructor: {
                value: t4,
                writable: true,
                configurable: true
              }
            }), e4 && it(t4, e4);
          }(e3, o.a.Component), at(e3, null, [{
            key: "getDerivedStateFromProps",
            value: function(t4, e4) {
              var n2 = t4.position, r2 = e4.prevPropsPosition;
              return !n2 || r2 && n2.x === r2.x && n2.y === r2.y ? null : {
                x: n2.x,
                y: n2.y,
                prevPropsPosition: et({}, n2)
              };
            }
          }]), at(e3, [{
            key: "componentDidMount",
            value: function() {
              void 0 !== window.SVGElement && u.a.findDOMNode(this) instanceof window.SVGElement && this.setState({
                isElementSVG: true
              });
            }
          }, {
            key: "componentWillUnmount",
            value: function() {
              this.setState({
                dragging: false
              });
            }
          }, {
            key: "render",
            value: function() {
              var t4, e4 = this.props, n2 = (e4.axis, e4.bounds, e4.children), r2 = e4.defaultPosition, a2 = e4.defaultClassName, i2 = e4.defaultClassNameDragging, s2 = e4.defaultClassNameDragged, u2 = e4.position, c2 = e4.positionOffset, f2 = (e4.scale, Z(e4, ["axis", "bounds", "children", "defaultPosition", "defaultClassName", "defaultClassNameDragging", "defaultClassNameDragged", "position", "positionOffset", "scale"])), p2 = {}, d2 = null, g2 = !Boolean(u2) || this.state.dragging, y2 = u2 || r2, h2 = {
                x: X(this) && g2 ? this.state.x : y2.x,
                y: Y(this) && g2 ? this.state.y : y2.y
              };
              this.state.isElementSVG ? d2 = function(t5, e5) {
                return C(t5, e5, "");
              }(h2, c2) : p2 = function(t5, e5) {
                var n3 = C(t5, e5, "px");
                return w({}, b("transform", m), n3);
              }(h2, c2);
              var v2 = l()(n2.props.className || "", a2, (st(t4 = {}, i2, this.state.dragging), st(t4, s2, this.state.dragged), t4));
              return o.a.createElement(J, Q({}, f2, {
                onStart: this.onDragStart,
                onDrag: this.onDrag,
                onStop: this.onDragStop
              }), o.a.cloneElement(o.a.Children.only(n2), {
                className: v2,
                style: et({}, n2.props.style, {}, p2),
                transform: d2
              }));
            }
          }]), e3;
        }();
        st(ut, "displayName", "Draggable"), st(ut, "propTypes", et({}, J.propTypes, {
          axis: i.a.oneOf(["both", "x", "y", "none"]),
          bounds: i.a.oneOfType([i.a.shape({
            left: i.a.number,
            right: i.a.number,
            top: i.a.number,
            bottom: i.a.number
          }), i.a.string, i.a.oneOf([false])]),
          defaultClassName: i.a.string,
          defaultClassNameDragging: i.a.string,
          defaultClassNameDragged: i.a.string,
          defaultPosition: i.a.shape({
            x: i.a.number,
            y: i.a.number
          }),
          positionOffset: i.a.shape({
            x: i.a.oneOfType([i.a.number, i.a.string]),
            y: i.a.oneOfType([i.a.number, i.a.string])
          }),
          position: i.a.shape({
            x: i.a.number,
            y: i.a.number
          }),
          className: y,
          style: y,
          transform: y
        })), st(ut, "defaultProps", et({}, J.defaultProps, {
          axis: "both",
          bounds: false,
          defaultClassName: "react-draggable",
          defaultClassNameDragging: "react-draggable-dragging",
          defaultClassNameDragged: "react-draggable-dragged",
          defaultPosition: {
            x: 0,
            y: 0
          },
          position: null,
          scale: 1
        }));
      }]);
    });
  },

  70(require, exports) {
    // node_modules/react-rnd/node_modules/re-resizable/lib/index.es5.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require(73 /* react */);
    var memoize = _interopDefault(require(38 /* fast-memoize */));
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var styles = {
      top: {
        width: "100%",
        height: "10px",
        top: "-5px",
        left: "0px",
        cursor: "row-resize"
      },
      right: {
        width: "10px",
        height: "100%",
        top: "0px",
        right: "-5px",
        cursor: "col-resize"
      },
      bottom: {
        width: "100%",
        height: "10px",
        bottom: "-5px",
        left: "0px",
        cursor: "row-resize"
      },
      left: {
        width: "10px",
        height: "100%",
        top: "0px",
        left: "-5px",
        cursor: "col-resize"
      },
      topRight: {
        width: "20px",
        height: "20px",
        position: "absolute",
        right: "-10px",
        top: "-10px",
        cursor: "ne-resize"
      },
      bottomRight: {
        width: "20px",
        height: "20px",
        position: "absolute",
        right: "-10px",
        bottom: "-10px",
        cursor: "se-resize"
      },
      bottomLeft: {
        width: "20px",
        height: "20px",
        position: "absolute",
        left: "-10px",
        bottom: "-10px",
        cursor: "sw-resize"
      },
      topLeft: {
        width: "20px",
        height: "20px",
        position: "absolute",
        left: "-10px",
        top: "-10px",
        cursor: "nw-resize"
      }
    };
    var Resizer = function(_super) {
      __extends(Resizer2, _super);
      function Resizer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onMouseDown = function(e) {
          _this.props.onResizeStart(e, _this.props.direction);
        };
        _this.onTouchStart = function(e) {
          _this.props.onResizeStart(e, _this.props.direction);
        };
        return _this;
      }
      Resizer2.prototype.render = function() {
        return React.createElement("div", {
          className: this.props.className || "",
          style: __assign(__assign({
            position: "absolute",
            userSelect: "none"
          }, styles[this.props.direction]), this.props.replaceStyles || {}),
          onMouseDown: this.onMouseDown,
          onTouchStart: this.onTouchStart
        }, this.props.children);
      };
      return Resizer2;
    }(React.PureComponent);
    var DEFAULT_SIZE = {
      width: "auto",
      height: "auto"
    };
    var clamp = memoize(function(n, min, max) {
      return Math.max(Math.min(n, max), min);
    });
    var snap = memoize(function(n, size) {
      return Math.round(n / size) * size;
    });
    var hasDirection = memoize(function(dir, target) {
      return new RegExp(dir, "i").test(target);
    });
    var findClosestSnap = memoize(function(n, snapArray, snapGap) {
      if (snapGap === void 0) {
        snapGap = 0;
      }
      var closestGapIndex = snapArray.reduce(function(prev, curr, index) {
        return Math.abs(curr - n) < Math.abs(snapArray[prev] - n) ? index : prev;
      }, 0);
      var gap = Math.abs(snapArray[closestGapIndex] - n);
      return snapGap === 0 || gap < snapGap ? snapArray[closestGapIndex] : n;
    });
    var endsWith = memoize(function(str, searchStr) {
      return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
    });
    var getStringSize = memoize(function(n) {
      n = n.toString();
      if (n === "auto") {
        return n;
      }
      if (endsWith(n, "px")) {
        return n;
      }
      if (endsWith(n, "%")) {
        return n;
      }
      if (endsWith(n, "vh")) {
        return n;
      }
      if (endsWith(n, "vw")) {
        return n;
      }
      if (endsWith(n, "vmax")) {
        return n;
      }
      if (endsWith(n, "vmin")) {
        return n;
      }
      return n + "px";
    });
    var getPixelSize = function(size, parentSize, innerWidth, innerHeight) {
      if (size && typeof size === "string") {
        if (endsWith(size, "%")) {
          var ratio = Number(size.replace("%", "")) / 100;
          return parentSize * ratio;
        } else if (endsWith(size, "vw")) {
          var ratio = Number(size.replace("vw", "")) / 100;
          return innerWidth * ratio;
        } else if (endsWith(size, "vh")) {
          var ratio = Number(size.replace("vh", "")) / 100;
          return innerHeight * ratio;
        }
      }
      return size;
    };
    var calculateNewMax = memoize(function(parentSize, innerWidth, innerHeight, maxWidth, maxHeight, minWidth, minHeight) {
      maxWidth = getPixelSize(maxWidth, parentSize.width, innerWidth, innerHeight);
      maxHeight = getPixelSize(maxHeight, parentSize.height, innerWidth, innerHeight);
      minWidth = getPixelSize(minWidth, parentSize.width, innerWidth, innerHeight);
      minHeight = getPixelSize(minHeight, parentSize.height, innerWidth, innerHeight);
      return {
        maxWidth: typeof maxWidth === "undefined" ? void 0 : Number(maxWidth),
        maxHeight: typeof maxHeight === "undefined" ? void 0 : Number(maxHeight),
        minWidth: typeof minWidth === "undefined" ? void 0 : Number(minWidth),
        minHeight: typeof minHeight === "undefined" ? void 0 : Number(minHeight)
      };
    });
    var definedProps = ["style", "className", "grid", "snap", "bounds", "size", "defaultSize", "minWidth", "minHeight", "maxWidth", "maxHeight", "lockAspectRatio", "lockAspectRatioExtraWidth", "lockAspectRatioExtraHeight", "enable", "handleStyles", "handleClasses", "handleWrapperStyle", "handleWrapperClass", "children", "onResizeStart", "onResize", "onResizeStop", "handleComponent", "scale", "resizeRatio", "snapGap"];
    var baseClassName = "__resizable_base__";
    var Resizable = function(_super) {
      __extends(Resizable2, _super);
      function Resizable2(props) {
        var _this = _super.call(this, props) || this;
        _this.ratio = 1;
        _this.resizable = null;
        _this.parentLeft = 0;
        _this.parentTop = 0;
        _this.resizableLeft = 0;
        _this.resizableTop = 0;
        _this.targetLeft = 0;
        _this.targetTop = 0;
        _this.ref = function(c) {
          if (c) {
            _this.resizable = c;
          }
        };
        _this.state = {
          isResizing: false,
          width: typeof (_this.propsSize && _this.propsSize.width) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.width,
          height: typeof (_this.propsSize && _this.propsSize.height) === "undefined" ? "auto" : _this.propsSize && _this.propsSize.height,
          direction: "right",
          original: {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          },
          backgroundStyle: {
            height: "100%",
            width: "100%",
            backgroundColor: "rgba(0,0,0,0)",
            cursor: "auto",
            opacity: 0,
            position: "fixed",
            zIndex: 9999,
            top: "0",
            left: "0",
            bottom: "0",
            right: "0"
          },
          flexBasis: void 0
        };
        _this.onResizeStart = _this.onResizeStart.bind(_this);
        _this.onMouseMove = _this.onMouseMove.bind(_this);
        _this.onMouseUp = _this.onMouseUp.bind(_this);
        return _this;
      }
      Object.defineProperty(Resizable2.prototype, "parentNode", {
        get: function() {
          if (!this.resizable) {
            return null;
          }
          return this.resizable.parentNode;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "window", {
        get: function() {
          if (!this.resizable) {
            return null;
          }
          if (!this.resizable.ownerDocument) {
            return null;
          }
          return this.resizable.ownerDocument.defaultView;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "propsSize", {
        get: function() {
          return this.props.size || this.props.defaultSize || DEFAULT_SIZE;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "base", {
        get: function() {
          var parent = this.parentNode;
          if (!parent) {
            return void 0;
          }
          var children = [].slice.call(parent.children);
          for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var n = children_1[_i];
            if (n.classList.contains(baseClassName)) {
              return n;
            }
          }
          return void 0;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "size", {
        get: function() {
          var width = 0;
          var height = 0;
          if (this.resizable && this.window) {
            var orgWidth = this.resizable.offsetWidth;
            var orgHeight = this.resizable.offsetHeight;
            var orgPosition = this.resizable.style.position;
            if (orgPosition !== "relative") {
              this.resizable.style.position = "relative";
            }
            width = this.resizable.style.width !== "auto" ? this.resizable.offsetWidth : orgWidth;
            height = this.resizable.style.height !== "auto" ? this.resizable.offsetHeight : orgHeight;
            this.resizable.style.position = orgPosition;
          }
          return {
            width,
            height
          };
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(Resizable2.prototype, "sizeStyle", {
        get: function() {
          var _this = this;
          var size = this.props.size;
          var getSize = function(key) {
            if (typeof _this.state[key] === "undefined" || _this.state[key] === "auto") {
              return "auto";
            }
            if (_this.propsSize && _this.propsSize[key] && endsWith(_this.propsSize[key].toString(), "%")) {
              if (endsWith(_this.state[key].toString(), "%")) {
                return _this.state[key].toString();
              }
              var parentSize = _this.getParentSize();
              var value = Number(_this.state[key].toString().replace("px", ""));
              var percent = value / parentSize[key] * 100;
              return percent + "%";
            }
            return getStringSize(_this.state[key]);
          };
          var width = size && typeof size.width !== "undefined" && !this.state.isResizing ? getStringSize(size.width) : getSize("width");
          var height = size && typeof size.height !== "undefined" && !this.state.isResizing ? getStringSize(size.height) : getSize("height");
          return {
            width,
            height
          };
        },
        enumerable: true,
        configurable: true
      });
      Resizable2.prototype.getParentSize = function() {
        if (!this.base || !this.parentNode) {
          if (!this.window) {
            return {
              width: 0,
              height: 0
            };
          }
          return {
            width: this.window.innerWidth,
            height: this.window.innerHeight
          };
        }
        var wrapChanged = false;
        var wrap = this.parentNode.style.flexWrap;
        var minWidth = this.base.style.minWidth;
        if (wrap !== "wrap") {
          wrapChanged = true;
          this.parentNode.style.flexWrap = "wrap";
        }
        this.base.style.position = "relative";
        this.base.style.minWidth = "100%";
        var size = {
          width: this.base.offsetWidth,
          height: this.base.offsetHeight
        };
        this.base.style.position = "absolute";
        if (wrapChanged) {
          this.parentNode.style.flexWrap = wrap;
        }
        this.base.style.minWidth = minWidth;
        return size;
      };
      Resizable2.prototype.bindEvents = function() {
        if (this.window) {
          this.window.addEventListener("mouseup", this.onMouseUp);
          this.window.addEventListener("mousemove", this.onMouseMove);
          this.window.addEventListener("mouseleave", this.onMouseUp);
          this.window.addEventListener("touchmove", this.onMouseMove);
          this.window.addEventListener("touchend", this.onMouseUp);
        }
      };
      Resizable2.prototype.unbindEvents = function() {
        if (this.window) {
          this.window.removeEventListener("mouseup", this.onMouseUp);
          this.window.removeEventListener("mousemove", this.onMouseMove);
          this.window.removeEventListener("mouseleave", this.onMouseUp);
          this.window.removeEventListener("touchmove", this.onMouseMove);
          this.window.removeEventListener("touchend", this.onMouseUp);
        }
      };
      Resizable2.prototype.componentDidMount = function() {
        if (!this.resizable || !this.window) {
          return;
        }
        var computedStyle = this.window.getComputedStyle(this.resizable);
        this.setState({
          width: this.state.width || this.size.width,
          height: this.state.height || this.size.height,
          flexBasis: computedStyle.flexBasis !== "auto" ? computedStyle.flexBasis : void 0
        });
        var parent = this.parentNode;
        if (!parent) {
          return;
        }
        if (this.base) {
          return;
        }
        var element = this.window.document.createElement("div");
        element.style.width = "100%";
        element.style.height = "100%";
        element.style.position = "absolute";
        element.style.transform = "scale(0, 0)";
        element.style.left = "0";
        element.style.flex = "0";
        if (element.classList) {
          element.classList.add(baseClassName);
        } else {
          element.className += baseClassName;
        }
        parent.appendChild(element);
      };
      Resizable2.prototype.componentWillUnmount = function() {
        if (this.window) {
          this.unbindEvents();
          var parent_1 = this.parentNode;
          if (!this.base || !parent_1) {
            return;
          }
          if (!parent_1 || !this.base) {
            return;
          }
          parent_1.removeChild(this.base);
        }
      };
      Resizable2.prototype.createSizeForCssProperty = function(newSize, kind) {
        var propsSize = this.propsSize && this.propsSize[kind];
        return this.state[kind] === "auto" && this.state.original[kind] === newSize && (typeof propsSize === "undefined" || propsSize === "auto") ? "auto" : newSize;
      };
      Resizable2.prototype.calculateNewMaxFromBoundary = function(maxWidth, maxHeight) {
        if (this.props.bounds === "parent") {
          var parent_2 = this.parentNode;
          if (parent_2) {
            var boundWidth = parent_2.offsetWidth + (this.parentLeft - this.resizableLeft);
            var boundHeight = parent_2.offsetHeight + (this.parentTop - this.resizableTop);
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
          }
        } else if (this.props.bounds === "window") {
          if (this.window) {
            var boundWidth = this.window.innerWidth - this.resizableLeft;
            var boundHeight = this.window.innerHeight - this.resizableTop;
            maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
            maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
          }
        } else if (this.props.bounds) {
          var boundWidth = this.props.bounds.offsetWidth + (this.targetLeft - this.resizableLeft);
          var boundHeight = this.props.bounds.offsetHeight + (this.targetTop - this.resizableTop);
          maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
          maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
        }
        return {
          maxWidth,
          maxHeight
        };
      };
      Resizable2.prototype.calculateNewSizeFromDirection = function(clientX, clientY) {
        var scale = this.props.scale || 1;
        var resizeRatio = this.props.resizeRatio || 1;
        var _a = this.state, direction = _a.direction, original = _a.original;
        var _b = this.props, lockAspectRatio = _b.lockAspectRatio, lockAspectRatioExtraHeight = _b.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _b.lockAspectRatioExtraWidth;
        var newWidth = original.width;
        var newHeight = original.height;
        var extraHeight = lockAspectRatioExtraHeight || 0;
        var extraWidth = lockAspectRatioExtraWidth || 0;
        if (hasDirection("right", direction)) {
          newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
          if (lockAspectRatio) {
            newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
          }
        }
        if (hasDirection("left", direction)) {
          newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
          if (lockAspectRatio) {
            newHeight = (newWidth - extraWidth) / this.ratio + extraHeight;
          }
        }
        if (hasDirection("bottom", direction)) {
          newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
          if (lockAspectRatio) {
            newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
          }
        }
        if (hasDirection("top", direction)) {
          newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
          if (lockAspectRatio) {
            newWidth = (newHeight - extraHeight) * this.ratio + extraWidth;
          }
        }
        return {
          newWidth,
          newHeight
        };
      };
      Resizable2.prototype.calculateNewSizeFromAspectRatio = function(newWidth, newHeight, max, min) {
        var _a = this.props, lockAspectRatio = _a.lockAspectRatio, lockAspectRatioExtraHeight = _a.lockAspectRatioExtraHeight, lockAspectRatioExtraWidth = _a.lockAspectRatioExtraWidth;
        var computedMinWidth = typeof min.width === "undefined" ? 10 : min.width;
        var computedMaxWidth = typeof max.width === "undefined" || max.width < 0 ? newWidth : max.width;
        var computedMinHeight = typeof min.height === "undefined" ? 10 : min.height;
        var computedMaxHeight = typeof max.height === "undefined" || max.height < 0 ? newHeight : max.height;
        var extraHeight = lockAspectRatioExtraHeight || 0;
        var extraWidth = lockAspectRatioExtraWidth || 0;
        if (lockAspectRatio) {
          var extraMinWidth = (computedMinHeight - extraHeight) * this.ratio + extraWidth;
          var extraMaxWidth = (computedMaxHeight - extraHeight) * this.ratio + extraWidth;
          var extraMinHeight = (computedMinWidth - extraWidth) / this.ratio + extraHeight;
          var extraMaxHeight = (computedMaxWidth - extraWidth) / this.ratio + extraHeight;
          var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
          var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
          var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
          var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
          newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
          newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
        } else {
          newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
          newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
        }
        return {
          newWidth,
          newHeight
        };
      };
      Resizable2.prototype.setBoundingClientRect = function() {
        if (this.props.bounds === "parent") {
          var parent_3 = this.parentNode;
          if (parent_3) {
            var parentRect = parent_3.getBoundingClientRect();
            this.parentLeft = parentRect.left;
            this.parentTop = parentRect.top;
          }
        }
        if (this.props.bounds && typeof this.props.bounds !== "string") {
          var targetRect = this.props.bounds.getBoundingClientRect();
          this.targetLeft = targetRect.left;
          this.targetTop = targetRect.top;
        }
        if (this.resizable) {
          var _a = this.resizable.getBoundingClientRect(), left = _a.left, top_1 = _a.top;
          this.resizableLeft = left;
          this.resizableTop = top_1;
        }
      };
      Resizable2.prototype.onResizeStart = function(event, direction) {
        if (!this.resizable || !this.window) {
          return;
        }
        var clientX = 0;
        var clientY = 0;
        if (event.nativeEvent instanceof this.window.MouseEvent) {
          clientX = event.nativeEvent.clientX;
          clientY = event.nativeEvent.clientY;
          if (event.nativeEvent.which === 3) {
            return;
          }
        } else if (event.nativeEvent instanceof this.window.TouchEvent) {
          clientX = event.nativeEvent.touches[0].clientX;
          clientY = event.nativeEvent.touches[0].clientY;
        }
        if (this.props.onResizeStart) {
          if (this.resizable) {
            var startResize = this.props.onResizeStart(event, direction, this.resizable);
            if (startResize === false) {
              return;
            }
          }
        }
        if (this.props.size) {
          if (typeof this.props.size.height !== "undefined" && this.props.size.height !== this.state.height) {
            this.setState({
              height: this.props.size.height
            });
          }
          if (typeof this.props.size.width !== "undefined" && this.props.size.width !== this.state.width) {
            this.setState({
              width: this.props.size.width
            });
          }
        }
        this.ratio = typeof this.props.lockAspectRatio === "number" ? this.props.lockAspectRatio : this.size.width / this.size.height;
        var flexBasis;
        var computedStyle = this.window.getComputedStyle(this.resizable);
        if (computedStyle.flexBasis !== "auto") {
          var parent_4 = this.parentNode;
          if (parent_4) {
            var dir = this.window.getComputedStyle(parent_4).flexDirection;
            this.flexDir = dir.startsWith("row") ? "row" : "column";
            flexBasis = computedStyle.flexBasis;
          }
        }
        this.setBoundingClientRect();
        this.bindEvents();
        var state = {
          original: {
            x: clientX,
            y: clientY,
            width: this.size.width,
            height: this.size.height
          },
          isResizing: true,
          backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {
            cursor: this.window.getComputedStyle(event.target).cursor || "auto"
          }),
          direction,
          flexBasis
        };
        this.setState(state);
      };
      Resizable2.prototype.onMouseMove = function(event) {
        if (!this.state.isResizing || !this.resizable || !this.window) {
          return;
        }
        var _a = this.props, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, minWidth = _a.minWidth, minHeight = _a.minHeight;
        var clientX = event instanceof this.window.MouseEvent ? event.clientX : event.touches[0].clientX;
        var clientY = event instanceof this.window.MouseEvent ? event.clientY : event.touches[0].clientY;
        var _b = this.state, direction = _b.direction, original = _b.original, width = _b.width, height = _b.height;
        var parentSize = this.getParentSize();
        var max = calculateNewMax(parentSize, this.window.innerWidth, this.window.innerHeight, maxWidth, maxHeight, minWidth, minHeight);
        maxWidth = max.maxWidth;
        maxHeight = max.maxHeight;
        minWidth = max.minWidth;
        minHeight = max.minHeight;
        var _c = this.calculateNewSizeFromDirection(clientX, clientY), newHeight = _c.newHeight, newWidth = _c.newWidth;
        var boundaryMax = this.calculateNewMaxFromBoundary(maxWidth, maxHeight);
        var newSize = this.calculateNewSizeFromAspectRatio(newWidth, newHeight, {
          width: boundaryMax.maxWidth,
          height: boundaryMax.maxHeight
        }, {
          width: minWidth,
          height: minHeight
        });
        newWidth = newSize.newWidth;
        newHeight = newSize.newHeight;
        if (this.props.grid) {
          var newGridWidth = snap(newWidth, this.props.grid[0]);
          var newGridHeight = snap(newHeight, this.props.grid[1]);
          var gap = this.props.snapGap || 0;
          newWidth = gap === 0 || Math.abs(newGridWidth - newWidth) <= gap ? newGridWidth : newWidth;
          newHeight = gap === 0 || Math.abs(newGridHeight - newHeight) <= gap ? newGridHeight : newHeight;
        }
        if (this.props.snap && this.props.snap.x) {
          newWidth = findClosestSnap(newWidth, this.props.snap.x, this.props.snapGap);
        }
        if (this.props.snap && this.props.snap.y) {
          newHeight = findClosestSnap(newHeight, this.props.snap.y, this.props.snapGap);
        }
        var delta = {
          width: newWidth - original.width,
          height: newHeight - original.height
        };
        if (width && typeof width === "string") {
          if (endsWith(width, "%")) {
            var percent = newWidth / parentSize.width * 100;
            newWidth = percent + "%";
          } else if (endsWith(width, "vw")) {
            var vw = newWidth / this.window.innerWidth * 100;
            newWidth = vw + "vw";
          } else if (endsWith(width, "vh")) {
            var vh = newWidth / this.window.innerHeight * 100;
            newWidth = vh + "vh";
          }
        }
        if (height && typeof height === "string") {
          if (endsWith(height, "%")) {
            var percent = newHeight / parentSize.height * 100;
            newHeight = percent + "%";
          } else if (endsWith(height, "vw")) {
            var vw = newHeight / this.window.innerWidth * 100;
            newHeight = vw + "vw";
          } else if (endsWith(height, "vh")) {
            var vh = newHeight / this.window.innerHeight * 100;
            newHeight = vh + "vh";
          }
        }
        var newState = {
          width: this.createSizeForCssProperty(newWidth, "width"),
          height: this.createSizeForCssProperty(newHeight, "height")
        };
        if (this.flexDir === "row") {
          newState.flexBasis = newState.width;
        } else if (this.flexDir === "column") {
          newState.flexBasis = newState.height;
        }
        this.setState(newState);
        if (this.props.onResize) {
          this.props.onResize(event, direction, this.resizable, delta);
        }
      };
      Resizable2.prototype.onMouseUp = function(event) {
        var _a = this.state, isResizing = _a.isResizing, direction = _a.direction, original = _a.original;
        if (!isResizing || !this.resizable) {
          return;
        }
        var delta = {
          width: this.size.width - original.width,
          height: this.size.height - original.height
        };
        if (this.props.onResizeStop) {
          this.props.onResizeStop(event, direction, this.resizable, delta);
        }
        if (this.props.size) {
          this.setState(this.props.size);
        }
        this.unbindEvents();
        this.setState({
          isResizing: false,
          backgroundStyle: __assign(__assign({}, this.state.backgroundStyle), {
            cursor: "auto"
          })
        });
      };
      Resizable2.prototype.updateSize = function(size) {
        this.setState({
          width: size.width,
          height: size.height
        });
      };
      Resizable2.prototype.renderResizer = function() {
        var _this = this;
        var _a = this.props, enable = _a.enable, handleStyles = _a.handleStyles, handleClasses = _a.handleClasses, handleWrapperStyle = _a.handleWrapperStyle, handleWrapperClass = _a.handleWrapperClass, handleComponent = _a.handleComponent;
        if (!enable) {
          return null;
        }
        var resizers = Object.keys(enable).map(function(dir) {
          if (enable[dir] !== false) {
            return React.createElement(Resizer, {
              key: dir,
              direction: dir,
              onResizeStart: _this.onResizeStart,
              replaceStyles: handleStyles && handleStyles[dir],
              className: handleClasses && handleClasses[dir]
            }, handleComponent && handleComponent[dir] ? handleComponent[dir] : null);
          }
          return null;
        });
        return React.createElement("span", {
          className: handleWrapperClass,
          style: handleWrapperStyle
        }, resizers);
      };
      Resizable2.prototype.render = function() {
        var _this = this;
        var extendsProps = Object.keys(this.props).reduce(function(acc, key) {
          if (definedProps.indexOf(key) !== -1) {
            return acc;
          }
          acc[key] = _this.props[key];
          return acc;
        }, {});
        var style = __assign(__assign(__assign({
          position: "relative",
          userSelect: this.state.isResizing ? "none" : "auto"
        }, this.props.style), this.sizeStyle), {
          maxWidth: this.props.maxWidth,
          maxHeight: this.props.maxHeight,
          minWidth: this.props.minWidth,
          minHeight: this.props.minHeight,
          boxSizing: "border-box",
          flexShrink: 0
        });
        if (this.state.flexBasis) {
          style.flexBasis = this.state.flexBasis;
        }
        return React.createElement("div", __assign({
          ref: this.ref,
          style,
          className: this.props.className
        }, extendsProps), this.state.isResizing && React.createElement("div", {
          style: this.state.backgroundStyle
        }), this.props.children, this.renderResizer());
      };
      Resizable2.defaultProps = {
        onResizeStart: function() {
        },
        onResize: function() {
        },
        onResizeStop: function() {
        },
        enable: {
          top: true,
          right: true,
          bottom: true,
          left: true,
          topRight: true,
          bottomRight: true,
          bottomLeft: true,
          topLeft: true
        },
        style: {},
        grid: [1, 1],
        lockAspectRatio: false,
        lockAspectRatioExtraWidth: 0,
        lockAspectRatioExtraHeight: 0,
        scale: 1,
        resizeRatio: 1,
        snapGap: 0
      };
      return Resizable2;
    }(React.PureComponent);
    exports.Resizable = Resizable;
  },

  69(require, exports) {
    // node_modules/react-rnd/lib/index.es5.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require(73 /* react */);
    var DraggableRoot = _interopDefault(require(71 /* react-draggable */));
    var reResizable = require(70 /* re-resizable */);
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    }
    var Draggable = DraggableRoot;
    var resizableStyle = {
      width: "auto",
      height: "auto",
      display: "inline-block",
      position: "absolute",
      top: 0,
      left: 0
    };
    var Rnd = function(_super) {
      __extends(Rnd2, _super);
      function Rnd2(props) {
        var _this = _super.call(this, props) || this;
        _this.resizing = false;
        _this.resizingPosition = {
          x: 0,
          y: 0
        };
        _this.offsetFromParent = {
          left: 0,
          top: 0
        };
        _this.refDraggable = function(c) {
          if (!c)
            return;
          _this.draggable = c;
        };
        _this.refResizable = function(c) {
          if (!c)
            return;
          _this.resizable = c;
        };
        _this.state = {
          original: {
            x: 0,
            y: 0
          },
          bounds: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          },
          maxWidth: props.maxWidth,
          maxHeight: props.maxHeight
        };
        _this.onResizeStart = _this.onResizeStart.bind(_this);
        _this.onResize = _this.onResize.bind(_this);
        _this.onResizeStop = _this.onResizeStop.bind(_this);
        _this.onDragStart = _this.onDragStart.bind(_this);
        _this.onDrag = _this.onDrag.bind(_this);
        _this.onDragStop = _this.onDragStop.bind(_this);
        _this.getMaxSizesFromProps = _this.getMaxSizesFromProps.bind(_this);
        return _this;
      }
      Rnd2.prototype.componentDidMount = function() {
        this.updateOffsetFromParent();
        var _a = this.offsetFromParent, left = _a.left, top = _a.top;
        var _b = this.getDraggablePosition(), x = _b.x, y = _b.y;
        this.draggable.setState({
          x: x - left,
          y: y - top
        });
        this.forceUpdate();
      };
      Rnd2.prototype.getDraggablePosition = function() {
        var _a = this.draggable.state, x = _a.x, y = _a.y;
        return {
          x,
          y
        };
      };
      Rnd2.prototype.getParent = function() {
        return this.resizable && this.resizable.parentNode;
      };
      Rnd2.prototype.getParentSize = function() {
        return this.resizable.getParentSize();
      };
      Rnd2.prototype.getMaxSizesFromProps = function() {
        var maxWidth = typeof this.props.maxWidth === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxWidth;
        var maxHeight = typeof this.props.maxHeight === "undefined" ? Number.MAX_SAFE_INTEGER : this.props.maxHeight;
        return {
          maxWidth,
          maxHeight
        };
      };
      Rnd2.prototype.getSelfElement = function() {
        return this.resizable && this.resizable.resizable;
      };
      Rnd2.prototype.getOffsetHeight = function(boundary) {
        var scale = this.props.scale;
        switch (this.props.bounds) {
          case "window":
            return window.innerHeight / scale;
          case "body":
            return document.body.offsetHeight / scale;
          default:
            return boundary.offsetHeight;
        }
      };
      Rnd2.prototype.getOffsetWidth = function(boundary) {
        var scale = this.props.scale;
        switch (this.props.bounds) {
          case "window":
            return window.innerWidth / scale;
          case "body":
            return document.body.offsetWidth / scale;
          default:
            return boundary.offsetWidth;
        }
      };
      Rnd2.prototype.onDragStart = function(e, data) {
        if (this.props.onDragStart) {
          this.props.onDragStart(e, data);
        }
        if (!this.props.bounds)
          return;
        var parent = this.getParent();
        var scale = this.props.scale;
        var boundary;
        if (this.props.bounds === "parent") {
          boundary = parent;
        } else if (this.props.bounds === "body") {
          var parentRect_1 = parent.getBoundingClientRect();
          var parentLeft_1 = parentRect_1.left;
          var parentTop_1 = parentRect_1.top;
          var bodyRect = document.body.getBoundingClientRect();
          var left_1 = -(parentLeft_1 - parent.offsetLeft * scale - bodyRect.left) / scale;
          var top_1 = -(parentTop_1 - parent.offsetTop * scale - bodyRect.top) / scale;
          var right = (document.body.offsetWidth - this.resizable.size.width * scale) / scale + left_1;
          var bottom = (document.body.offsetHeight - this.resizable.size.height * scale) / scale + top_1;
          return this.setState({
            bounds: {
              top: top_1,
              right,
              bottom,
              left: left_1
            }
          });
        } else if (this.props.bounds === "window") {
          if (!this.resizable)
            return;
          var parentRect_2 = parent.getBoundingClientRect();
          var parentLeft_2 = parentRect_2.left;
          var parentTop_2 = parentRect_2.top;
          var left_2 = -(parentLeft_2 - parent.offsetLeft * scale) / scale;
          var top_2 = -(parentTop_2 - parent.offsetTop * scale) / scale;
          var right = (window.innerWidth - this.resizable.size.width * scale) / scale + left_2;
          var bottom = (window.innerHeight - this.resizable.size.height * scale) / scale + top_2;
          return this.setState({
            bounds: {
              top: top_2,
              right,
              bottom,
              left: left_2
            }
          });
        } else {
          boundary = document.querySelector(this.props.bounds);
        }
        if (!(boundary instanceof HTMLElement) || !(parent instanceof HTMLElement)) {
          return;
        }
        var boundaryRect = boundary.getBoundingClientRect();
        var boundaryLeft = boundaryRect.left;
        var boundaryTop = boundaryRect.top;
        var parentRect = parent.getBoundingClientRect();
        var parentLeft = parentRect.left;
        var parentTop = parentRect.top;
        var left = (boundaryLeft - parentLeft) / scale;
        var top = boundaryTop - parentTop;
        if (!this.resizable)
          return;
        this.updateOffsetFromParent();
        var offset = this.offsetFromParent;
        this.setState({
          bounds: {
            top: top - offset.top,
            right: left + (boundary.offsetWidth - this.resizable.size.width) - offset.left / scale,
            bottom: top + (boundary.offsetHeight - this.resizable.size.height) - offset.top,
            left: left - offset.left / scale
          }
        });
      };
      Rnd2.prototype.onDrag = function(e, data) {
        if (this.props.onDrag) {
          var offset = this.offsetFromParent;
          return this.props.onDrag(e, __assign(__assign({}, data), {
            x: data.x - offset.left,
            y: data.y - offset.top
          }));
        }
      };
      Rnd2.prototype.onDragStop = function(e, data) {
        if (this.props.onDragStop) {
          var _a = this.offsetFromParent, left = _a.left, top_3 = _a.top;
          return this.props.onDragStop(e, __assign(__assign({}, data), {
            x: data.x + left,
            y: data.y + top_3
          }));
        }
      };
      Rnd2.prototype.onResizeStart = function(e, dir, elementRef) {
        e.stopPropagation();
        this.resizing = true;
        var scale = this.props.scale;
        var offset = this.offsetFromParent;
        var pos = this.getDraggablePosition();
        this.resizingPosition = {
          x: pos.x + offset.left,
          y: pos.y + offset.top
        };
        this.setState({
          original: pos
        });
        if (this.props.bounds) {
          var parent_1 = this.getParent();
          var boundary = void 0;
          if (this.props.bounds === "parent") {
            boundary = parent_1;
          } else if (this.props.bounds === "body") {
            boundary = document.body;
          } else if (this.props.bounds === "window") {
            boundary = window;
          } else {
            boundary = document.querySelector(this.props.bounds);
          }
          var self_1 = this.getSelfElement();
          if (self_1 instanceof Element && (boundary instanceof HTMLElement || boundary === window) && parent_1 instanceof HTMLElement) {
            var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
            var parentSize = this.getParentSize();
            if (maxWidth && typeof maxWidth === "string") {
              if (maxWidth.endsWith("%")) {
                var ratio = Number(maxWidth.replace("%", "")) / 100;
                maxWidth = parentSize.width * ratio;
              } else if (maxWidth.endsWith("px")) {
                maxWidth = Number(maxWidth.replace("px", ""));
              }
            }
            if (maxHeight && typeof maxHeight === "string") {
              if (maxHeight.endsWith("%")) {
                var ratio = Number(maxHeight.replace("%", "")) / 100;
                maxHeight = parentSize.width * ratio;
              } else if (maxHeight.endsWith("px")) {
                maxHeight = Number(maxHeight.replace("px", ""));
              }
            }
            var selfRect = self_1.getBoundingClientRect();
            var selfLeft = selfRect.left;
            var selfTop = selfRect.top;
            var boundaryRect = this.props.bounds === "window" ? {
              left: 0,
              top: 0
            } : boundary.getBoundingClientRect();
            var boundaryLeft = boundaryRect.left;
            var boundaryTop = boundaryRect.top;
            var offsetWidth = this.getOffsetWidth(boundary);
            var offsetHeight = this.getOffsetHeight(boundary);
            var hasLeft = dir.toLowerCase().endsWith("left");
            var hasRight = dir.toLowerCase().endsWith("right");
            var hasTop = dir.startsWith("top");
            var hasBottom = dir.startsWith("bottom");
            if (hasLeft && this.resizable) {
              var max = (selfLeft - boundaryLeft) / scale + this.resizable.size.width;
              this.setState({
                maxWidth: max > Number(maxWidth) ? maxWidth : max
              });
            }
            if (hasRight || this.props.lockAspectRatio && !hasLeft) {
              var max = offsetWidth + (boundaryLeft - selfLeft) / scale;
              this.setState({
                maxWidth: max > Number(maxWidth) ? maxWidth : max
              });
            }
            if (hasTop && this.resizable) {
              var max = (selfTop - boundaryTop) / scale + this.resizable.size.height;
              this.setState({
                maxHeight: max > Number(maxHeight) ? maxHeight : max
              });
            }
            if (hasBottom || this.props.lockAspectRatio && !hasTop) {
              var max = offsetHeight + (boundaryTop - selfTop) / scale;
              this.setState({
                maxHeight: max > Number(maxHeight) ? maxHeight : max
              });
            }
          }
        } else {
          this.setState({
            maxWidth: this.props.maxWidth,
            maxHeight: this.props.maxHeight
          });
        }
        if (this.props.onResizeStart) {
          this.props.onResizeStart(e, dir, elementRef);
        }
      };
      Rnd2.prototype.onResize = function(e, direction, elementRef, delta) {
        if (/left/i.test(direction)) {
          var x_1 = this.state.original.x - delta.width;
          this.draggable.setState({
            x: x_1
          });
        }
        if (/top/i.test(direction)) {
          var y_1 = this.state.original.y - delta.height;
          this.draggable.setState({
            y: y_1
          });
        }
        this.updateOffsetFromParent();
        var offset = this.offsetFromParent;
        var x = this.getDraggablePosition().x + offset.left;
        var y = this.getDraggablePosition().y + offset.top;
        this.resizingPosition = {
          x,
          y
        };
        if (!this.props.onResize)
          return;
        this.props.onResize(e, direction, elementRef, delta, {
          x,
          y
        });
      };
      Rnd2.prototype.onResizeStop = function(e, direction, elementRef, delta) {
        this.resizing = false;
        var _a = this.getMaxSizesFromProps(), maxWidth = _a.maxWidth, maxHeight = _a.maxHeight;
        this.setState({
          maxWidth,
          maxHeight
        });
        if (this.props.onResizeStop) {
          this.props.onResizeStop(e, direction, elementRef, delta, this.resizingPosition);
        }
      };
      Rnd2.prototype.updateSize = function(size) {
        if (!this.resizable)
          return;
        this.resizable.updateSize({
          width: size.width,
          height: size.height
        });
      };
      Rnd2.prototype.updatePosition = function(position) {
        this.draggable.setState(position);
      };
      Rnd2.prototype.updateOffsetFromParent = function() {
        var scale = this.props.scale;
        var parent = this.getParent();
        var self = this.getSelfElement();
        if (!parent || self === null) {
          return {
            top: 0,
            left: 0
          };
        }
        var parentRect = parent.getBoundingClientRect();
        var parentLeft = parentRect.left;
        var parentTop = parentRect.top;
        var selfRect = self.getBoundingClientRect();
        var position = this.getDraggablePosition();
        this.offsetFromParent = {
          left: selfRect.left - parentLeft - position.x * scale,
          top: selfRect.top - parentTop - position.y * scale
        };
      };
      Rnd2.prototype.render = function() {
        var _a = this.props, disableDragging = _a.disableDragging, style = _a.style, dragHandleClassName = _a.dragHandleClassName, position = _a.position, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, dragAxis = _a.dragAxis, dragGrid = _a.dragGrid, bounds = _a.bounds, enableUserSelectHack = _a.enableUserSelectHack, cancel = _a.cancel, children = _a.children, onResizeStart = _a.onResizeStart, onResize = _a.onResize, onResizeStop = _a.onResizeStop, onDragStart = _a.onDragStart, onDrag = _a.onDrag, onDragStop = _a.onDragStop, resizeHandleStyles = _a.resizeHandleStyles, resizeHandleClasses = _a.resizeHandleClasses, resizeHandleComponent = _a.resizeHandleComponent, enableResizing = _a.enableResizing, resizeGrid = _a.resizeGrid, resizeHandleWrapperClass = _a.resizeHandleWrapperClass, resizeHandleWrapperStyle = _a.resizeHandleWrapperStyle, scale = _a.scale, resizableProps = __rest(_a, ["disableDragging", "style", "dragHandleClassName", "position", "onMouseDown", "onMouseUp", "dragAxis", "dragGrid", "bounds", "enableUserSelectHack", "cancel", "children", "onResizeStart", "onResize", "onResizeStop", "onDragStart", "onDrag", "onDragStop", "resizeHandleStyles", "resizeHandleClasses", "resizeHandleComponent", "enableResizing", "resizeGrid", "resizeHandleWrapperClass", "resizeHandleWrapperStyle", "scale"]);
        var defaultValue = this.props.default ? __assign({}, this.props.default) : void 0;
        delete resizableProps.default;
        var cursorStyle = disableDragging || dragHandleClassName ? {
          cursor: "auto"
        } : {
          cursor: "move"
        };
        var innerStyle = __assign(__assign(__assign({}, resizableStyle), cursorStyle), style);
        var _b = this.offsetFromParent, left = _b.left, top = _b.top;
        var draggablePosition;
        if (position) {
          draggablePosition = {
            x: position.x - left,
            y: position.y - top
          };
        }
        var pos = this.resizing ? void 0 : draggablePosition;
        return React.createElement(Draggable, {
          ref: this.refDraggable,
          handle: dragHandleClassName ? "." + dragHandleClassName : void 0,
          defaultPosition: defaultValue,
          onMouseDown,
          onMouseUp,
          onStart: this.onDragStart,
          onDrag: this.onDrag,
          onStop: this.onDragStop,
          axis: dragAxis,
          disabled: disableDragging,
          grid: dragGrid,
          bounds: bounds ? this.state.bounds : void 0,
          position: pos,
          enableUserSelectHack,
          cancel,
          scale
        }, React.createElement(reResizable.Resizable, __assign({}, resizableProps, {
          ref: this.refResizable,
          defaultSize: defaultValue,
          size: this.props.size,
          enable: enableResizing,
          onResizeStart: this.onResizeStart,
          onResize: this.onResize,
          onResizeStop: this.onResizeStop,
          style: innerStyle,
          minWidth: this.props.minWidth,
          minHeight: this.props.minHeight,
          maxWidth: this.resizing ? this.state.maxWidth : this.props.maxWidth,
          maxHeight: this.resizing ? this.state.maxHeight : this.props.maxHeight,
          grid: resizeGrid,
          handleWrapperClass: resizeHandleWrapperClass,
          handleWrapperStyle: resizeHandleWrapperStyle,
          lockAspectRatio: this.props.lockAspectRatio,
          lockAspectRatioExtraWidth: this.props.lockAspectRatioExtraWidth,
          lockAspectRatioExtraHeight: this.props.lockAspectRatioExtraHeight,
          handleStyles: resizeHandleStyles,
          handleClasses: resizeHandleClasses,
          handleComponent: resizeHandleComponent,
          scale: this.props.scale
        }), children));
      };
      Rnd2.defaultProps = {
        maxWidth: Number.MAX_SAFE_INTEGER,
        maxHeight: Number.MAX_SAFE_INTEGER,
        scale: 1,
        onResizeStart: function() {
        },
        onResize: function() {
        },
        onResizeStop: function() {
        },
        onDragStart: function() {
        },
        onDrag: function() {
        },
        onDragStop: function() {
        }
      };
      return Rnd2;
    }(React.PureComponent);
    exports.Rnd = Rnd;
  },

  80(require, exports, module) {
    // node_modules/shallowequal/index.js
    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var idx = 0; idx < keysA.length; idx++) {
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
          return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  },

  6(require, exports) {
    // node_modules/@emotion/stylis/dist/stylis.browser.cjs.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function stylis_min(W) {
      function M(d, c, e, h, a) {
        for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B2 = e.length, J = B2 - 1, y, f = "", p = "", F2 = "", G2 = "", C; l < B2; ) {
          g = e.charCodeAt(l);
          l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B2++, J++);
          if (0 === b + n + v + m) {
            if (l === J && (0 < r && (f = f.replace(N, "")), 0 < f.trim().length)) {
              switch (g) {
                case 32:
                case 9:
                case 59:
                case 13:
                case 10:
                  break;
                default:
                  f += e.charAt(l);
              }
              g = 59;
            }
            switch (g) {
              case 123:
                f = f.trim();
                q = f.charCodeAt(0);
                k = 1;
                for (t = ++l; l < B2; ) {
                  switch (g = e.charCodeAt(l)) {
                    case 123:
                      k++;
                      break;
                    case 125:
                      k--;
                      break;
                    case 47:
                      switch (g = e.charCodeAt(l + 1)) {
                        case 42:
                        case 47:
                          a: {
                            for (u = l + 1; u < J; ++u) {
                              switch (e.charCodeAt(u)) {
                                case 47:
                                  if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                    l = u + 1;
                                    break a;
                                  }
                                  break;
                                case 10:
                                  if (47 === g) {
                                    l = u + 1;
                                    break a;
                                  }
                              }
                            }
                            l = u;
                          }
                      }
                      break;
                    case 91:
                      g++;
                    case 40:
                      g++;
                    case 34:
                    case 39:
                      for (; l++ < J && e.charCodeAt(l) !== g; ) {
                      }
                  }
                  if (0 === k)
                    break;
                  l++;
                }
                k = e.substring(t, l);
                0 === q && (q = (f = f.replace(ca, "").trim()).charCodeAt(0));
                switch (q) {
                  case 64:
                    0 < r && (f = f.replace(N, ""));
                    g = f.charCodeAt(1);
                    switch (g) {
                      case 100:
                      case 109:
                      case 115:
                      case 45:
                        r = c;
                        break;
                      default:
                        r = O;
                    }
                    k = M(c, r, k, g, a + 1);
                    t = k.length;
                    0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(""), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ""));
                    if (0 < t)
                      switch (g) {
                        case 115:
                          f = f.replace(da, ea);
                        case 100:
                        case 109:
                        case 45:
                          k = f + "{" + k + "}";
                          break;
                        case 107:
                          f = f.replace(fa, "$1 $2");
                          k = f + "{" + k + "}";
                          k = 1 === w || 2 === w && L("@" + k, 3) ? "@-webkit-" + k + "@" + k : "@" + k;
                          break;
                        default:
                          k = f + k, 112 === h && (k = (p += k, ""));
                      }
                    else
                      k = "";
                    break;
                  default:
                    k = M(c, X(c, f, I), k, h, a + 1);
                }
                F2 += k;
                k = I = r = u = q = 0;
                f = "";
                g = e.charCodeAt(++l);
                break;
              case 125:
              case 59:
                f = (0 < r ? f.replace(N, "") : f).trim();
                if (1 < (t = f.length))
                  switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(" ", ":")).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = "\0\0"), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                    case 0:
                      break;
                    case 64:
                      if (105 === g || 99 === g) {
                        G2 += f + e.charAt(l);
                        break;
                      }
                    default:
                      58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
                  }
                I = r = u = q = 0;
                f = "";
                g = e.charCodeAt(++l);
            }
          }
          switch (g) {
            case 13:
            case 10:
              47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += "\0");
              0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
              z = 1;
              D++;
              break;
            case 59:
            case 125:
              if (0 === b + n + v + m) {
                z++;
                break;
              }
            default:
              z++;
              y = e.charAt(l);
              switch (g) {
                case 9:
                case 32:
                  if (0 === n + m + b)
                    switch (x) {
                      case 44:
                      case 58:
                      case 9:
                      case 32:
                        y = "";
                        break;
                      default:
                        32 !== g && (y = " ");
                    }
                  break;
                case 0:
                  y = "\\0";
                  break;
                case 12:
                  y = "\\f";
                  break;
                case 11:
                  y = "\\v";
                  break;
                case 38:
                  0 === n + b + m && (r = I = 1, y = "\f" + y);
                  break;
                case 108:
                  if (0 === n + b + m + E && 0 < u)
                    switch (l - u) {
                      case 2:
                        112 === x && 58 === e.charCodeAt(l - 3) && (E = x);
                      case 8:
                        111 === K && (E = K);
                    }
                  break;
                case 58:
                  0 === n + b + m && (u = l);
                  break;
                case 44:
                  0 === b + v + n + m && (r = 1, y += "\r");
                  break;
                case 34:
                case 39:
                  0 === b && (n = n === g ? 0 : 0 === n ? g : n);
                  break;
                case 91:
                  0 === n + b + v && m++;
                  break;
                case 93:
                  0 === n + b + v && m--;
                  break;
                case 41:
                  0 === n + b + m && v--;
                  break;
                case 40:
                  if (0 === n + b + m) {
                    if (0 === q)
                      switch (2 * x + 3 * K) {
                        case 533:
                          break;
                        default:
                          q = 1;
                      }
                    v++;
                  }
                  break;
                case 64:
                  0 === b + v + n + m + u + k && (k = 1);
                  break;
                case 42:
                case 47:
                  if (!(0 < n + m + v))
                    switch (b) {
                      case 0:
                        switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                          case 235:
                            b = 47;
                            break;
                          case 220:
                            t = l, b = 42;
                        }
                        break;
                      case 42:
                        47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = "", b = 0);
                    }
              }
              0 === b && (f += y);
          }
          K = x;
          x = g;
          l++;
        }
        t = p.length;
        if (0 < t) {
          r = c;
          if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length))
            return G2 + p + F2;
          p = r.join(",") + "{" + p + "}";
          if (0 !== w * E) {
            2 !== w || L(p, 2) || (E = 0);
            switch (E) {
              case 111:
                p = p.replace(ha, ":-moz-$1") + p;
                break;
              case 112:
                p = p.replace(Q, "::-webkit-input-$1") + p.replace(Q, "::-moz-$1") + p.replace(Q, ":-ms-input-$1") + p;
            }
            E = 0;
          }
        }
        return G2 + p + F2;
      }
      function X(d, c, e) {
        var h = c.trim().split(ia);
        c = h;
        var a = h.length, m = d.length;
        switch (m) {
          case 0:
          case 1:
            var b = 0;
            for (d = 0 === m ? "" : d[0] + " "; b < a; ++b) {
              c[b] = Z(d, c[b], e).trim();
            }
            break;
          default:
            var v = b = 0;
            for (c = []; b < a; ++b) {
              for (var n = 0; n < m; ++n) {
                c[v++] = Z(d[n] + " ", h[b], e).trim();
              }
            }
        }
        return c;
      }
      function Z(d, c, e) {
        var h = c.charCodeAt(0);
        33 > h && (h = (c = c.trim()).charCodeAt(0));
        switch (h) {
          case 38:
            return c.replace(F, "$1" + d.trim());
          case 58:
            return d.trim() + c.replace(F, "$1" + d.trim());
          default:
            if (0 < 1 * e && 0 < c.indexOf("\f"))
              return c.replace(F, (58 === d.charCodeAt(0) ? "" : "$1") + d.trim());
        }
        return d + c;
      }
      function P(d, c, e, h) {
        var a = d + ";", m = 2 * c + 3 * e + 4 * h;
        if (944 === m) {
          d = a.indexOf(":", 9) + 1;
          var b = a.substring(d, a.length - 1).trim();
          b = a.substring(0, d).trim() + b + ";";
          return 1 === w || 2 === w && L(b, 1) ? "-webkit-" + b + b : b;
        }
        if (0 === w || 2 === w && !L(a, 1))
          return a;
        switch (m) {
          case 1015:
            return 97 === a.charCodeAt(10) ? "-webkit-" + a + a : a;
          case 951:
            return 116 === a.charCodeAt(3) ? "-webkit-" + a + a : a;
          case 963:
            return 110 === a.charCodeAt(5) ? "-webkit-" + a + a : a;
          case 1009:
            if (100 !== a.charCodeAt(4))
              break;
          case 969:
          case 942:
            return "-webkit-" + a + a;
          case 978:
            return "-webkit-" + a + "-moz-" + a + a;
          case 1019:
          case 983:
            return "-webkit-" + a + "-moz-" + a + "-ms-" + a + a;
          case 883:
            if (45 === a.charCodeAt(8))
              return "-webkit-" + a + a;
            if (0 < a.indexOf("image-set(", 11))
              return a.replace(ja, "$1-webkit-$2") + a;
            break;
          case 932:
            if (45 === a.charCodeAt(4))
              switch (a.charCodeAt(5)) {
                case 103:
                  return "-webkit-box-" + a.replace("-grow", "") + "-webkit-" + a + "-ms-" + a.replace("grow", "positive") + a;
                case 115:
                  return "-webkit-" + a + "-ms-" + a.replace("shrink", "negative") + a;
                case 98:
                  return "-webkit-" + a + "-ms-" + a.replace("basis", "preferred-size") + a;
              }
            return "-webkit-" + a + "-ms-" + a + a;
          case 964:
            return "-webkit-" + a + "-ms-flex-" + a + a;
          case 1023:
            if (99 !== a.charCodeAt(8))
              break;
            b = a.substring(a.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
            return "-webkit-box-pack" + b + "-webkit-" + a + "-ms-flex-pack" + b + a;
          case 1005:
            return ka.test(a) ? a.replace(aa, ":-webkit-") + a.replace(aa, ":-moz-") + a : a;
          case 1000:
            b = a.substring(13).trim();
            c = b.indexOf("-") + 1;
            switch (b.charCodeAt(0) + b.charCodeAt(c)) {
              case 226:
                b = a.replace(G, "tb");
                break;
              case 232:
                b = a.replace(G, "tb-rl");
                break;
              case 220:
                b = a.replace(G, "lr");
                break;
              default:
                return a;
            }
            return "-webkit-" + a + "-ms-" + b + a;
          case 1017:
            if (-1 === a.indexOf("sticky", 9))
              break;
          case 975:
            c = (a = d).length - 10;
            b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(":", 7) + 1).trim();
            switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
              case 203:
                if (111 > b.charCodeAt(8))
                  break;
              case 115:
                a = a.replace(b, "-webkit-" + b) + ";" + a;
                break;
              case 207:
              case 102:
                a = a.replace(b, "-webkit-" + (102 < m ? "inline-" : "") + "box") + ";" + a.replace(b, "-webkit-" + b) + ";" + a.replace(b, "-ms-" + b + "box") + ";" + a;
            }
            return a + ";";
          case 938:
            if (45 === a.charCodeAt(5))
              switch (a.charCodeAt(6)) {
                case 105:
                  return b = a.replace("-items", ""), "-webkit-" + a + "-webkit-box-" + b + "-ms-flex-" + b + a;
                case 115:
                  return "-webkit-" + a + "-ms-flex-item-" + a.replace(ba, "") + a;
                default:
                  return "-webkit-" + a + "-ms-flex-line-pack" + a.replace("align-content", "").replace(ba, "") + a;
              }
            break;
          case 973:
          case 989:
            if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4))
              break;
          case 931:
          case 953:
            if (true === la.test(d))
              return 115 === (b = d.substring(d.indexOf(":") + 1)).charCodeAt(0) ? P(d.replace("stretch", "fill-available"), c, e, h).replace(":fill-available", ":stretch") : a.replace(b, "-webkit-" + b) + a.replace(b, "-moz-" + b.replace("fill-", "")) + a;
            break;
          case 962:
            if (a = "-webkit-" + a + (102 === a.charCodeAt(5) ? "-ms-" + a : "") + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf("transform", 10))
              return a.substring(0, a.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a;
        }
        return a;
      }
      function L(d, c) {
        var e = d.indexOf(1 === c ? ":" : "{"), h = d.substring(0, 3 !== c ? e : 10);
        e = d.substring(e + 1, d.length - 1);
        return R(2 !== c ? h : h.replace(na, "$1"), e, c);
      }
      function ea(d, c) {
        var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
        return e !== c + ";" ? e.replace(oa, " or ($1)").substring(4) : "(" + c + ")";
      }
      function H(d, c, e, h, a, m, b, v, n, q) {
        for (var g = 0, x = c, w2; g < A; ++g) {
          switch (w2 = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
            case void 0:
            case false:
            case true:
            case null:
              break;
            default:
              x = w2;
          }
        }
        if (x !== c)
          return x;
      }
      function T(d) {
        switch (d) {
          case void 0:
          case null:
            A = S.length = 0;
            break;
          default:
            if ("function" === typeof d)
              S[A++] = d;
            else if ("object" === typeof d)
              for (var c = 0, e = d.length; c < e; ++c) {
                T(d[c]);
              }
            else
              Y = !!d | 0;
        }
        return T;
      }
      function U(d) {
        d = d.prefix;
        void 0 !== d && (R = null, d ? "function" !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
        return U;
      }
      function B(d, c) {
        var e = d;
        33 > e.charCodeAt(0) && (e = e.trim());
        V = e;
        e = [V];
        if (0 < A) {
          var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
          void 0 !== h && "string" === typeof h && (c = h);
        }
        var a = M(O, e, c, 0, 0);
        0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
        V = "";
        E = 0;
        z = D = 1;
        return a;
      }
      var ca = /^\0+/g, N = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q = /::(place)/g, ha = /:(read-only)/g, G = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z = 1, D = 1, E = 0, w = 1, O = [], S = [], A = 0, R = null, Y = 0, V = "";
      B.use = T;
      B.set = U;
      void 0 !== W && U(W);
      return B;
    }
    exports.default = stylis_min;
  },

  7(require, exports) {
    // node_modules/@emotion/unitless/dist/unitless.browser.cjs.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    exports.default = unitlessKeys;
  },

  5(require, exports) {
    // node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function memoize(fn) {
      var cache = {};
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    exports.default = memoize;
  },

  4(require, exports) {
    // node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var memoize = _interopDefault(require(5 /* @emotion/memoize */));
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var index = memoize(function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });
    exports.default = index;
  },

  40(require, exports, module) {
    // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
    "use strict";
    var reactIs = require(68 /* react-is */);
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  },

  83(require, exports) {
    // node_modules/styled-components/dist/styled-components.browser.cjs.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var reactIs = require(68 /* react-is */);
    var React = require(73 /* react */);
    var React__default = _interopDefault(React);
    var shallowequal = _interopDefault(require(80 /* shallowequal */));
    var Stylis = _interopDefault(require(6 /* @emotion/stylis */));
    var unitless = _interopDefault(require(7 /* @emotion/unitless */));
    var validAttr = _interopDefault(require(4 /* @emotion/is-prop-valid */));
    var hoist = _interopDefault(require(40 /* hoist-non-react-statics */));
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var interleave = function(strings, interpolations) {
      var result = [strings[0]];
      for (var i = 0, len = interpolations.length; i < len; i += 1) {
        result.push(interpolations[i], strings[i + 1]);
      }
      return result;
    };
    var isPlainObject = function(x) {
      return x !== null && typeof x === "object" && (x.toString ? x.toString() : Object.prototype.toString.call(x)) === "[object Object]" && !reactIs.typeOf(x);
    };
    var EMPTY_ARRAY = Object.freeze([]);
    var EMPTY_OBJECT = Object.freeze({});
    function isFunction(test) {
      return typeof test === "function";
    }
    function getComponentName(target) {
      return typeof target === "string" && target || target.displayName || target.name || "Component";
    }
    function isStatelessFunction(test) {
      return typeof test === "function" && !(test.prototype && test.prototype.isReactComponent);
    }
    function isStyledComponent(target) {
      return target && typeof target.styledComponentId === "string";
    }
    var SC_ATTR = typeof process !== "undefined" && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
    var SC_ATTR_ACTIVE = "active";
    var SC_ATTR_VERSION = "data-styled-version";
    var SC_VERSION = "5.1.1";
    var SPLITTER = "/*!sc*/\n";
    var IS_BROWSER = typeof window !== "undefined" && "HTMLElement" in window;
    var DISABLE_SPEEDY = typeof SC_DISABLE_SPEEDY === "boolean" && SC_DISABLE_SPEEDY || typeof process !== "undefined" && (process.env.REACT_APP_SC_DISABLE_SPEEDY || process.env.SC_DISABLE_SPEEDY) || true;
    var STATIC_EXECUTION_CONTEXT = {};
    var getNonce = function getNonce2() {
      return typeof __webpack_nonce__ !== "undefined" ? __webpack_nonce__ : null;
    };
    var errorMap = {
      "1": "Cannot create styled-component for component: %s.\n\n",
      "2": "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
      "3": "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
      "4": "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
      "5": "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
      "6": "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
      "7": 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',
      "8": 'ThemeProvider: Please make your "theme" prop an object.\n\n',
      "9": "Missing document `<head>`\n\n",
      "10": "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
      "11": "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
      "12": "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
      "13": "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",
      "14": 'ThemeProvider: "theme" prop is required.\n\n',
      "15": "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",
      "16": "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",
      "17": "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"
    };
    var ERRORS = errorMap;
    function format() {
      var a = arguments.length <= 0 ? void 0 : arguments[0];
      var b = [];
      for (var c = 1, len = arguments.length; c < len; c += 1) {
        b.push(c < 0 || arguments.length <= c ? void 0 : arguments[c]);
      }
      b.forEach(function(d) {
        a = a.replace(/%[a-z]/, d);
      });
      return a;
    }
    function throwStyledComponentsError(code) {
      for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
      }
      if (false) {
        throw new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#" + code + " for more information." + (interpolations.length > 0 ? " Additional arguments: " + interpolations.join(", ") : ""));
      } else {
        throw new Error(format.apply(void 0, [ERRORS[code]].concat(interpolations)).trim());
      }
    }
    var ELEMENT_TYPE = 1;
    var findLastStyleTag = function findLastStyleTag2(target) {
      var childNodes = target.childNodes;
      for (var i = childNodes.length; i >= 0; i--) {
        var child = childNodes[i];
        if (child && child.nodeType === ELEMENT_TYPE && child.hasAttribute(SC_ATTR)) {
          return child;
        }
      }
      return void 0;
    };
    var makeStyleTag = function makeStyleTag2(target) {
      var head = document.head;
      var parent = target || head;
      var style = document.createElement("style");
      var prevStyle = findLastStyleTag(parent);
      var nextSibling = prevStyle !== void 0 ? prevStyle.nextSibling : null;
      style.setAttribute(SC_ATTR, SC_ATTR_ACTIVE);
      style.setAttribute(SC_ATTR_VERSION, SC_VERSION);
      var nonce = getNonce();
      if (nonce)
        style.setAttribute("nonce", nonce);
      parent.insertBefore(style, nextSibling);
      return style;
    };
    var getSheet = function getSheet2(tag) {
      if (tag.sheet) {
        return tag.sheet;
      }
      var _document = document, styleSheets = _document.styleSheets;
      for (var i = 0, l = styleSheets.length; i < l; i++) {
        var sheet = styleSheets[i];
        if (sheet.ownerNode === tag) {
          return sheet;
        }
      }
      throwStyledComponentsError(17);
      return void 0;
    };
    var makeTag = function makeTag2(_ref) {
      var isServer = _ref.isServer, useCSSOMInjection = _ref.useCSSOMInjection, target = _ref.target;
      if (isServer) {
        return new VirtualTag(target);
      } else if (useCSSOMInjection) {
        return new CSSOMTag(target);
      } else {
        return new TextTag(target);
      }
    };
    var CSSOMTag = function() {
      function CSSOMTag2(target) {
        var element = this.element = makeStyleTag(target);
        element.appendChild(document.createTextNode(""));
        this.sheet = getSheet(element);
        this.length = 0;
      }
      var _proto = CSSOMTag2.prototype;
      _proto.insertRule = function insertRule(index, rule) {
        try {
          this.sheet.insertRule(rule, index);
          this.length++;
          return true;
        } catch (_error) {
          return false;
        }
      };
      _proto.deleteRule = function deleteRule(index) {
        this.sheet.deleteRule(index);
        this.length--;
      };
      _proto.getRule = function getRule(index) {
        var rule = this.sheet.cssRules[index];
        if (rule !== void 0 && typeof rule.cssText === "string") {
          return rule.cssText;
        } else {
          return "";
        }
      };
      return CSSOMTag2;
    }();
    var TextTag = function() {
      function TextTag2(target) {
        var element = this.element = makeStyleTag(target);
        this.nodes = element.childNodes;
        this.length = 0;
      }
      var _proto2 = TextTag2.prototype;
      _proto2.insertRule = function insertRule(index, rule) {
        if (index <= this.length && index >= 0) {
          var node = document.createTextNode(rule);
          var refNode = this.nodes[index];
          this.element.insertBefore(node, refNode || null);
          this.length++;
          return true;
        } else {
          return false;
        }
      };
      _proto2.deleteRule = function deleteRule(index) {
        this.element.removeChild(this.nodes[index]);
        this.length--;
      };
      _proto2.getRule = function getRule(index) {
        if (index < this.length) {
          return this.nodes[index].textContent;
        } else {
          return "";
        }
      };
      return TextTag2;
    }();
    var VirtualTag = function() {
      function VirtualTag2(_target) {
        this.rules = [];
        this.length = 0;
      }
      var _proto3 = VirtualTag2.prototype;
      _proto3.insertRule = function insertRule(index, rule) {
        if (index <= this.length) {
          this.rules.splice(index, 0, rule);
          this.length++;
          return true;
        } else {
          return false;
        }
      };
      _proto3.deleteRule = function deleteRule(index) {
        this.rules.splice(index, 1);
        this.length--;
      };
      _proto3.getRule = function getRule(index) {
        if (index < this.length) {
          return this.rules[index];
        } else {
          return "";
        }
      };
      return VirtualTag2;
    }();
    var makeGroupedTag = function makeGroupedTag2(tag) {
      return new DefaultGroupedTag(tag);
    };
    var BASE_SIZE = 1 << 9;
    var DefaultGroupedTag = function() {
      function DefaultGroupedTag2(tag) {
        this.groupSizes = new Uint32Array(BASE_SIZE);
        this.length = BASE_SIZE;
        this.tag = tag;
      }
      var _proto = DefaultGroupedTag2.prototype;
      _proto.indexOfGroup = function indexOfGroup(group) {
        var index = 0;
        for (var i = 0; i < group; i++) {
          index += this.groupSizes[i];
        }
        return index;
      };
      _proto.insertRules = function insertRules(group, rules) {
        if (group >= this.groupSizes.length) {
          var oldBuffer = this.groupSizes;
          var oldSize = oldBuffer.length;
          var newSize = oldSize;
          while (group >= newSize) {
            newSize <<= 1;
            if (newSize < 0) {
              throwStyledComponentsError(16, "" + group);
            }
          }
          this.groupSizes = new Uint32Array(newSize);
          this.groupSizes.set(oldBuffer);
          this.length = newSize;
          for (var i = oldSize; i < newSize; i++) {
            this.groupSizes[i] = 0;
          }
        }
        var ruleIndex = this.indexOfGroup(group + 1);
        for (var _i = 0, l = rules.length; _i < l; _i++) {
          if (this.tag.insertRule(ruleIndex, rules[_i])) {
            this.groupSizes[group]++;
            ruleIndex++;
          }
        }
      };
      _proto.clearGroup = function clearGroup(group) {
        if (group < this.length) {
          var length = this.groupSizes[group];
          var startIndex = this.indexOfGroup(group);
          var endIndex = startIndex + length;
          this.groupSizes[group] = 0;
          for (var i = startIndex; i < endIndex; i++) {
            this.tag.deleteRule(startIndex);
          }
        }
      };
      _proto.getGroup = function getGroup(group) {
        var css2 = "";
        if (group >= this.length || this.groupSizes[group] === 0) {
          return css2;
        }
        var length = this.groupSizes[group];
        var startIndex = this.indexOfGroup(group);
        var endIndex = startIndex + length;
        for (var i = startIndex; i < endIndex; i++) {
          css2 += "" + this.tag.getRule(i) + SPLITTER;
        }
        return css2;
      };
      return DefaultGroupedTag2;
    }();
    var MAX_SMI = 1 << 31 - 1;
    var groupIDRegister = new Map();
    var reverseRegister = new Map();
    var nextFreeGroup = 1;
    var getGroupForId = function getGroupForId2(id) {
      if (groupIDRegister.has(id)) {
        return groupIDRegister.get(id);
      }
      var group = nextFreeGroup++;
      if ((group | 0) < 0 || group > MAX_SMI) {
        throwStyledComponentsError(16, "" + group);
      }
      groupIDRegister.set(id, group);
      reverseRegister.set(group, id);
      return group;
    };
    var getIdForGroup = function getIdForGroup2(group) {
      return reverseRegister.get(group);
    };
    var setGroupForId = function setGroupForId2(id, group) {
      if (group >= nextFreeGroup) {
        nextFreeGroup = group + 1;
      }
      groupIDRegister.set(id, group);
      reverseRegister.set(group, id);
    };
    var SELECTOR = "style[" + SC_ATTR + "][" + SC_ATTR_VERSION + '="' + SC_VERSION + '"]';
    var MARKER_RE = new RegExp("^" + SC_ATTR + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
    var outputSheet = function outputSheet2(sheet) {
      var tag = sheet.getTag();
      var length = tag.length;
      var css2 = "";
      for (var group = 0; group < length; group++) {
        var id = getIdForGroup(group);
        if (id === void 0)
          continue;
        var names = sheet.names.get(id);
        var rules = tag.getGroup(group);
        if (names === void 0 || rules.length === 0)
          continue;
        var selector = SC_ATTR + ".g" + group + '[id="' + id + '"]';
        var content = "";
        if (names !== void 0) {
          names.forEach(function(name) {
            if (name.length > 0) {
              content += name + ",";
            }
          });
        }
        css2 += "" + rules + selector + '{content:"' + content + '"}' + SPLITTER;
      }
      return css2;
    };
    var rehydrateNamesFromContent = function rehydrateNamesFromContent2(sheet, id, content) {
      var names = content.split(",");
      var name;
      for (var i = 0, l = names.length; i < l; i++) {
        if (name = names[i]) {
          sheet.registerName(id, name);
        }
      }
    };
    var rehydrateSheetFromTag = function rehydrateSheetFromTag2(sheet, style) {
      var parts = style.innerHTML.split(SPLITTER);
      var rules = [];
      for (var i = 0, l = parts.length; i < l; i++) {
        var part = parts[i].trim();
        if (!part)
          continue;
        var marker = part.match(MARKER_RE);
        if (marker) {
          var group = parseInt(marker[1], 10) | 0;
          var id = marker[2];
          if (group !== 0) {
            setGroupForId(id, group);
            rehydrateNamesFromContent(sheet, id, marker[3]);
            sheet.getTag().insertRules(group, rules);
          }
          rules.length = 0;
        } else {
          rules.push(part);
        }
      }
    };
    var rehydrateSheet = function rehydrateSheet2(sheet) {
      var nodes = document.querySelectorAll(SELECTOR);
      for (var i = 0, l = nodes.length; i < l; i++) {
        var node = nodes[i];
        if (node && node.getAttribute(SC_ATTR) !== SC_ATTR_ACTIVE) {
          rehydrateSheetFromTag(sheet, node);
          if (node.parentNode) {
            node.parentNode.removeChild(node);
          }
        }
      }
    };
    var SHOULD_REHYDRATE = IS_BROWSER;
    var defaultOptions = {
      isServer: !IS_BROWSER,
      useCSSOMInjection: !DISABLE_SPEEDY
    };
    var StyleSheet = function() {
      StyleSheet2.registerId = function registerId(id) {
        return getGroupForId(id);
      };
      function StyleSheet2(options, globalStyles, names) {
        if (options === void 0) {
          options = defaultOptions;
        }
        if (globalStyles === void 0) {
          globalStyles = {};
        }
        this.options = _extends({}, defaultOptions, {}, options);
        this.gs = globalStyles;
        this.names = new Map(names);
        if (!this.options.isServer && IS_BROWSER && SHOULD_REHYDRATE) {
          SHOULD_REHYDRATE = false;
          rehydrateSheet(this);
        }
      }
      var _proto = StyleSheet2.prototype;
      _proto.reconstructWithOptions = function reconstructWithOptions(options) {
        return new StyleSheet2(_extends({}, this.options, {}, options), this.gs, this.names);
      };
      _proto.allocateGSInstance = function allocateGSInstance(id) {
        return this.gs[id] = (this.gs[id] || 0) + 1;
      };
      _proto.getTag = function getTag() {
        return this.tag || (this.tag = makeGroupedTag(makeTag(this.options)));
      };
      _proto.hasNameForId = function hasNameForId(id, name) {
        return this.names.has(id) && this.names.get(id).has(name);
      };
      _proto.registerName = function registerName(id, name) {
        getGroupForId(id);
        if (!this.names.has(id)) {
          var groupNames = new Set();
          groupNames.add(name);
          this.names.set(id, groupNames);
        } else {
          this.names.get(id).add(name);
        }
      };
      _proto.insertRules = function insertRules(id, name, rules) {
        this.registerName(id, name);
        this.getTag().insertRules(getGroupForId(id), rules);
      };
      _proto.clearNames = function clearNames(id) {
        if (this.names.has(id)) {
          this.names.get(id).clear();
        }
      };
      _proto.clearRules = function clearRules(id) {
        this.getTag().clearGroup(getGroupForId(id));
        this.clearNames(id);
      };
      _proto.clearTag = function clearTag() {
        this.tag = void 0;
      };
      _proto.toString = function toString() {
        return outputSheet(this);
      };
      return StyleSheet2;
    }();
    var SEED = 5381;
    var phash = function phash2(h, x) {
      var i = x.length;
      while (i) {
        h = h * 33 ^ x.charCodeAt(--i);
      }
      return h;
    };
    var hash = function hash2(x) {
      return phash(SEED, x);
    };
    function insertRulePlugin(insertRule) {
      var delimiter = "/*|*/";
      var needle = delimiter + "}";
      function toSheet(block) {
        if (block) {
          try {
            insertRule(block + "}");
          } catch (e) {
          }
        }
      }
      return function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
        switch (context) {
          case 1:
            if (depth === 0 && content.charCodeAt(0) === 64)
              return insertRule(content + ";"), "";
            break;
          case 2:
            if (ns === 0)
              return content + delimiter;
            break;
          case 3:
            switch (ns) {
              case 102:
              case 112:
                return insertRule(selectors[0] + content), "";
              default:
                return content + (at === 0 ? delimiter : "");
            }
          case -2:
            content.split(needle).forEach(toSheet);
        }
      };
    }
    var COMMENT_REGEX = /^\s*\/\/.*$/gm;
    function createStylisInstance(_temp) {
      var _ref = _temp === void 0 ? EMPTY_OBJECT : _temp, _ref$options = _ref.options, options = _ref$options === void 0 ? EMPTY_OBJECT : _ref$options, _ref$plugins = _ref.plugins, plugins = _ref$plugins === void 0 ? EMPTY_ARRAY : _ref$plugins;
      var stylis = new Stylis(options);
      var parsingRules = [];
      var returnRulesPlugin = function returnRulesPlugin2(context) {
        if (context === -2) {
          var parsedRules = parsingRules;
          parsingRules = [];
          return parsedRules;
        }
      };
      var parseRulesPlugin = insertRulePlugin(function(rule) {
        parsingRules.push(rule);
      });
      var _componentId;
      var _selector;
      var _selectorRegexp;
      var selfReferenceReplacer = function selfReferenceReplacer2(match, offset, string) {
        if (offset > 0 && string.slice(0, offset).indexOf(_selector) !== -1 && string.slice(offset - _selector.length, offset) !== _selector) {
          return "." + _componentId;
        }
        return match;
      };
      var selfReferenceReplacementPlugin = function selfReferenceReplacementPlugin2(context, _, selectors) {
        if (context === 2 && selectors.length && selectors[0].lastIndexOf(_selector) > 0) {
          selectors[0] = selectors[0].replace(_selectorRegexp, selfReferenceReplacer);
        }
      };
      stylis.use([].concat(plugins, [selfReferenceReplacementPlugin, parseRulesPlugin, returnRulesPlugin]));
      function stringifyRules(css2, selector, prefix, componentId) {
        if (componentId === void 0) {
          componentId = "&";
        }
        var flatCSS = css2.replace(COMMENT_REGEX, "");
        var cssStr = selector && prefix ? prefix + " " + selector + " { " + flatCSS + " }" : flatCSS;
        _componentId = componentId;
        _selector = selector;
        _selectorRegexp = new RegExp("\\" + _selector + "\\b", "g");
        return stylis(prefix || !selector ? "" : selector, cssStr);
      }
      stringifyRules.hash = plugins.length ? plugins.reduce(function(acc, plugin) {
        if (!plugin.name) {
          throwStyledComponentsError(15);
        }
        return phash(acc, plugin.name);
      }, SEED).toString() : "";
      return stringifyRules;
    }
    var StyleSheetContext = React__default.createContext();
    var StyleSheetConsumer = StyleSheetContext.Consumer;
    var StylisContext = React__default.createContext();
    var StylisConsumer = StylisContext.Consumer;
    var masterSheet = new StyleSheet();
    var masterStylis = createStylisInstance();
    function useStyleSheet() {
      return React.useContext(StyleSheetContext) || masterSheet;
    }
    function useStylis() {
      return React.useContext(StylisContext) || masterStylis;
    }
    function StyleSheetManager(props) {
      var _useState = React.useState(props.stylisPlugins), plugins = _useState[0], setPlugins = _useState[1];
      var contextStyleSheet = useStyleSheet();
      var styleSheet = React.useMemo(function() {
        var sheet = contextStyleSheet;
        if (props.sheet) {
          sheet = props.sheet;
        } else if (props.target) {
          sheet = sheet.reconstructWithOptions({
            target: props.target
          });
        }
        if (props.disableCSSOMInjection) {
          sheet = sheet.reconstructWithOptions({
            useCSSOMInjection: false
          });
        }
        return sheet;
      }, [props.disableCSSOMInjection, props.sheet, props.target]);
      var stylis = React.useMemo(function() {
        return createStylisInstance({
          options: {
            prefix: !props.disableVendorPrefixes
          },
          plugins
        });
      }, [props.disableVendorPrefixes, plugins]);
      React.useEffect(function() {
        if (!shallowequal(plugins, props.stylisPlugins))
          setPlugins(props.stylisPlugins);
      }, [props.stylisPlugins]);
      return React__default.createElement(StyleSheetContext.Provider, {
        value: styleSheet
      }, React__default.createElement(StylisContext.Provider, {
        value: stylis
      }, React__default.Children.only(props.children)));
    }
    var Keyframes = function() {
      function Keyframes2(name, stringifyArgs) {
        var _this = this;
        this.inject = function(styleSheet) {
          if (!styleSheet.hasNameForId(_this.id, _this.name)) {
            styleSheet.insertRules(_this.id, _this.name, masterStylis.apply(void 0, _this.stringifyArgs));
          }
        };
        this.toString = function() {
          return throwStyledComponentsError(12, String(_this.name));
        };
        this.name = name;
        this.id = "sc-keyframes-" + name;
        this.stringifyArgs = stringifyArgs;
      }
      var _proto = Keyframes2.prototype;
      _proto.getName = function getName() {
        return this.name;
      };
      return Keyframes2;
    }();
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    function hyphenateStyleName(string) {
      return string.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    function addUnitIfNeeded(name, value) {
      if (value == null || typeof value === "boolean" || value === "") {
        return "";
      }
      if (typeof value === "number" && value !== 0 && !(name in unitless)) {
        return value + "px";
      }
      return String(value).trim();
    }
    var isFalsish = function isFalsish2(chunk) {
      return chunk === void 0 || chunk === null || chunk === false || chunk === "";
    };
    var objToCssArray = function objToCssArray2(obj, prevKey) {
      var rules = [];
      var keys = Object.keys(obj);
      keys.forEach(function(key) {
        if (!isFalsish(obj[key])) {
          if (isPlainObject(obj[key])) {
            rules.push.apply(rules, objToCssArray2(obj[key], key));
            return rules;
          } else if (isFunction(obj[key])) {
            rules.push(hyphenateStyleName(key) + ":", obj[key], ";");
            return rules;
          }
          rules.push(hyphenateStyleName(key) + ": " + addUnitIfNeeded(key, obj[key]) + ";");
        }
        return rules;
      });
      return prevKey ? [prevKey + " {"].concat(rules, ["}"]) : rules;
    };
    function flatten(chunk, executionContext, styleSheet) {
      if (Array.isArray(chunk)) {
        var ruleSet = [];
        for (var i = 0, len = chunk.length, result; i < len; i += 1) {
          result = flatten(chunk[i], executionContext, styleSheet);
          if (result === "")
            continue;
          else if (Array.isArray(result))
            ruleSet.push.apply(ruleSet, result);
          else
            ruleSet.push(result);
        }
        return ruleSet;
      }
      if (isFalsish(chunk)) {
        return "";
      }
      if (isStyledComponent(chunk)) {
        return "." + chunk.styledComponentId;
      }
      if (isFunction(chunk)) {
        if (isStatelessFunction(chunk) && executionContext) {
          var _result = chunk(executionContext);
          if (reactIs.isElement(_result)) {
            console.warn(getComponentName(chunk) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.");
          }
          return flatten(_result, executionContext, styleSheet);
        } else
          return chunk;
      }
      if (chunk instanceof Keyframes) {
        if (styleSheet) {
          chunk.inject(styleSheet);
          return chunk.getName();
        } else
          return chunk;
      }
      return isPlainObject(chunk) ? objToCssArray(chunk) : chunk.toString();
    }
    function css(styles) {
      for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
      }
      if (isFunction(styles) || isPlainObject(styles)) {
        return flatten(interleave(EMPTY_ARRAY, [styles].concat(interpolations)));
      }
      if (interpolations.length === 0 && styles.length === 1 && typeof styles[0] === "string") {
        return styles;
      }
      return flatten(interleave(styles, interpolations));
    }
    function constructWithOptions(componentConstructor, tag, options) {
      if (options === void 0) {
        options = EMPTY_OBJECT;
      }
      if (!reactIs.isValidElementType(tag)) {
        return throwStyledComponentsError(1, String(tag));
      }
      var templateFunction = function templateFunction2() {
        return componentConstructor(tag, options, css.apply(void 0, arguments));
      };
      templateFunction.withConfig = function(config) {
        return constructWithOptions(componentConstructor, tag, _extends({}, options, {}, config));
      };
      templateFunction.attrs = function(attrs) {
        return constructWithOptions(componentConstructor, tag, _extends({}, options, {
          attrs: Array.prototype.concat(options.attrs, attrs).filter(Boolean)
        }));
      };
      return templateFunction;
    }
    var isObject = function isObject2(val) {
      return typeof val === "function" || typeof val === "object" && val !== null && !Array.isArray(val);
    };
    var isValidKey = function isValidKey2(key) {
      return key !== "__proto__" && key !== "constructor" && key !== "prototype";
    };
    function mixin(target, val, key) {
      var obj = target[key];
      if (isObject(val) && isObject(obj)) {
        mixinDeep(obj, val);
      } else {
        target[key] = val;
      }
    }
    function mixinDeep(target) {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }
      for (var _i = 0, _rest = rest; _i < _rest.length; _i++) {
        var obj = _rest[_i];
        if (isObject(obj)) {
          for (var key in obj) {
            if (isValidKey(key)) {
              mixin(target, obj[key], key);
            }
          }
        }
      }
      return target;
    }
    var AD_REPLACER_R = /(a)(d)/gi;
    var charsLength = 52;
    var getAlphabeticChar = function getAlphabeticChar2(code) {
      return String.fromCharCode(code + (code > 25 ? 39 : 97));
    };
    function generateAlphabeticName(code) {
      var name = "";
      var x;
      for (x = Math.abs(code); x > charsLength; x = x / charsLength | 0) {
        name = getAlphabeticChar(x % charsLength) + name;
      }
      return (getAlphabeticChar(x % charsLength) + name).replace(AD_REPLACER_R, "$1-$2");
    }
    function isStaticRules(rules) {
      for (var i = 0; i < rules.length; i += 1) {
        var rule = rules[i];
        if (isFunction(rule) && !isStyledComponent(rule)) {
          return false;
        }
      }
      return true;
    }
    var ComponentStyle = function() {
      function ComponentStyle2(rules, componentId) {
        this.rules = rules;
        this.staticRulesId = "";
        this.isStatic = false;
        this.componentId = componentId;
        this.baseHash = hash(componentId);
        StyleSheet.registerId(componentId);
      }
      var _proto = ComponentStyle2.prototype;
      _proto.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet, stylis) {
        var componentId = this.componentId;
        if (this.isStatic && !stylis.hash) {
          if (this.staticRulesId && styleSheet.hasNameForId(componentId, this.staticRulesId)) {
            return this.staticRulesId;
          }
          var cssStatic = flatten(this.rules, executionContext, styleSheet).join("");
          var name = generateAlphabeticName(phash(this.baseHash, cssStatic.length) >>> 0);
          if (!styleSheet.hasNameForId(componentId, name)) {
            var cssStaticFormatted = stylis(cssStatic, "." + name, void 0, componentId);
            styleSheet.insertRules(componentId, name, cssStaticFormatted);
          }
          this.staticRulesId = name;
          return name;
        } else {
          var length = this.rules.length;
          var dynamicHash = phash(this.baseHash, stylis.hash);
          var css2 = "";
          for (var i = 0; i < length; i++) {
            var partRule = this.rules[i];
            if (typeof partRule === "string") {
              css2 += partRule;
              if (true)
                dynamicHash = phash(dynamicHash, partRule + i);
            } else {
              var partChunk = flatten(partRule, executionContext, styleSheet);
              var partString = Array.isArray(partChunk) ? partChunk.join("") : partChunk;
              dynamicHash = phash(dynamicHash, partString + i);
              css2 += partString;
            }
          }
          var _name = generateAlphabeticName(dynamicHash >>> 0);
          if (!styleSheet.hasNameForId(componentId, _name)) {
            var cssFormatted = stylis(css2, "." + _name, void 0, componentId);
            styleSheet.insertRules(componentId, _name, cssFormatted);
          }
          return _name;
        }
      };
      return ComponentStyle2;
    }();
    var LIMIT = 200;
    var createWarnTooManyClasses = function(displayName, componentId) {
      var generatedClasses = {};
      var warningSeen = false;
      return function(className) {
        if (!warningSeen) {
          generatedClasses[className] = true;
          if (Object.keys(generatedClasses).length >= LIMIT) {
            var parsedIdString = componentId ? ' with the id of "' + componentId + '"' : "";
            console.warn("Over " + LIMIT + " classes were generated for component " + displayName + parsedIdString + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />");
            warningSeen = true;
            generatedClasses = {};
          }
        }
      };
    };
    var invalidHookCallRe = /invalid hook call/i;
    var seen = new Set();
    var checkDynamicCreation = function checkDynamicCreation2(displayName, componentId) {
      if (true) {
        var parsedIdString = componentId ? ' with the id of "' + componentId + '"' : "";
        var message = "The component " + displayName + parsedIdString + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.";
        try {
          React.useRef();
          if (!seen.has(message)) {
            console.warn(message);
            seen.add(message);
          }
        } catch (error) {
          if (invalidHookCallRe.test(error.message)) {
            seen["delete"](message);
          }
        }
      }
    };
    var determineTheme = function(props, providedTheme, defaultProps) {
      if (defaultProps === void 0) {
        defaultProps = EMPTY_OBJECT;
      }
      return props.theme !== defaultProps.theme && props.theme || providedTheme || defaultProps.theme;
    };
    var escapeRegex = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
    var dashesAtEnds = /(^-|-$)/g;
    function escape(str) {
      return str.replace(escapeRegex, "-").replace(dashesAtEnds, "");
    }
    function isTag(target) {
      return typeof target === "string" && target.charAt(0) === target.charAt(0).toLowerCase();
    }
    function generateDisplayName(target) {
      return isTag(target) ? "styled." + target : "Styled(" + getComponentName(target) + ")";
    }
    var generateComponentId = function(str) {
      return generateAlphabeticName(hash(str) >>> 0);
    };
    function joinStrings(a, b) {
      return a && b ? a + " " + b : a || b;
    }
    var ThemeContext = React__default.createContext();
    var ThemeConsumer = ThemeContext.Consumer;
    function mergeTheme(theme, outerTheme) {
      if (!theme) {
        return throwStyledComponentsError(14);
      }
      if (isFunction(theme)) {
        var mergedTheme = theme(outerTheme);
        if (mergedTheme === null || Array.isArray(mergedTheme) || typeof mergedTheme !== "object") {
          return throwStyledComponentsError(7);
        }
        return mergedTheme;
      }
      if (Array.isArray(theme) || typeof theme !== "object") {
        return throwStyledComponentsError(8);
      }
      return outerTheme ? _extends({}, outerTheme, {}, theme) : theme;
    }
    function ThemeProvider(props) {
      var outerTheme = React.useContext(ThemeContext);
      var themeContext = React.useMemo(function() {
        return mergeTheme(props.theme, outerTheme);
      }, [props.theme, outerTheme]);
      if (!props.children) {
        return null;
      }
      return React__default.createElement(ThemeContext.Provider, {
        value: themeContext
      }, props.children);
    }
    var identifiers = {};
    function generateId(displayName, parentComponentId) {
      var name = typeof displayName !== "string" ? "sc" : escape(displayName);
      identifiers[name] = (identifiers[name] || 0) + 1;
      var componentId = name + "-" + generateComponentId(name + identifiers[name]);
      return parentComponentId ? parentComponentId + "-" + componentId : componentId;
    }
    function useResolvedAttrs(theme, props, attrs) {
      if (theme === void 0) {
        theme = EMPTY_OBJECT;
      }
      var context = _extends({}, props, {
        theme
      });
      var resolvedAttrs = {};
      attrs.forEach(function(attrDef) {
        var resolvedAttrDef = attrDef;
        var key;
        if (isFunction(resolvedAttrDef)) {
          resolvedAttrDef = resolvedAttrDef(context);
        }
        for (key in resolvedAttrDef) {
          context[key] = resolvedAttrs[key] = key === "className" ? joinStrings(resolvedAttrs[key], resolvedAttrDef[key]) : resolvedAttrDef[key];
        }
      });
      return [context, resolvedAttrs];
    }
    function useInjectedStyle(componentStyle, hasAttrs, resolvedAttrs, warnTooManyClasses) {
      var styleSheet = useStyleSheet();
      var stylis = useStylis();
      var isStatic = componentStyle.isStatic && !hasAttrs;
      var className = isStatic ? componentStyle.generateAndInjectStyles(EMPTY_OBJECT, styleSheet, stylis) : componentStyle.generateAndInjectStyles(resolvedAttrs, styleSheet, stylis);
      React.useDebugValue(className);
      if (!isStatic && warnTooManyClasses) {
        warnTooManyClasses(className);
      }
      return className;
    }
    function useStyledComponentImpl(forwardedComponent, props, forwardedRef) {
      var componentAttrs = forwardedComponent.attrs, componentStyle = forwardedComponent.componentStyle, defaultProps = forwardedComponent.defaultProps, foldedComponentIds = forwardedComponent.foldedComponentIds, shouldForwardProp = forwardedComponent.shouldForwardProp, styledComponentId = forwardedComponent.styledComponentId, target = forwardedComponent.target;
      React.useDebugValue(styledComponentId);
      var theme = determineTheme(props, React.useContext(ThemeContext), defaultProps);
      var _useResolvedAttrs = useResolvedAttrs(theme || EMPTY_OBJECT, props, componentAttrs), context = _useResolvedAttrs[0], attrs = _useResolvedAttrs[1];
      var generatedClassName = useInjectedStyle(componentStyle, componentAttrs.length > 0, context, forwardedComponent.warnTooManyClasses);
      var refToForward = forwardedRef;
      var elementToBeCreated = attrs.$as || props.$as || attrs.as || props.as || target;
      var isTargetTag = isTag(elementToBeCreated);
      var computedProps = attrs !== props ? _extends({}, props, {}, attrs) : props;
      var propFilterFn = shouldForwardProp || isTargetTag && validAttr;
      var propsForElement = {};
      for (var key in computedProps) {
        if (key[0] === "$" || key === "as")
          continue;
        else if (key === "forwardedAs") {
          propsForElement.as = computedProps[key];
        } else if (!propFilterFn || propFilterFn(key, validAttr)) {
          propsForElement[key] = computedProps[key];
        }
      }
      if (props.style && attrs.style !== props.style) {
        propsForElement.style = _extends({}, props.style, {}, attrs.style);
      }
      propsForElement.className = Array.prototype.concat(foldedComponentIds, styledComponentId, generatedClassName !== styledComponentId ? generatedClassName : null, props.className, attrs.className).filter(Boolean).join(" ");
      propsForElement.ref = refToForward;
      return React.createElement(elementToBeCreated, propsForElement);
    }
    function createStyledComponent(target, options, rules) {
      var isTargetStyledComp = isStyledComponent(target);
      var isCompositeComponent = !isTag(target);
      var _options$displayName = options.displayName, displayName = _options$displayName === void 0 ? generateDisplayName(target) : _options$displayName, _options$componentId = options.componentId, componentId = _options$componentId === void 0 ? generateId(options.displayName, options.parentComponentId) : _options$componentId, _options$attrs = options.attrs, attrs = _options$attrs === void 0 ? EMPTY_ARRAY : _options$attrs;
      var styledComponentId = options.displayName && options.componentId ? escape(options.displayName) + "-" + options.componentId : options.componentId || componentId;
      var finalAttrs = isTargetStyledComp && target.attrs ? Array.prototype.concat(target.attrs, attrs).filter(Boolean) : attrs;
      var shouldForwardProp = options.shouldForwardProp;
      if (isTargetStyledComp && target.shouldForwardProp) {
        if (shouldForwardProp) {
          shouldForwardProp = function shouldForwardProp2(prop, filterFn) {
            return target.shouldForwardProp(prop, filterFn) && options.shouldForwardProp(prop, filterFn);
          };
        } else {
          shouldForwardProp = target.shouldForwardProp;
        }
      }
      var componentStyle = new ComponentStyle(isTargetStyledComp ? target.componentStyle.rules.concat(rules) : rules, styledComponentId);
      var WrappedStyledComponent;
      var forwardRef = function forwardRef2(props, ref) {
        return useStyledComponentImpl(WrappedStyledComponent, props, ref);
      };
      forwardRef.displayName = displayName;
      WrappedStyledComponent = React__default.forwardRef(forwardRef);
      WrappedStyledComponent.attrs = finalAttrs;
      WrappedStyledComponent.componentStyle = componentStyle;
      WrappedStyledComponent.displayName = displayName;
      WrappedStyledComponent.shouldForwardProp = shouldForwardProp;
      WrappedStyledComponent.foldedComponentIds = isTargetStyledComp ? Array.prototype.concat(target.foldedComponentIds, target.styledComponentId) : EMPTY_ARRAY;
      WrappedStyledComponent.styledComponentId = styledComponentId;
      WrappedStyledComponent.target = isTargetStyledComp ? target.target : target;
      WrappedStyledComponent.withComponent = function withComponent(tag) {
        var previousComponentId = options.componentId, optionsToCopy = _objectWithoutPropertiesLoose(options, ["componentId"]);
        var newComponentId = previousComponentId && previousComponentId + "-" + (isTag(tag) ? tag : escape(getComponentName(tag)));
        var newOptions = _extends({}, optionsToCopy, {
          attrs: finalAttrs,
          componentId: newComponentId
        });
        return createStyledComponent(tag, newOptions, rules);
      };
      Object.defineProperty(WrappedStyledComponent, "defaultProps", {
        get: function get() {
          return this._foldedDefaultProps;
        },
        set: function set(obj) {
          this._foldedDefaultProps = isTargetStyledComp ? mixinDeep({}, target.defaultProps, obj) : obj;
        }
      });
      if (true) {
        checkDynamicCreation(displayName, styledComponentId);
        WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName, styledComponentId);
      }
      WrappedStyledComponent.toString = function() {
        return "." + WrappedStyledComponent.styledComponentId;
      };
      if (isCompositeComponent) {
        hoist(WrappedStyledComponent, target, {
          attrs: true,
          componentStyle: true,
          displayName: true,
          foldedComponentIds: true,
          shouldForwardProp: true,
          self: true,
          styledComponentId: true,
          target: true,
          withComponent: true
        });
      }
      return WrappedStyledComponent;
    }
    var domElements = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
    var styled = function styled2(tag) {
      return constructWithOptions(createStyledComponent, tag);
    };
    domElements.forEach(function(domElement) {
      styled[domElement] = styled(domElement);
    });
    var GlobalStyle = function() {
      function GlobalStyle2(rules, componentId) {
        this.rules = rules;
        this.componentId = componentId;
        this.isStatic = isStaticRules(rules);
      }
      var _proto = GlobalStyle2.prototype;
      _proto.createStyles = function createStyles(instance, executionContext, styleSheet, stylis) {
        var flatCSS = flatten(this.rules, executionContext, styleSheet);
        var css2 = stylis(flatCSS.join(""), "");
        var id = this.componentId + instance;
        styleSheet.insertRules(id, id, css2);
      };
      _proto.removeStyles = function removeStyles(instance, styleSheet) {
        styleSheet.clearRules(this.componentId + instance);
      };
      _proto.renderStyles = function renderStyles(instance, executionContext, styleSheet, stylis) {
        StyleSheet.registerId(this.componentId + instance);
        this.removeStyles(instance, styleSheet);
        this.createStyles(instance, executionContext, styleSheet, stylis);
      };
      return GlobalStyle2;
    }();
    function createGlobalStyle(strings) {
      for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
      }
      var rules = css.apply(void 0, [strings].concat(interpolations));
      var styledComponentId = "sc-global-" + generateComponentId(JSON.stringify(rules));
      var globalStyle = new GlobalStyle(rules, styledComponentId);
      if (true) {
        checkDynamicCreation(styledComponentId);
      }
      function GlobalStyleComponent(props) {
        var styleSheet = useStyleSheet();
        var stylis = useStylis();
        var theme = React.useContext(ThemeContext);
        var instanceRef = React.useRef(null);
        if (instanceRef.current === null) {
          instanceRef.current = styleSheet.allocateGSInstance(styledComponentId);
        }
        var instance = instanceRef.current;
        if (React__default.Children.count(props.children)) {
          console.warn("The global style component " + styledComponentId + " was given child JSX. createGlobalStyle does not render children.");
        }
        if (rules.some(function(rule) {
          return typeof rule === "string" && rule.indexOf("@import") !== -1;
        })) {
          console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app.");
        }
        if (globalStyle.isStatic) {
          globalStyle.renderStyles(instance, STATIC_EXECUTION_CONTEXT, styleSheet, stylis);
        } else {
          var context = _extends({}, props, {
            theme: determineTheme(props, theme, GlobalStyleComponent.defaultProps)
          });
          globalStyle.renderStyles(instance, context, styleSheet, stylis);
        }
        React.useEffect(function() {
          return function() {
            return globalStyle.removeStyles(instance, styleSheet);
          };
        }, EMPTY_ARRAY);
        return null;
      }
      return React__default.memo(GlobalStyleComponent);
    }
    function keyframes(strings) {
      if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
        console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");
      }
      for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
      }
      var rules = css.apply(void 0, [strings].concat(interpolations)).join("");
      var name = generateComponentId(rules);
      return new Keyframes(name, [rules, name, "@keyframes"]);
    }
    var ServerStyleSheet = function() {
      function ServerStyleSheet2() {
        var _this = this;
        this._emitSheetCSS = function() {
          var css2 = _this.instance.toString();
          var nonce = getNonce();
          var attrs = [nonce && 'nonce="' + nonce + '"', SC_ATTR + '="true"', SC_ATTR_VERSION + '="' + SC_VERSION + '"'];
          var htmlAttr = attrs.filter(Boolean).join(" ");
          return "<style " + htmlAttr + ">" + css2 + "</style>";
        };
        this.getStyleTags = function() {
          if (_this.sealed) {
            return throwStyledComponentsError(2);
          }
          return _this._emitSheetCSS();
        };
        this.getStyleElement = function() {
          var _props;
          if (_this.sealed) {
            return throwStyledComponentsError(2);
          }
          var props = (_props = {}, _props[SC_ATTR] = "", _props[SC_ATTR_VERSION] = SC_VERSION, _props.dangerouslySetInnerHTML = {
            __html: _this.instance.toString()
          }, _props);
          var nonce = getNonce();
          if (nonce) {
            props.nonce = nonce;
          }
          return [React__default.createElement("style", _extends({}, props, {
            key: "sc-0-0"
          }))];
        };
        this.seal = function() {
          _this.sealed = true;
        };
        this.instance = new StyleSheet({
          isServer: true
        });
        this.sealed = false;
      }
      var _proto = ServerStyleSheet2.prototype;
      _proto.collectStyles = function collectStyles(children) {
        if (this.sealed) {
          return throwStyledComponentsError(2);
        }
        return React__default.createElement(StyleSheetManager, {
          sheet: this.instance
        }, children);
      };
      _proto.interleaveWithNodeStream = function interleaveWithNodeStream(input) {
        {
          return throwStyledComponentsError(3);
        }
      };
      return ServerStyleSheet2;
    }();
    var withTheme = function(Component) {
      var WithTheme = React__default.forwardRef(function(props, ref) {
        var theme = React.useContext(ThemeContext);
        var defaultProps = Component.defaultProps;
        var themeProp = determineTheme(props, theme, defaultProps);
        if (themeProp === void 0) {
          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "' + getComponentName(Component) + '"');
        }
        return React__default.createElement(Component, _extends({}, props, {
          theme: themeProp,
          ref
        }));
      });
      hoist(WithTheme, Component);
      WithTheme.displayName = "WithTheme(" + getComponentName(Component) + ")";
      return WithTheme;
    };
    var useTheme = function useTheme2() {
      return React.useContext(ThemeContext);
    };
    var __PRIVATE__ = {
      StyleSheet,
      masterSheet
    };
    var version = "5.1.1";
    if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
      console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native");
    }
    if (typeof window !== "undefined") {
      window["__styled-components-init__"] = window["__styled-components-init__"] || 0;
      if (window["__styled-components-init__"] === 1) {
        console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles not rendering properly, errors happening during rehydration process, missing theme prop, and makes your application bigger without a good reason.\n\nSee https://s-c.sh/2BAXzed for more info.");
      }
      window["__styled-components-init__"] += 1;
    }
    exports.ServerStyleSheet = ServerStyleSheet;
    exports.StyleSheetConsumer = StyleSheetConsumer;
    exports.StyleSheetContext = StyleSheetContext;
    exports.StyleSheetManager = StyleSheetManager;
    exports.ThemeConsumer = ThemeConsumer;
    exports.ThemeContext = ThemeContext;
    exports.ThemeProvider = ThemeProvider;
    exports.__PRIVATE__ = __PRIVATE__;
    exports.createGlobalStyle = createGlobalStyle;
    exports.css = css;
    exports.default = styled;
    exports.isStyledComponent = isStyledComponent;
    exports.keyframes = keyframes;
    exports.useTheme = useTheme;
    exports.version = version;
    exports.withTheme = withTheme;
  },

  84(require, App) {
    // src/constants.js
    const CARD_SIZE = 200;
    const lightTheme = {
      padding: 8,
      background: "#F0F0F0",
      foreground: "white",
      textPrimary: "rgba(0,0,0,1)",
      textSecondary: "rgba(0,0,0,0.6)",
      border: "rgba(0,0,0,0.25)",
      header: 0.8,
      body: 1
    };
    const darkTheme = {
      padding: 8,
      background: "#000000",
      foreground: "#1e1e1e",
      textPrimary: "rgba(255,255,255,1)",
      textSecondary: "rgba(255,255,255.6)",
      border: "rgba(255,255,255,0.25)",
      header: 0.8,
      body: 1
    };
    const DEFAULT_CARD_CONTENT = [{
      type: "paragraph",
      children: [{
        text: ""
      }]
    }];

    // src/components/Content.js
    const React4 = require(73 /* react */, true /* ES6 import */), ReactDOM2 = require(65 /* react-dom */, true /* ES6 import */), styled_components4 = require(83 /* styled-components */, true /* ES6 import */), slate = require(82 /* slate */, true /* ES6 import */), slate_react = require(81 /* slate-react */, true /* ES6 import */), downshift = require(36 /* downshift */, true /* ES6 import */), react_flip_toolkit4 = require(66 /* react-flip-toolkit */, true /* ES6 import */);
    const Portal = ({children}) => {
      return ReactDOM2.createPortal(children, document.body);
    };
    const ContentWrapper = styled_components4.default.div`
  width: 100%;
  height: 100%;
  resize: none;
  border: none;
  overflow: scroll;
  font-family: sans-serif;
  font-size: ${(props) => props.theme.body}rem;
  min-height: 150px;
  padding: ${(props) => props.theme.padding}px;
  flex-grow: 1;
`;
    const BoldMark = ({children}) => React4.createElement("strong", null, children);
    const CodeElement = (props) => {
      return React4.createElement("pre", {
        ...props.attributes
      }, React4.createElement("code", null, props.children));
    };
    const DefaultElement = (props) => {
      return React4.createElement("p", {
        ...props.attributes
      }, props.children);
    };
    const Leaf = (props) => {
      const isLink = props.leaf.type === "wikilink";
      return React4.createElement("span", {
        ...props.attributes,
        style: {
          fontWeight: props.leaf.bold ? "bold" : "normal",
          backgroundColor: isLink ? "red" : "transparent"
        }
      }, props.children);
    };
    const Content3 = ({id, content, onUpdate, search, setSearch, searchResults, setIsTyping}) => {
      const editor = React4.useMemo(() => withMentions(slate_react.withReact(slate.createEditor())), []);
      const {dispatch, fuse: fuse3} = React4.useContext(DispatchContext);
      const {theme} = React4.useContext(ThemeContext);
      const [target, setTarget] = React4.useState();
      const [index, setIndex] = React4.useState(0);
      const ref = React4.useRef();
      const renderElement = React4.useCallback((props) => {
        switch (props.element.type) {
          case "code":
            return React4.createElement(CodeElement, {
              ...props
            });
          case "mention":
            return React4.createElement(MentionElement, {
              goToLevel: (id2) => dispatch({
                type: "SET_LEVEL",
                data: {
                  id: id2
                }
              }),
              ...props
            });
          default:
            return React4.createElement(DefaultElement, {
              ...props
            });
        }
      }, []);
      const renderLeaf = React4.useCallback((props) => {
        return React4.createElement(Leaf, {
          ...props
        });
      }, []);
      const onKeyDown = React4.useCallback((event) => {
        if (event.ctrlKey) {
          switch (event.key) {
            case "`": {
              event.preventDefault();
              const [match] = slate.Editor.nodes(editor, {
                match: (n) => n.type === "code"
              });
              slate.Transforms.setNodes(editor, {
                type: match ? null : "code"
              }, {
                match: (n) => slate.Editor.isBlock(editor, n)
              });
              break;
            }
            case "l": {
              event.preventDefault();
              const [match] = slate.Editor.nodes(editor, {
                match: (n) => n.type === "wikilink"
              });
              slate.Transforms.setNodes(editor, {
                type: match ? null : "wikilink"
              }, {
                match: (n) => slate.Text.isText(n),
                split: true
              });
              break;
            }
            case "b": {
              event.preventDefault();
              const [match] = slate.Editor.nodes(editor, {
                match: (n) => n.bold
              });
              slate.Transforms.setNodes(editor, {
                bold: match ? false : true
              }, {
                match: (n) => slate.Text.isText(n),
                split: true
              });
              break;
            }
          }
        }
        if (event.key === "@") {
          dispatch({
            type: "SET_SEARCH_INDEX"
          });
        }
        if (target) {
          switch (event.key) {
            case "ArrowDown":
              event.preventDefault();
              const prevIndex = index >= searchResults.length - 1 ? 0 : index + 1;
              setIndex(prevIndex);
              break;
            case "ArrowUp":
              event.preventDefault();
              const nextIndex = index <= 0 ? searchResults.length - 1 : index - 1;
              setIndex(nextIndex);
              break;
            case "Tab":
            case "Enter":
              event.preventDefault();
              slate.Transforms.select(editor, target);
              insertMention(editor, search, searchResults[index]);
              setSearch("");
              setTarget(null);
              break;
            case "Escape":
              event.preventDefault();
              setSearch("");
              setTarget(null);
              break;
            case " ":
              event.preventDefault();
              if (search) {
                event.preventDefault();
                const {selection} = editor;
                slate.Transforms.insertText(editor, " ", {
                  at: selection.focus
                });
                break;
              } else {
                setSearch("");
                setTarget(null);
              }
          }
        }
      }, [index, search, target]);
      React4.useEffect(() => {
        if (target && searchResults.length > 0) {
          const el = ref.current;
          const domRange = slate_react.ReactEditor.toDOMRange(editor, target);
          const rect = domRange.getBoundingClientRect();
          el.style.top = `${rect.top + window.pageYOffset + 24}px`;
          el.style.left = `${rect.left + window.pageXOffset}px`;
        }
      }, [searchResults.length, editor, index, search, target]);
      return React4.createElement(react_flip_toolkit4.Flipped, {
        inverseFlipId: id
      }, React4.createElement(ContentWrapper, {
        theme
      }, React4.createElement(slate_react.Slate, {
        editor,
        value: content,
        onChange: (newValue) => {
          onUpdate(id, "content", newValue);
          const {selection} = editor;
          if (selection && slate.Range.isCollapsed(selection)) {
            const [start] = slate.Range.edges(selection);
            let newStart;
            const wordBefore = slate.Editor.before(editor, start, {
              unit: "word"
            });
            const before = wordBefore && slate.Editor.before(editor, wordBefore);
            const beforeRange = before && slate.Editor.range(editor, before, start);
            const beforeText = beforeRange && slate.Editor.string(editor, beforeRange);
            const beforeMatch = beforeText && beforeText.match(/^@(\w+)$/);
            const after = slate.Editor.after(editor, start);
            const afterRange = slate.Editor.range(editor, start, after);
            const afterText = slate.Editor.string(editor, afterRange);
            const afterMatch = afterText.match(/^(\s|$)/);
            if (beforeMatch && afterMatch) {
              setTarget(beforeRange);
              setSearch(beforeMatch[1]);
              setIndex(0);
              return;
            }
          }
          setTarget(null);
        }
      }, React4.createElement(slate_react.Editable, {
        placeholder: "Start writing here",
        renderElement,
        renderLeaf,
        onKeyDown,
        onFocus: (e) => setIsTyping(true),
        onBlur: (e) => setIsTyping(false)
      }), target && searchResults.length > 0 && React4.createElement(Portal, null, React4.createElement("div", {
        ref,
        style: {
          top: "-9999px",
          left: "-9999px",
          position: "absolute",
          zIndex: 1,
          padding: "3px",
          background: "white",
          borderRadius: "4px",
          boxShadow: "0 1px 5px rgba(0,0,0,.2)"
        }
      }, searchResults.map(({item}, i) => React4.createElement("div", {
        key: item.id,
        style: {
          padding: "1px 3px",
          borderRadius: "3px",
          background: i === index ? "#B4D5FF" : "transparent"
        }
      }, React4.createElement("div", null, item.title))))))));
    };
    const withMentions = (editor) => {
      const {isInline, isVoid} = editor;
      editor.isInline = (element) => {
        return element.type === "mention" ? true : isInline(element);
      };
      editor.isVoid = (element) => {
        return element.type === "mention" ? true : isVoid(element);
      };
      return editor;
    };
    const insertMention = (editor, search, {item}) => {
      if (item) {
        const mention = {
          type: "mention",
          search,
          item,
          children: [{
            text: ""
          }]
        };
        slate.Transforms.insertNodes(editor, mention);
        slate.Transforms.move(editor);
      }
    };
    const MentionElement = ({attributes, children, search, goToLevel, element}) => {
      const selected = slate_react.useSelected();
      const focused = slate_react.useFocused();
      const {item} = element;
      return React4.createElement("span", {
        ...attributes,
        contentEditable: false,
        onClick: () => goToLevel(item.id),
        style: {
          padding: "3px 3px 2px",
          margin: "0 1px",
          verticalAlign: "baseline",
          display: "inline-block",
          borderRadius: "4px",
          backgroundColor: "#eee",
          fontSize: "0.9em",
          boxShadow: selected && focused ? "0 0 0 2px #B4D5FF" : "none"
        }
      }, item.title, children);
    };
    const default4 = Content3;

    // src/components/Card.js
    const React3 = require(73 /* react */, true /* ES6 import */), react_flip_toolkit3 = require(66 /* react-flip-toolkit */, true /* ES6 import */), re_resizable = require(63 /* re-resizable */, true /* ES6 import */), react_rnd = require(69 /* react-rnd */, true /* ES6 import */), styled_components3 = require(83 /* styled-components */, true /* ES6 import */);
    const CardWrapper = styled_components3.default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: ${(props) => props.theme.foreground};
  color: ${(props) => props.theme.textPrimary};
  border-radius: 10px;
  width: 100%;
  height: 100%;
  padding: ${(props) => props.theme.padding * 2}px;
  border: 1px solid rgba(0,0,0,0.1);
  transition-property: box-shadow;
  transition-duration: .1s;
  box-shadow: 0px 4px 10px 2.5px rgba(0,0,0,0.10);
  overflow: scroll;
  &:hover {
    box-shadow: 0px 4px 15px 2.5px rgba(0,0,0,0.20);
  }
`;
    const CardPreviewContainer = styled_components3.default.div`
  width: 100%;
  display: flex;
  align-items: center;
  justify-content flex-start;
  padding-top: ${(props) => props.theme.padding}px;
  overflow-x: scroll;
`;
    const CardPreview = styled_components3.default.div`
  display:  flex;
  align-items: center;
  justify-content: center;
  width: auto;
  white-space: nowrap;
  border: 1px solid ${(props) => props.theme.textSecondary};
  transition: box-shadow, color;
  transition: .1s;
  font-size:  ${(props) => props.theme.header}rem;
  padding: ${(props) => props.theme.padding}px;
  margin-right: ${(props) => props.theme.padding / 2}px;
  border-radius: 5px;
`;
    const ActionRow = styled_components3.default.div`
  display: flex;
  padding-bottom: 8px;
  justify-content: space-between;
  width: 100%;
`;
    const Input = styled_components3.default.input`
  border: none;
  font-size: ${(props) => props.theme.header}rem;
  opacity: 0.7;
  &:focus {
    opacity: 1.0
  }
`;
    const ActionButton = styled_components3.default.button`
  background-color: transparent;
  border-radius: 50px;
  opacity: 0;
  transition: 0.2s;
  margin: 4px;
  color: ${(props) => props.theme.textPrimiary};
  ${CardWrapper}:hover & {
    opacity: 1;
  }
`;
    const ResizeHandle = styled_components3.default.div`
  width: 25px;
  height: 25px;
  &:hover {
    background: rgba(0,0,0,0.1);
  }
`;
    const Card3 = ({id, title, content, position, size, handleZoom, shiftDown, search, setSearch, searchResults, currLevel, children, ...props}) => {
      const [{x, y}, setPos] = React3.useState({
        x: position.x,
        y: position.y
      });
      const [isTyping, setIsTyping] = React3.useState(false);
      const [isFocused, setIsFocused] = React3.useState(false);
      const {dispatch} = React3.useContext(DispatchContext);
      const {theme} = React3.useContext(ThemeContext);
      const onUpdate = (id2, property, value) => {
        dispatch({
          type: "UPDATE_CARD",
          data: {
            cardId: id2,
            property,
            value
          }
        });
      };
      const onDelete = (id2) => {
        const shouldDelete = confirm("u sure?");
        if (shouldDelete) {
          dispatch({
            type: "REMOVE_CARD",
            data: {
              cardId: id2,
              currLevel
            }
          });
        }
      };
      const focusedStyles = {
        zIndex: 1000,
        left: 0,
        right: 0,
        marginLeft: "auto",
        marginRight: "auto",
        width: "50%",
        height: "50%"
      };
      return React3.createElement(react_rnd.Rnd, {
        position: {
          x,
          y
        },
        style: {
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          backgroundColor: "transparent",
          padding: `${theme.padding * 2}px`,
          cursor: isTyping ? "text" : "move"
        },
        minWidth: CARD_SIZE * 1.5,
        minHeight: CARD_SIZE * 1.5,
        dragGrid: shiftDown ? [25, 25] : [1, 1],
        size: {
          width: size,
          height: size
        },
        disableDragging: isTyping,
        onDrag: (e, d) => {
          setPos({
            x: d.x,
            y: d.y
          });
        },
        onDragStop: (e, d) => {
          setPos({
            x: d.x,
            y: d.y
          });
          onUpdate(id, "position", {
            x,
            y
          });
        },
        onResizeStop: (e, direction, ref, delta, position2) => {
          onUpdate(id, "size", {
            width: ref.offsetWidth,
            height: ref.offsetHeight
          });
        },
        ...props,
        onBlur: () => setSearch("")
      }, React3.createElement(react_flip_toolkit3.Flipped, {
        flipId: id
      }, React3.createElement(CardWrapper, {
        theme
      }, React3.createElement(ActionRow, {
        theme
      }, React3.createElement(react_flip_toolkit3.Flipped, {
        flipId: `layer-id-${id}`
      }, React3.createElement(Input, {
        onFocus: (e) => {
          setIsTyping(true);
          e.stopPropagation();
          e.preventDefault();
        },
        onBlur: () => setIsTyping(false),
        onChange: (e) => onUpdate(id, "title", e.target.value),
        value: title,
        theme
      })), React3.createElement("div", null, React3.createElement(ActionButton, {
        onClick: () => onDelete(id)
      }, "x"), React3.createElement(ActionButton, {
        onClick: () => handleZoom(id)
      }, "zoom"))), React3.createElement(default4, {
        id,
        content,
        onUpdate,
        search,
        setSearch,
        searchResults,
        dispatch,
        setIsTyping,
        theme
      }), React3.createElement(CardPreviewContainer, {
        theme
      }, children.map((c) => {
        return React3.createElement(react_flip_toolkit3.Flipped, {
          key: `child-preview-${c.id}`,
          flipId: c.id
        }, React3.createElement(CardPreview, null, React3.createElement(react_flip_toolkit3.Flipped, {
          inverseFlipId: id
        }, React3.createElement("div", null, c.title))));
      })))));
    };
    const default2 = Card3;

    // src/components/Breadcrumb.js
    const React2 = require(73 /* react */, true /* ES6 import */), react_flip_toolkit2 = require(66 /* react-flip-toolkit */, true /* ES6 import */), styled_components2 = require(83 /* styled-components */, true /* ES6 import */);
    const ButtonWrapper = styled_components2.default.button`
    padding: ${(props) => props.theme.padding / 2}px ${(props) => props.theme.padding}px;
    background-color: transparent;
    color: ${(props) => props.theme.textPrimary};
    border-radius: 5px;
    pointer-events: all;
    border: none;
    font-size: 1.2rem;
    transition: 0.2s background-color;
    &:hover {
      background-color: ${(props) => props.theme.background};
    }
    &:focus {
      outline: none;
    }
`;
    const InputWrapper = styled_components2.default.input`
    padding: ${(props) => props.theme.padding / 2}px ${(props) => props.theme.padding * 1.2}px;
    background-color: transparent;
    color: ${(props) => props.theme.textPrimary};
    border-radius: 5px;
    pointer-events: all;
    border: none;
    font-size: 1.2rem;
    width: auto;
    transition: 0.2s background-color;
    &:hover {
      background-color: ${(props) => props.theme.background};
    }
    
`;
    const Breadcrumb3 = ({isActive, children, ...props}) => {
      const {theme} = React2.useContext(ThemeContext);
      return isActive ? React2.createElement(InputWrapper, {
        theme,
        ...props
      }, children) : React2.createElement(ButtonWrapper, {
        theme,
        ...props
      }, children);
    };
    const default3 = Breadcrumb3;

    // src/App.js
    require(App, {
      DispatchContext: () => DispatchContext,
      ThemeContext: () => ThemeContext
    });
    const React = require(73 /* react */, true /* ES6 import */), ReactDOM = require(65 /* react-dom */, true /* ES6 import */), react_flip_toolkit = require(66 /* react-flip-toolkit */, true /* ES6 import */), lodash = require(54 /* lodash */, true /* ES6 import */), axios = require(8 /* axios */, true /* ES6 import */), styled_components = require(83 /* styled-components */, true /* ES6 import */), fuse = require(39 /* fuse.js */, true /* ES6 import */);
    function useLocalStorage(defaultValue, key) {
      const [value, setValue] = React.useState(() => {
        const stickyValue = window.localStorage.getItem(key);
        return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;
      });
      React.useEffect(() => {
        window.localStorage.setItem(key, JSON.stringify(value));
      }, [key, value]);
      return [value, setValue];
    }
    const fallbackState = {
      path: ["root"],
      isDarkMode: false,
      cards: {
        root: {
          title: "ur notes",
          id: "root",
          children: [],
          parent: null
        }
      }
    };
    const BreadcrumbSeparator = styled_components.default.div`
  border: none;
  padding: ${(props) => props.theme.padding / 2}px ${(props) => props.theme.padding / 2}px;
`;
    const genID = () => "_" + Math.random().toString(36).substr(2, 9);
    const DispatchContext = React.createContext();
    const ThemeContext = React.createContext();
    let fuse2;
    const searchOptions = {
      includeScore: true,
      keys: ["title", "content.children.text"]
    };
    const App2 = () => {
      React.useEffect(() => {
        document.addEventListener("keydown", onKeyDown);
        document.addEventListener("keyup", onKeyUp);
        window.addEventListener("popstate", onPopState);
      }, []);
      const [shiftDown, setShiftDown] = React.useState();
      const onKeyDown = (event) => {
        if (event.key === "Shift") {
          setShiftDown(true);
        }
      };
      const onKeyUp = (event) => {
        setShiftDown(false);
      };
      const createLayer = (parent, position, title) => ({
        id: genID(),
        title,
        content: DEFAULT_CARD_CONTENT,
        position: position || {
          x: 0,
          y: 0
        },
        size: {
          width: CARD_SIZE,
          height: CARD_SIZE
        },
        children: [],
        parent
      });
      const reducer = (state2, action) => {
        switch (action.type) {
          case "ADD_CARD": {
            const {cards: cards2} = state2;
            const {currLevel: currLevel2, position} = action.data;
            const title = `Card ${cards2[currLevel2].children.length + 1}`;
            const newLayer = createLayer(currLevel2, position, title);
            return {
              ...state2,
              cards: {
                ...cards2,
                [currLevel2]: {
                  ...cards2[currLevel2],
                  children: [...cards2[currLevel2].children, newLayer.id]
                },
                [newLayer.id]: newLayer
              }
            };
          }
          case "UPDATE_CARD": {
            const {cards: cards2} = state2;
            const {cardId, property, value} = action.data;
            return {
              ...state2,
              cards: {
                ...cards2,
                [cardId]: {
                  ...cards2[cardId],
                  [property]: value
                }
              }
            };
          }
          case "REMOVE_CARD": {
            const {cards: cards2} = state2;
            const {cardId, currLevel: currLevel2} = action.data;
            const {children} = cards2[cardId];
            const newCards = lodash.omit(cards2, [...children, cardId]);
            return {
              ...state2,
              cards: {
                ...newCards,
                [currLevel2]: {
                  ...newCards[currLevel2],
                  children: newCards[currLevel2].children.filter((c) => c !== cardId)
                }
              }
            };
          }
          case "REMOVE_ALL_CARDS": {
            const {cards: cards2} = state2;
            const {currLevel: currLevel2} = action.data;
            const newCards = lodash.omit(cards2, cards2[currLevel2].children);
            return {
              ...state2,
              cards: {
                ...newCards,
                [currLevel2]: {
                  ...newCards[currLevel2],
                  children: []
                }
              }
            };
          }
          case "ZOOM_OUT_TO_LEVEL": {
            const {level} = action.data;
            const newPath = state2.path.slice(0, level);
            return {
              ...state2,
              path: newPath
            };
          }
          case "ZOOM_TO_LEVEL": {
            const {level} = action.data;
            const newPath = [...state2.path, level];
            return {
              ...state2,
              path: newPath
            };
          }
          case "SET_LEVEL": {
            const {id} = action.data;
            const {cards: cards2, path: path2} = state2;
            let curr = cards2[id];
            let buildPath = [id];
            while (curr.parent) {
              curr = cards2[curr.parent];
              buildPath = [curr.id, ...buildPath];
            }
            return {
              ...state2,
              path: buildPath
            };
          }
          case "SET_PATH": {
            const {path: path2} = action.data;
            return {
              ...state2,
              path: path2
            };
          }
          case "SET_SEARCH_INDEX": {
            const {cards: cards2} = state2;
            const cardList = Object.entries(cards2).map((c) => c[1]);
            console.log("setting index");
            console.log(fuse2);
            fuse2 = new fuse.default(cardList, searchOptions);
            return state2;
          }
          case "ADD_LINK": {
            return state2;
          }
          case "REMOVE_LINK": {
            return state2;
          }
          case "TOGGLE_DARK_MODE": {
            const {isDarkMode: isDarkMode2} = state2;
            return {
              ...state2,
              isDarkMode: !isDarkMode2
            };
          }
          case "LOAD_STATE": {
            const {data} = action.data;
            return data;
          }
          default:
            return state2;
        }
      };
      const [savedState, setSavedState] = useLocalStorage(fallbackState, "zoomega-state");
      const [state, dispatch] = React.useReducer(reducer, savedState);
      const [search, setSearch] = React.useState("");
      const [searchResults, setSearchResults] = React.useState([]);
      const {cards, path, isDarkMode} = state;
      const [theme, setTheme] = React.useState(isDarkMode ? darkTheme : lightTheme);
      React.useEffect(() => {
        setTheme(isDarkMode ? darkTheme : lightTheme);
      }, [isDarkMode]);
      React.useEffect(() => {
        if (!fuse2) {
          const cardList = Object.entries(cards).map((c) => c[1]);
          fuse2 = new fuse.default(cardList, searchOptions);
        }
        const result = fuse2.search(search);
        setSearchResults(result);
      }, [search]);
      const currLevel = path[path.length - 1];
      const currCards = cards[currLevel].children;
      React.useEffect(() => {
        if (path) {
          console.log("goot a path!");
          window.location.hash = path.join("/");
        }
        setSavedState(state);
      }, [path]);
      onPopState = () => {
        const path2 = document.location.hash.substring(1).split("/");
        if (path2) {
          dispatch({
            type: "SET_PATH",
            data: {
              path: path2
            }
          });
        }
      };
      const [isZooming, setIsZooming] = React.useState(false);
      const handleCanvasDoubleClick = ({clientX, clientY}) => {
        if (shiftDown)
          dispatch({
            type: "ADD_CARD",
            data: {
              currLevel,
              position: {
                x: clientX - CARD_SIZE / 2,
                y: clientY - CARD_SIZE / 2
              }
            }
          });
      };
      return React.createElement(react_flip_toolkit.Flipper, {
        flipKey: isZooming
      }, React.createElement(ThemeContext.Provider, {
        value: {
          theme
        }
      }, React.createElement(DispatchContext.Provider, {
        value: {
          fuse: fuse2,
          dispatch
        }
      }, React.createElement("div", {
        style: {
          width: "100%",
          height: "100vh",
          fontFamily: "sans-serif",
          backgroundColor: theme.background,
          color: theme.textPrimary,
          position: "fixed",
          top: 0,
          left: 0,
          margin: 0,
          padding: `${theme.padding * 2}px`,
          overflow: "scroll"
        }
      }, React.createElement("div", {
        style: {
          position: "fixed",
          backgroundColor: theme.foreground,
          boxShadow: "10px 10px 50px 0px rgba(0,0,0,0.3)",
          padding: `${theme.padding * 2}px`,
          borderRadius: "10px",
          transition: "0.1s",
          zIndex: 9999
        }
      }, React.createElement("div", {
        style: {
          display: "flex"
        }
      }, path.map((loc, idx) => {
        const card = cards[loc];
        if (idx === path.length - 1) {
          return React.createElement(react_flip_toolkit.Flipped, {
            key: `layer-id-${loc}`,
            flipId: `layer-id-${loc}`
          }, React.createElement(default3, {
            isActive: true,
            value: card.title,
            style: {
              width: `${card.title.length}ch`
            },
            onChange: (e) => dispatch({
              type: "UPDATE_CARD",
              data: {
                cardId: loc,
                property: "title",
                value: e.target.value
              }
            })
          }));
        } else {
          return React.createElement("div", {
            key: idx,
            style: {
              display: "inline-flex",
              alignItems: "center",
              justifyContent: "flex-start"
            }
          }, React.createElement(react_flip_toolkit.Flipped, {
            key: `layer-id-${loc}`,
            flipId: `layer-id-${loc}`
          }, React.createElement(default3, {
            style: {
              cursor: "pointer"
            },
            onClick: () => {
              dispatch({
                type: "ZOOM_OUT_TO_LEVEL",
                data: {
                  level: idx + 1
                }
              });
              setIsZooming(!isZooming);
            }
          }, card.title)), React.createElement(BreadcrumbSeparator, {
            theme
          }, "/"));
        }
      })), React.createElement("button", {
        onClick: () => dispatch({
          type: "ADD_CARD",
          data: {
            currLevel
          }
        })
      }, "new layer"), React.createElement("button", {
        onClick: () => {
          const shouldDelete = confirm("this will delete all ur stuff from this layer. u sure?");
          if (shouldDelete) {
            dispatch({
              type: "REMOVE_ALL_CARDS",
              data: {
                currLevel
              }
            });
          }
        }
      }, "delete all! danger!"), React.createElement("button", {
        onClick: () => setSavedState(state)
      }, "save"), React.createElement("button", {
        onClick: () => {
          dispatch({
            type: "TOGGLE_DARK_MODE"
          });
          setSavedState(state);
        }
      }, isDarkMode ? "light" : "dark", " mode")), React.createElement("div", {
        onDoubleClick: (e) => handleCanvasDoubleClick(e),
        style: {
          width: "100%",
          height: "100vh",
          overflow: "scroll"
        }
      }, currCards.map((l, idx) => {
        const {id, title, content, position, size, children} = cards[l];
        return React.createElement(default2, {
          key: id,
          handleZoom: (id2) => {
            dispatch({
              type: "ZOOM_TO_LEVEL",
              data: {
                level: id2
              }
            });
            setIsZooming(!isZooming);
          },
          title,
          id,
          shiftDown,
          children: children.map((c) => cards[c]),
          content,
          position,
          size,
          currLevel,
          search,
          setSearch,
          searchResults
        });
      }))), React.createElement(react_flip_toolkit.Flipped, {
        flipId: currLevel
      }, React.createElement("div", {
        style: {
          backgroundColor: "white",
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100vh",
          zIndex: -100
        }
      })))));
    };
    ReactDOM.render(React.createElement(App2, null), document.getElementById("root"));
  },

  43(require, exports, module) {
    // node_modules/is-plain-object/index.cjs.js
    "use strict";
    function isObject(val) {
      return val != null && typeof val === "object" && Array.isArray(val) === false;
    }
    function isObjectObject(o) {
      return isObject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
    }
    function isPlainObject(o) {
      var ctor, prot;
      if (isObjectObject(o) === false)
        return false;
      ctor = o.constructor;
      if (typeof ctor !== "function")
        return false;
      prot = ctor.prototype;
      if (isObjectObject(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    }
    module.exports = isPlainObject;
  },

  41(require, exports) {
    // node_modules/immer/dist/immer.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a;
    var hasSymbol = typeof Symbol !== "undefined";
    var hasMap = typeof Map !== "undefined";
    var hasSet = typeof Set !== "undefined";
    var NOTHING = hasSymbol ? Symbol("immer-nothing") : (_a = {}, _a["immer-nothing"] = true, _a);
    var DRAFTABLE = hasSymbol ? Symbol("immer-draftable") : "__$immer_draftable";
    var DRAFT_STATE = hasSymbol ? Symbol("immer-state") : "__$immer_state";
    var iteratorSymbol = hasSymbol ? Symbol.iterator : "@@iterator";
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) {
          if (b2.hasOwnProperty(p)) {
            d2[p] = b2[p];
          }
        }
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = (__.prototype = b.prototype, new __());
    }
    var Archtype;
    (function(Archtype2) {
      Archtype2[Archtype2["Object"] = 0] = "Object";
      Archtype2[Archtype2["Array"] = 1] = "Array";
      Archtype2[Archtype2["Map"] = 2] = "Map";
      Archtype2[Archtype2["Set"] = 3] = "Set";
    })(Archtype || (Archtype = {}));
    var ProxyType;
    (function(ProxyType2) {
      ProxyType2[ProxyType2["ProxyObject"] = 0] = "ProxyObject";
      ProxyType2[ProxyType2["ProxyArray"] = 1] = "ProxyArray";
      ProxyType2[ProxyType2["ES5Object"] = 2] = "ES5Object";
      ProxyType2[ProxyType2["ES5Array"] = 3] = "ES5Array";
      ProxyType2[ProxyType2["Map"] = 4] = "Map";
      ProxyType2[ProxyType2["Set"] = 5] = "Set";
    })(ProxyType || (ProxyType = {}));
    function isDraft(value) {
      return !!value && !!value[DRAFT_STATE];
    }
    function isDraftable(value) {
      if (!value) {
        return false;
      }
      return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);
    }
    function isPlainObject(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      var proto = Object.getPrototypeOf(value);
      return !proto || proto === Object.prototype;
    }
    function original(value) {
      if (value && value[DRAFT_STATE]) {
        return value[DRAFT_STATE].base;
      }
    }
    var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== "undefined" ? function(obj) {
      return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
    } : Object.getOwnPropertyNames;
    function each(obj, iter) {
      if (getArchtype(obj) === Archtype.Object) {
        ownKeys(obj).forEach(function(key) {
          return iter(key, obj[key], obj);
        });
      } else {
        obj.forEach(function(entry, index) {
          return iter(index, entry, obj);
        });
      }
    }
    function isEnumerable(base, prop) {
      var desc = Object.getOwnPropertyDescriptor(base, prop);
      return desc && desc.enumerable ? true : false;
    }
    function getArchtype(thing) {
      if (!thing) {
        die();
      }
      if (thing[DRAFT_STATE]) {
        switch (thing[DRAFT_STATE].type) {
          case ProxyType.ES5Object:
          case ProxyType.ProxyObject:
            return Archtype.Object;
          case ProxyType.ES5Array:
          case ProxyType.ProxyArray:
            return Archtype.Array;
          case ProxyType.Map:
            return Archtype.Map;
          case ProxyType.Set:
            return Archtype.Set;
        }
      }
      return Array.isArray(thing) ? Archtype.Array : isMap(thing) ? Archtype.Map : isSet(thing) ? Archtype.Set : Archtype.Object;
    }
    function has(thing, prop) {
      return getArchtype(thing) === Archtype.Map ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
    }
    function get(thing, prop) {
      return getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop];
    }
    function set(thing, propOrOldValue, value) {
      switch (getArchtype(thing)) {
        case Archtype.Map:
          thing.set(propOrOldValue, value);
          break;
        case Archtype.Set:
          thing.delete(propOrOldValue);
          thing.add(value);
          break;
        default:
          thing[propOrOldValue] = value;
      }
    }
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function isMap(target) {
      return hasMap && target instanceof Map;
    }
    function isSet(target) {
      return hasSet && target instanceof Set;
    }
    function latest(state) {
      return state.copy || state.base;
    }
    function shallowCopy(base, invokeGetters) {
      if (invokeGetters === void 0) {
        invokeGetters = false;
      }
      if (Array.isArray(base)) {
        return base.slice();
      }
      var clone = Object.create(Object.getPrototypeOf(base));
      ownKeys(base).forEach(function(key) {
        if (key === DRAFT_STATE) {
          return;
        }
        var desc = Object.getOwnPropertyDescriptor(base, key);
        var value = desc.value;
        if (desc.get) {
          if (!invokeGetters) {
            throw new Error("Immer drafts cannot have computed properties");
          }
          value = desc.get.call(base);
        }
        if (desc.enumerable) {
          clone[key] = value;
        } else {
          Object.defineProperty(clone, key, {
            value,
            writable: true,
            configurable: true
          });
        }
      });
      return clone;
    }
    function freeze(obj, deep) {
      if (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) {
        return;
      }
      var type = getArchtype(obj);
      if (type === Archtype.Set) {
        obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
      } else if (type === Archtype.Map) {
        obj.set = obj.clear = obj.delete = dontMutateFrozenCollections;
      }
      Object.freeze(obj);
      if (deep) {
        each(obj, function(_, value) {
          return freeze(value, true);
        });
      }
    }
    function dontMutateFrozenCollections() {
      throw new Error("This object has been frozen and should not be mutated");
    }
    function createHiddenProperty(target, prop, value) {
      Object.defineProperty(target, prop, {
        value,
        enumerable: false,
        writable: true
      });
    }
    function die() {
      throw new Error("Illegal state, please file a bug");
    }
    var ImmerScope = function() {
      function ImmerScope2(parent, immer2) {
        this.drafts = [];
        this.parent = parent;
        this.immer = immer2;
        this.canAutoFreeze = true;
      }
      ImmerScope2.prototype.usePatches = function(patchListener) {
        if (patchListener) {
          this.patches = [];
          this.inversePatches = [];
          this.patchListener = patchListener;
        }
      };
      ImmerScope2.prototype.revoke = function() {
        this.leave();
        this.drafts.forEach(revoke);
        this.drafts = null;
      };
      ImmerScope2.prototype.leave = function() {
        if (this === ImmerScope2.current) {
          ImmerScope2.current = this.parent;
        }
      };
      ImmerScope2.enter = function(immer2) {
        var scope = new ImmerScope2(ImmerScope2.current, immer2);
        ImmerScope2.current = scope;
        return scope;
      };
      return ImmerScope2;
    }();
    function revoke(draft) {
      var state = draft[DRAFT_STATE];
      if (state.type === ProxyType.ProxyObject || state.type === ProxyType.ProxyArray) {
        state.revoke();
      } else {
        state.revoked = true;
      }
    }
    function processResult(immer2, result, scope) {
      var baseDraft = scope.drafts[0];
      var isReplaced = result !== void 0 && result !== baseDraft;
      immer2.willFinalize(scope, result, isReplaced);
      if (isReplaced) {
        if (baseDraft[DRAFT_STATE].modified) {
          scope.revoke();
          throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.");
        }
        if (isDraftable(result)) {
          result = finalize(immer2, result, scope);
          if (!scope.parent) {
            maybeFreeze(immer2, result);
          }
        }
        if (scope.patches) {
          scope.patches.push({
            op: "replace",
            path: [],
            value: result
          });
          scope.inversePatches.push({
            op: "replace",
            path: [],
            value: baseDraft[DRAFT_STATE].base
          });
        }
      } else {
        result = finalize(immer2, baseDraft, scope, []);
      }
      scope.revoke();
      if (scope.patches) {
        scope.patchListener(scope.patches, scope.inversePatches);
      }
      return result !== NOTHING ? result : void 0;
    }
    function finalize(immer2, draft, scope, path) {
      var state = draft[DRAFT_STATE];
      if (!state) {
        if (Object.isFrozen(draft)) {
          return draft;
        }
        return finalizeTree(immer2, draft, scope);
      }
      if (state.scope !== scope) {
        return draft;
      }
      if (!state.modified) {
        maybeFreeze(immer2, state.base, true);
        return state.base;
      }
      if (!state.finalized) {
        state.finalized = true;
        finalizeTree(immer2, state.draft, scope, path);
        if (immer2.onDelete && state.type !== ProxyType.Set) {
          if (immer2.useProxies) {
            var assigned = state.assigned;
            each(assigned, function(prop, exists) {
              if (!exists) {
                immer2.onDelete(state, prop);
              }
            });
          } else {
            var base = state.base, copy_1 = state.copy;
            each(base, function(prop) {
              if (!has(copy_1, prop)) {
                immer2.onDelete(state, prop);
              }
            });
          }
        }
        if (immer2.onCopy) {
          immer2.onCopy(state);
        }
        if (immer2.autoFreeze && scope.canAutoFreeze) {
          freeze(state.copy, false);
        }
        if (path && scope.patches) {
          generatePatches(state, path, scope.patches, scope.inversePatches);
        }
      }
      return state.copy;
    }
    function finalizeTree(immer2, root, scope, rootPath) {
      var state = root[DRAFT_STATE];
      if (state) {
        if (state.type === ProxyType.ES5Object || state.type === ProxyType.ES5Array) {
          state.copy = shallowCopy(state.draft, true);
        }
        root = state.copy;
      }
      each(root, function(key, value) {
        return finalizeProperty(immer2, scope, root, state, root, key, value, rootPath);
      });
      return root;
    }
    function finalizeProperty(immer2, scope, root, rootState, parentValue, prop, childValue, rootPath) {
      if (childValue === parentValue) {
        throw Error("Immer forbids circular references");
      }
      var isDraftProp = !!rootState && parentValue === root;
      var isSetMember = isSet(parentValue);
      if (isDraft(childValue)) {
        var path = rootPath && isDraftProp && !isSetMember && !has(rootState.assigned, prop) ? rootPath.concat(prop) : void 0;
        childValue = finalize(immer2, childValue, scope, path);
        set(parentValue, prop, childValue);
        if (isDraft(childValue)) {
          scope.canAutoFreeze = false;
        }
      } else if (isDraftProp && is(childValue, get(rootState.base, prop))) {
        return;
      } else if (isDraftable(childValue)) {
        each(childValue, function(key, grandChild) {
          return finalizeProperty(immer2, scope, root, rootState, childValue, key, grandChild, rootPath);
        });
        if (!scope.parent) {
          maybeFreeze(immer2, childValue);
        }
      }
      if (isDraftProp && immer2.onAssign && !isSetMember) {
        immer2.onAssign(rootState, prop, childValue);
      }
    }
    function maybeFreeze(immer2, value, deep) {
      if (deep === void 0) {
        deep = false;
      }
      if (immer2.autoFreeze && !isDraft(value)) {
        freeze(value, deep);
      }
    }
    function createProxy(base, parent) {
      var isArray = Array.isArray(base);
      var state = {
        type: isArray ? ProxyType.ProxyArray : ProxyType.ProxyObject,
        scope: parent ? parent.scope : ImmerScope.current,
        modified: false,
        finalized: false,
        assigned: {},
        parent,
        base,
        draft: null,
        drafts: {},
        copy: null,
        revoke: null,
        isManual: false
      };
      var target = state;
      var traps = objectTraps;
      if (isArray) {
        target = [state];
        traps = arrayTraps;
      }
      var _a2 = Proxy.revocable(target, traps), revoke2 = _a2.revoke, proxy = _a2.proxy;
      state.draft = proxy;
      state.revoke = revoke2;
      return proxy;
    }
    var objectTraps = {
      get: function(state, prop) {
        if (prop === DRAFT_STATE) {
          return state;
        }
        var drafts = state.drafts;
        if (!state.modified && has(drafts, prop)) {
          return drafts[prop];
        }
        var value = latest(state)[prop];
        if (state.finalized || !isDraftable(value)) {
          return value;
        }
        if (state.modified) {
          if (value !== peek(state.base, prop)) {
            return value;
          }
          drafts = state.copy;
        }
        return drafts[prop] = state.scope.immer.createProxy(value, state);
      },
      has: function(state, prop) {
        return prop in latest(state);
      },
      ownKeys: function(state) {
        return Reflect.ownKeys(latest(state));
      },
      set: function(state, prop, value) {
        if (!state.modified) {
          var baseValue = peek(state.base, prop);
          var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;
          if (isUnchanged) {
            return true;
          }
          prepareCopy(state);
          markChanged(state);
        }
        state.assigned[prop] = true;
        state.copy[prop] = value;
        return true;
      },
      deleteProperty: function(state, prop) {
        if (peek(state.base, prop) !== void 0 || prop in state.base) {
          state.assigned[prop] = false;
          prepareCopy(state);
          markChanged(state);
        } else if (state.assigned[prop]) {
          delete state.assigned[prop];
        }
        if (state.copy) {
          delete state.copy[prop];
        }
        return true;
      },
      getOwnPropertyDescriptor: function(state, prop) {
        var owner = latest(state);
        var desc = Reflect.getOwnPropertyDescriptor(owner, prop);
        if (desc) {
          desc.writable = true;
          desc.configurable = state.type !== ProxyType.ProxyArray || prop !== "length";
        }
        return desc;
      },
      defineProperty: function() {
        throw new Error("Object.defineProperty() cannot be used on an Immer draft");
      },
      getPrototypeOf: function(state) {
        return Object.getPrototypeOf(state.base);
      },
      setPrototypeOf: function() {
        throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft");
      }
    };
    var arrayTraps = {};
    each(objectTraps, function(key, fn) {
      arrayTraps[key] = function() {
        arguments[0] = arguments[0][0];
        return fn.apply(this, arguments);
      };
    });
    arrayTraps.deleteProperty = function(state, prop) {
      if (isNaN(parseInt(prop))) {
        throw new Error("Immer only supports deleting array indices");
      }
      return objectTraps.deleteProperty.call(this, state[0], prop);
    };
    arrayTraps.set = function(state, prop, value) {
      if (prop !== "length" && isNaN(parseInt(prop))) {
        throw new Error("Immer only supports setting array indices and the 'length' property");
      }
      return objectTraps.set.call(this, state[0], prop, value, state[0]);
    };
    function peek(draft, prop) {
      var state = draft[DRAFT_STATE];
      var desc = Reflect.getOwnPropertyDescriptor(state ? latest(state) : draft, prop);
      return desc && desc.value;
    }
    function markChanged(state) {
      if (!state.modified) {
        state.modified = true;
        if (state.type === ProxyType.ProxyObject || state.type === ProxyType.ProxyArray) {
          var copy_1 = state.copy = shallowCopy(state.base);
          each(state.drafts, function(key, value) {
            copy_1[key] = value;
          });
          state.drafts = void 0;
        }
        if (state.parent) {
          markChanged(state.parent);
        }
      }
    }
    function prepareCopy(state) {
      if (!state.copy) {
        state.copy = shallowCopy(state.base);
      }
    }
    function willFinalizeES5(scope, result, isReplaced) {
      scope.drafts.forEach(function(draft) {
        draft[DRAFT_STATE].finalizing = true;
      });
      if (!isReplaced) {
        if (scope.patches) {
          markChangesRecursively(scope.drafts[0]);
        }
        markChangesSweep(scope.drafts);
      } else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {
        markChangesSweep(scope.drafts);
      }
    }
    function createES5Proxy(base, parent) {
      var isArray = Array.isArray(base);
      var draft = clonePotentialDraft(base);
      each(draft, function(prop) {
        proxyProperty(draft, prop, isArray || isEnumerable(base, prop));
      });
      var state = {
        type: isArray ? ProxyType.ES5Array : ProxyType.ES5Object,
        scope: parent ? parent.scope : ImmerScope.current,
        modified: false,
        finalizing: false,
        finalized: false,
        assigned: {},
        parent,
        base,
        draft,
        copy: null,
        revoked: false,
        isManual: false
      };
      createHiddenProperty(draft, DRAFT_STATE, state);
      return draft;
    }
    function peek$1(draft, prop) {
      var state = draft[DRAFT_STATE];
      if (state && !state.finalizing) {
        state.finalizing = true;
        var value = draft[prop];
        state.finalizing = false;
        return value;
      }
      return draft[prop];
    }
    function get$1(state, prop) {
      assertUnrevoked(state);
      var value = peek$1(latest(state), prop);
      if (state.finalizing) {
        return value;
      }
      if (value === peek$1(state.base, prop) && isDraftable(value)) {
        prepareCopy$1(state);
        return state.copy[prop] = state.scope.immer.createProxy(value, state);
      }
      return value;
    }
    function set$1(state, prop, value) {
      assertUnrevoked(state);
      state.assigned[prop] = true;
      if (!state.modified) {
        if (is(value, peek$1(latest(state), prop))) {
          return;
        }
        markChangedES5(state);
        prepareCopy$1(state);
      }
      state.copy[prop] = value;
    }
    function markChangedES5(state) {
      if (!state.modified) {
        state.modified = true;
        if (state.parent) {
          markChangedES5(state.parent);
        }
      }
    }
    function prepareCopy$1(state) {
      if (!state.copy) {
        state.copy = clonePotentialDraft(state.base);
      }
    }
    function clonePotentialDraft(base) {
      var state = base && base[DRAFT_STATE];
      if (state) {
        state.finalizing = true;
        var draft = shallowCopy(state.draft, true);
        state.finalizing = false;
        return draft;
      }
      return shallowCopy(base);
    }
    var descriptors = {};
    function proxyProperty(draft, prop, enumerable) {
      var desc = descriptors[prop];
      if (desc) {
        desc.enumerable = enumerable;
      } else {
        descriptors[prop] = desc = {
          configurable: true,
          enumerable,
          get: function() {
            return get$1(this[DRAFT_STATE], prop);
          },
          set: function(value) {
            set$1(this[DRAFT_STATE], prop, value);
          }
        };
      }
      Object.defineProperty(draft, prop, desc);
    }
    function assertUnrevoked(state) {
      if (state.revoked === true) {
        throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + JSON.stringify(latest(state)));
      }
    }
    function markChangesSweep(drafts) {
      for (var i = drafts.length - 1; i >= 0; i--) {
        var state = drafts[i][DRAFT_STATE];
        if (!state.modified) {
          switch (state.type) {
            case ProxyType.ES5Array:
              if (hasArrayChanges(state)) {
                markChangedES5(state);
              }
              break;
            case ProxyType.ES5Object:
              if (hasObjectChanges(state)) {
                markChangedES5(state);
              }
              break;
          }
        }
      }
    }
    function markChangesRecursively(object) {
      if (!object || typeof object !== "object") {
        return;
      }
      var state = object[DRAFT_STATE];
      if (!state) {
        return;
      }
      var base = state.base, draft = state.draft, assigned = state.assigned, type = state.type;
      if (type === ProxyType.ES5Object) {
        each(draft, function(key) {
          if (key === DRAFT_STATE) {
            return;
          }
          if (base[key] === void 0 && !has(base, key)) {
            assigned[key] = true;
            markChangedES5(state);
          } else if (!assigned[key]) {
            markChangesRecursively(draft[key]);
          }
        });
        each(base, function(key) {
          if (draft[key] === void 0 && !has(draft, key)) {
            assigned[key] = false;
            markChangedES5(state);
          }
        });
      } else if (type === ProxyType.ES5Array) {
        if (hasArrayChanges(state)) {
          markChangedES5(state);
          assigned.length = true;
        }
        if (draft.length < base.length) {
          for (var i = draft.length; i < base.length; i++) {
            assigned[i] = false;
          }
        } else {
          for (var i = base.length; i < draft.length; i++) {
            assigned[i] = true;
          }
        }
        var min = Math.min(draft.length, base.length);
        for (var i = 0; i < min; i++) {
          if (assigned[i] === void 0) {
            markChangesRecursively(draft[i]);
          }
        }
      }
    }
    function hasObjectChanges(state) {
      var base = state.base, draft = state.draft;
      var keys = Object.keys(draft);
      for (var i = keys.length - 1; i >= 0; i--) {
        var key = keys[i];
        var baseValue = base[key];
        if (baseValue === void 0 && !has(base, key)) {
          return true;
        } else {
          var value = draft[key];
          var state_1 = value && value[DRAFT_STATE];
          if (state_1 ? state_1.base !== baseValue : !is(value, baseValue)) {
            return true;
          }
        }
      }
      return keys.length !== Object.keys(base).length;
    }
    function hasArrayChanges(state) {
      var draft = state.draft;
      if (draft.length !== state.base.length) {
        return true;
      }
      var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1);
      if (descriptor && !descriptor.get) {
        return true;
      }
      return false;
    }
    var DraftMap = function(_super) {
      if (!_super) {
        throw new Error("Map is not polyfilled");
      }
      __extends(DraftMap2, _super);
      function DraftMap2(target, parent) {
        this[DRAFT_STATE] = {
          type: ProxyType.Map,
          parent,
          scope: parent ? parent.scope : ImmerScope.current,
          modified: false,
          finalized: false,
          copy: void 0,
          assigned: void 0,
          base: target,
          draft: this,
          isManual: false,
          revoked: false
        };
        return this;
      }
      var p = DraftMap2.prototype;
      Object.defineProperty(p, "size", {
        get: function() {
          return latest(this[DRAFT_STATE]).size;
        },
        enumerable: true,
        configurable: true
      });
      p.has = function(key) {
        return latest(this[DRAFT_STATE]).has(key);
      };
      p.set = function(key, value) {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        if (latest(state).get(key) !== value) {
          prepareCopy$2(state);
          state.scope.immer.markChanged(state);
          state.assigned.set(key, true);
          state.copy.set(key, value);
          state.assigned.set(key, true);
        }
        return this;
      };
      p.delete = function(key) {
        if (!this.has(key)) {
          return false;
        }
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        prepareCopy$2(state);
        state.scope.immer.markChanged(state);
        state.assigned.set(key, false);
        state.copy.delete(key);
        return true;
      };
      p.clear = function() {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        prepareCopy$2(state);
        state.scope.immer.markChanged(state);
        state.assigned = new Map();
        return state.copy.clear();
      };
      p.forEach = function(cb, thisArg) {
        var _this = this;
        var state = this[DRAFT_STATE];
        latest(state).forEach(function(_value, key, _map) {
          cb.call(thisArg, _this.get(key), key, _this);
        });
      };
      p.get = function(key) {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        var value = latest(state).get(key);
        if (state.finalized || !isDraftable(value)) {
          return value;
        }
        if (value !== state.base.get(key)) {
          return value;
        }
        var draft = state.scope.immer.createProxy(value, state);
        prepareCopy$2(state);
        state.copy.set(key, draft);
        return draft;
      };
      p.keys = function() {
        return latest(this[DRAFT_STATE]).keys();
      };
      p.values = function() {
        var _a2;
        var _this = this;
        var iterator = this.keys();
        return _a2 = {}, _a2[iteratorSymbol] = function() {
          return _this.values();
        }, _a2.next = function() {
          var r = iterator.next();
          if (r.done) {
            return r;
          }
          var value = _this.get(r.value);
          return {
            done: false,
            value
          };
        }, _a2;
      };
      p.entries = function() {
        var _a2;
        var _this = this;
        var iterator = this.keys();
        return _a2 = {}, _a2[iteratorSymbol] = function() {
          return _this.entries();
        }, _a2.next = function() {
          var r = iterator.next();
          if (r.done) {
            return r;
          }
          var value = _this.get(r.value);
          return {
            done: false,
            value: [r.value, value]
          };
        }, _a2;
      };
      p[iteratorSymbol] = function() {
        return this.entries();
      };
      return DraftMap2;
    }(Map);
    function proxyMap(target, parent) {
      return new DraftMap(target, parent);
    }
    function prepareCopy$2(state) {
      if (!state.copy) {
        state.assigned = new Map();
        state.copy = new Map(state.base);
      }
    }
    var DraftSet = function(_super) {
      if (!_super) {
        throw new Error("Set is not polyfilled");
      }
      __extends(DraftSet2, _super);
      function DraftSet2(target, parent) {
        this[DRAFT_STATE] = {
          type: ProxyType.Set,
          parent,
          scope: parent ? parent.scope : ImmerScope.current,
          modified: false,
          finalized: false,
          copy: void 0,
          base: target,
          draft: this,
          drafts: new Map(),
          revoked: false,
          isManual: false
        };
        return this;
      }
      var p = DraftSet2.prototype;
      Object.defineProperty(p, "size", {
        get: function() {
          return latest(this[DRAFT_STATE]).size;
        },
        enumerable: true,
        configurable: true
      });
      p.has = function(value) {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        if (!state.copy) {
          return state.base.has(value);
        }
        if (state.copy.has(value)) {
          return true;
        }
        if (state.drafts.has(value) && state.copy.has(state.drafts.get(value))) {
          return true;
        }
        return false;
      };
      p.add = function(value) {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        if (state.copy) {
          state.copy.add(value);
        } else if (!state.base.has(value)) {
          prepareCopy$3(state);
          state.scope.immer.markChanged(state);
          state.copy.add(value);
        }
        return this;
      };
      p.delete = function(value) {
        if (!this.has(value)) {
          return false;
        }
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        prepareCopy$3(state);
        state.scope.immer.markChanged(state);
        return state.copy.delete(value) || (state.drafts.has(value) ? state.copy.delete(state.drafts.get(value)) : false);
      };
      p.clear = function() {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        prepareCopy$3(state);
        state.scope.immer.markChanged(state);
        return state.copy.clear();
      };
      p.values = function() {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        prepareCopy$3(state);
        return state.copy.values();
      };
      p.entries = function entries() {
        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        prepareCopy$3(state);
        return state.copy.entries();
      };
      p.keys = function() {
        return this.values();
      };
      p[iteratorSymbol] = function() {
        return this.values();
      };
      p.forEach = function forEach(cb, thisArg) {
        var iterator = this.values();
        var result = iterator.next();
        while (!result.done) {
          cb.call(thisArg, result.value, result.value, this);
          result = iterator.next();
        }
      };
      return DraftSet2;
    }(Set);
    function proxySet(target, parent) {
      return new DraftSet(target, parent);
    }
    function prepareCopy$3(state) {
      if (!state.copy) {
        state.copy = new Set();
        state.base.forEach(function(value) {
          if (isDraftable(value)) {
            var draft = state.scope.immer.createProxy(value, state);
            state.drafts.set(value, draft);
            state.copy.add(draft);
          } else {
            state.copy.add(value);
          }
        });
      }
    }
    function generatePatches(state, basePath, patches, inversePatches) {
      switch (state.type) {
        case ProxyType.ProxyObject:
        case ProxyType.ES5Object:
        case ProxyType.Map:
          return generatePatchesFromAssigned(state, basePath, patches, inversePatches);
        case ProxyType.ES5Array:
        case ProxyType.ProxyArray:
          return generateArrayPatches(state, basePath, patches, inversePatches);
        case ProxyType.Set:
          return generateSetPatches(state, basePath, patches, inversePatches);
      }
    }
    function generateArrayPatches(state, basePath, patches, inversePatches) {
      var _a2, _b;
      var base = state.base, assigned = state.assigned, copy = state.copy;
      if (!copy) {
        die();
      }
      if (copy.length < base.length) {
        _a2 = [copy, base], base = _a2[0], copy = _a2[1];
        _b = [inversePatches, patches], patches = _b[0], inversePatches = _b[1];
      }
      var delta = copy.length - base.length;
      var start = 0;
      while (base[start] === copy[start] && start < base.length) {
        ++start;
      }
      var end = base.length;
      while (end > start && base[end - 1] === copy[end + delta - 1]) {
        --end;
      }
      for (var i = start; i < end; ++i) {
        if (assigned[i] && copy[i] !== base[i]) {
          var path = basePath.concat([i]);
          patches.push({
            op: "replace",
            path,
            value: copy[i]
          });
          inversePatches.push({
            op: "replace",
            path,
            value: base[i]
          });
        }
      }
      var replaceCount = patches.length;
      for (var i = end + delta - 1; i >= end; --i) {
        var path = basePath.concat([i]);
        patches[replaceCount + i - end] = {
          op: "add",
          path,
          value: copy[i]
        };
        inversePatches.push({
          op: "remove",
          path
        });
      }
    }
    function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {
      var base = state.base, copy = state.copy;
      each(state.assigned, function(key, assignedValue) {
        var origValue = get(base, key);
        var value = get(copy, key);
        var op = !assignedValue ? "remove" : has(base, key) ? "replace" : "add";
        if (origValue === value && op === "replace") {
          return;
        }
        var path = basePath.concat(key);
        patches.push(op === "remove" ? {
          op,
          path
        } : {
          op,
          path,
          value
        });
        inversePatches.push(op === "add" ? {
          op: "remove",
          path
        } : op === "remove" ? {
          op: "add",
          path,
          value: origValue
        } : {
          op: "replace",
          path,
          value: origValue
        });
      });
    }
    function generateSetPatches(state, basePath, patches, inversePatches) {
      var base = state.base, copy = state.copy;
      var i = 0;
      base.forEach(function(value) {
        if (!copy.has(value)) {
          var path = basePath.concat([i]);
          patches.push({
            op: "remove",
            path,
            value
          });
          inversePatches.unshift({
            op: "add",
            path,
            value
          });
        }
        i++;
      });
      i = 0;
      copy.forEach(function(value) {
        if (!base.has(value)) {
          var path = basePath.concat([i]);
          patches.push({
            op: "add",
            path,
            value
          });
          inversePatches.unshift({
            op: "remove",
            path,
            value
          });
        }
        i++;
      });
    }
    function applyPatches(draft, patches) {
      patches.forEach(function(patch) {
        var path = patch.path, op = patch.op;
        if (!path.length) {
          die();
        }
        var base = draft;
        for (var i = 0; i < path.length - 1; i++) {
          base = get(base, path[i]);
          if (!base || typeof base !== "object") {
            throw new Error("Cannot apply patch, path doesn't resolve: " + path.join("/"));
          }
        }
        var type = getArchtype(base);
        var value = deepClonePatchValue(patch.value);
        var key = path[path.length - 1];
        switch (op) {
          case "replace":
            switch (type) {
              case Archtype.Map:
                return base.set(key, value);
              case Archtype.Set:
                throw new Error('Sets cannot have "replace" patches.');
              default:
                return base[key] = value;
            }
          case "add":
            switch (type) {
              case Archtype.Array:
                return base.splice(key, 0, value);
              case Archtype.Map:
                return base.set(key, value);
              case Archtype.Set:
                return base.add(value);
              default:
                return base[key] = value;
            }
          case "remove":
            switch (type) {
              case Archtype.Array:
                return base.splice(key, 1);
              case Archtype.Map:
                return base.delete(key);
              case Archtype.Set:
                return base.delete(patch.value);
              default:
                return delete base[key];
            }
          default:
            throw new Error("Unsupported patch operation: " + op);
        }
      });
      return draft;
    }
    function deepClonePatchValue(obj) {
      if (!obj || typeof obj !== "object") {
        return obj;
      }
      if (Array.isArray(obj)) {
        return obj.map(deepClonePatchValue);
      }
      if (isMap(obj)) {
        return new Map(Array.from(obj.entries()).map(function(_a2) {
          var k = _a2[0], v = _a2[1];
          return [k, deepClonePatchValue(v)];
        }));
      }
      if (isSet(obj)) {
        return new Set(Array.from(obj).map(deepClonePatchValue));
      }
      var cloned = Object.create(Object.getPrototypeOf(obj));
      for (var key in obj) {
        cloned[key] = deepClonePatchValue(obj[key]);
      }
      return cloned;
    }
    function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    }
    function verifyMinified() {
    }
    var configDefaults = {
      useProxies: typeof Proxy !== "undefined" && typeof Proxy.revocable !== "undefined" && typeof Reflect !== "undefined",
      autoFreeze: typeof process !== "undefined" ? true : verifyMinified.name === "verifyMinified",
      onAssign: null,
      onDelete: null,
      onCopy: null
    };
    var Immer = function() {
      function Immer2(config) {
        var _this = this;
        this.useProxies = false;
        this.autoFreeze = false;
        each(configDefaults, function(key, value) {
          var _a2, _b;
          _this[key] = (_b = (_a2 = config) === null || _a2 === void 0 ? void 0 : _a2[key], _b !== null && _b !== void 0 ? _b : value);
        });
        this.setUseProxies(this.useProxies);
        this.produce = this.produce.bind(this);
        this.produceWithPatches = this.produceWithPatches.bind(this);
      }
      Immer2.prototype.produce = function(base, recipe, patchListener) {
        var _this = this;
        if (typeof base === "function" && typeof recipe !== "function") {
          var defaultBase_1 = recipe;
          recipe = base;
          var self_1 = this;
          return function curriedProduce(base2) {
            var arguments$1 = arguments;
            var _this2 = this;
            if (base2 === void 0) {
              base2 = defaultBase_1;
            }
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
            }
            return self_1.produce(base2, function(draft) {
              return recipe.call.apply(recipe, __spreadArrays([_this2, draft], args));
            });
          };
        }
        {
          if (typeof recipe !== "function") {
            throw new Error("The first or second argument to `produce` must be a function");
          }
          if (patchListener !== void 0 && typeof patchListener !== "function") {
            throw new Error("The third argument to `produce` must be a function or undefined");
          }
        }
        var result;
        if (isDraftable(base)) {
          var scope_1 = ImmerScope.enter(this);
          var proxy = this.createProxy(base, void 0);
          var hasError = true;
          try {
            result = recipe(proxy);
            hasError = false;
          } finally {
            if (hasError) {
              scope_1.revoke();
            } else {
              scope_1.leave();
            }
          }
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then(function(result2) {
              scope_1.usePatches(patchListener);
              return processResult(_this, result2, scope_1);
            }, function(error) {
              scope_1.revoke();
              throw error;
            });
          }
          scope_1.usePatches(patchListener);
          return processResult(this, result, scope_1);
        } else {
          result = recipe(base);
          if (result === NOTHING) {
            return void 0;
          }
          if (result === void 0) {
            result = base;
          }
          maybeFreeze(this, result, true);
          return result;
        }
      };
      Immer2.prototype.produceWithPatches = function(arg1, arg2, arg3) {
        var _this = this;
        if (typeof arg1 === "function") {
          return function(state) {
            var arguments$1 = arguments;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments$1[_i];
            }
            return _this.produceWithPatches(state, function(draft) {
              return arg1.apply(void 0, __spreadArrays([draft], args));
            });
          };
        }
        if (arg3) {
          die();
        }
        var patches, inversePatches;
        var nextState = this.produce(arg1, arg2, function(p, ip) {
          patches = p;
          inversePatches = ip;
        });
        return [nextState, patches, inversePatches];
      };
      Immer2.prototype.createDraft = function(base) {
        if (!isDraftable(base)) {
          throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object");
        }
        var scope = ImmerScope.enter(this);
        var proxy = this.createProxy(base, void 0);
        proxy[DRAFT_STATE].isManual = true;
        scope.leave();
        return proxy;
      };
      Immer2.prototype.finishDraft = function(draft, patchListener) {
        var state = draft && draft[DRAFT_STATE];
        if (!state || !state.isManual) {
          throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`");
        }
        if (state.finalized) {
          throw new Error("The given draft is already finalized");
        }
        var scope = state.scope;
        scope.usePatches(patchListener);
        return processResult(this, void 0, scope);
      };
      Immer2.prototype.setAutoFreeze = function(value) {
        this.autoFreeze = value;
      };
      Immer2.prototype.setUseProxies = function(value) {
        this.useProxies = value;
      };
      Immer2.prototype.applyPatches = function(base, patches) {
        var i;
        for (i = patches.length - 1; i >= 0; i--) {
          var patch = patches[i];
          if (patch.path.length === 0 && patch.op === "replace") {
            base = patch.value;
            break;
          }
        }
        if (isDraft(base)) {
          return applyPatches(base, patches);
        }
        return this.produce(base, function(draft) {
          return applyPatches(draft, patches.slice(i + 1));
        });
      };
      Immer2.prototype.createProxy = function(value, parent) {
        var draft = isMap(value) ? proxyMap(value, parent) : isSet(value) ? proxySet(value, parent) : this.useProxies ? createProxy(value, parent) : createES5Proxy(value, parent);
        var scope = parent ? parent.scope : ImmerScope.current;
        scope.drafts.push(draft);
        return draft;
      };
      Immer2.prototype.willFinalize = function(scope, thing, isReplaced) {
        if (!this.useProxies) {
          willFinalizeES5(scope, thing, isReplaced);
        }
      };
      Immer2.prototype.markChanged = function(state) {
        if (this.useProxies) {
          markChanged(state);
        } else {
          markChangedES5(state);
        }
      };
      return Immer2;
    }();
    var immer = new Immer();
    var produce = immer.produce;
    var produceWithPatches = immer.produceWithPatches.bind(immer);
    var setAutoFreeze = immer.setAutoFreeze.bind(immer);
    var setUseProxies = immer.setUseProxies.bind(immer);
    var applyPatches$1 = immer.applyPatches.bind(immer);
    var createDraft = immer.createDraft.bind(immer);
    var finishDraft = immer.finishDraft.bind(immer);
    function castDraft(value) {
      return value;
    }
    function castImmutable(value) {
      return value;
    }
    exports.Immer = Immer;
    exports.applyPatches = applyPatches$1;
    exports.castDraft = castDraft;
    exports.castImmutable = castImmutable;
    exports.createDraft = createDraft;
    exports.default = produce;
    exports.finishDraft = finishDraft;
    exports.immerable = DRAFTABLE;
    exports.isDraft = isDraft;
    exports.isDraftable = isDraftable;
    exports.nothing = NOTHING;
    exports.original = original;
    exports.produce = produce;
    exports.produceWithPatches = produceWithPatches;
    exports.setAutoFreeze = setAutoFreeze;
    exports.setUseProxies = setUseProxies;
  },

  37(require, exports, module) {
    // node_modules/esrever/esrever.js
    ;
    (function(root) {
      var freeExports = typeof exports == "object" && exports;
      var freeModule = typeof module == "object" && module && module.exports == freeExports && module;
      var freeGlobal = typeof global == "object" && global;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
        root = freeGlobal;
      }
      var regexSymbolWithCombiningMarks = /([\0-\u02FF\u0370-\u1AAF\u1B00-\u1DBF\u1E00-\u20CF\u2100-\uD7FF\uE000-\uFE1F\uFE30-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])([\u0300-\u036F\u1AB0-\u1AFF\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]+)/g;
      var regexSurrogatePair = /([\uD800-\uDBFF])([\uDC00-\uDFFF])/g;
      var reverse = function(string) {
        string = string.replace(regexSymbolWithCombiningMarks, function($0, $1, $2) {
          return reverse($2) + $1;
        }).replace(regexSurrogatePair, "$2$1");
        var result = "";
        var index = string.length;
        while (index--) {
          result += string.charAt(index);
        }
        return result;
      };
      var esrever = {
        version: "0.2.0",
        reverse
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define(function() {
          return esrever;
        });
      } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
          freeModule.exports = esrever;
        } else {
          for (var key in esrever) {
            esrever.hasOwnProperty(key) && (freeExports[key] = esrever[key]);
          }
        }
      } else {
        root.esrever = esrever;
      }
    })(this);
  },

  82(require, exports) {
    // node_modules/slate/dist/index.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var isPlainObject = _interopDefault(require(43 /* is-plain-object */));
    var immer = require(41 /* immer */);
    var esrever = require(37 /* esrever */);
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
    }
    var arrayWithoutHoles = _arrayWithoutHoles;
    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
        return Array.from(iter);
    }
    var iterableToArray = _iterableToArray;
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
    var nonIterableSpread = _nonIterableSpread;
    function _toConsumableArray(arr) {
      return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
    }
    var toConsumableArray = _toConsumableArray;
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var arrayWithHoles = _arrayWithHoles;
    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    var iterableToArrayLimit = _iterableToArrayLimit;
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    var nonIterableRest = _nonIterableRest;
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
    }
    var slicedToArray = _slicedToArray;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var defineProperty = _defineProperty;
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var objectWithoutProperties = _objectWithoutProperties;
    var DIRTY_PATHS = new WeakMap();
    var FLUSHING = new WeakMap();
    var NORMALIZING = new WeakMap();
    var PATH_REFS = new WeakMap();
    var POINT_REFS = new WeakMap();
    var RANGE_REFS = new WeakMap();
    var SPACE = /\s/;
    var PUNCTUATION = /[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
    var CHAMELEON = /['\u2018\u2019]/;
    var SURROGATE_START = 55296;
    var SURROGATE_END = 57343;
    var ZERO_WIDTH_JOINER = 8205;
    var getCharacterDistance = function getCharacterDistance2(text) {
      var offset = 0;
      var prev = null;
      var charCode = text.charCodeAt(0);
      while (charCode) {
        if (isSurrogate(charCode)) {
          var modifier = isModifier(charCode, text, offset);
          if (prev === "SURR" || prev === "BMP") {
            break;
          }
          offset += 2;
          prev = modifier ? "MOD" : "SURR";
          charCode = text.charCodeAt(offset);
          continue;
        }
        if (charCode === ZERO_WIDTH_JOINER) {
          offset += 1;
          prev = "ZWJ";
          charCode = text.charCodeAt(offset);
          continue;
        }
        if (isBMPEmoji(charCode)) {
          if (prev && prev !== "ZWJ" && prev !== "VAR") {
            break;
          }
          offset += 1;
          prev = "BMP";
          charCode = text.charCodeAt(offset);
          continue;
        }
        if (isVariationSelector(charCode)) {
          if (prev && prev !== "ZWJ") {
            break;
          }
          offset += 1;
          prev = "VAR";
          charCode = text.charCodeAt(offset);
          continue;
        }
        if (prev === "MOD") {
          offset += 1;
          break;
        }
        break;
      }
      return offset || 1;
    };
    var getWordDistance = function getWordDistance2(text) {
      var length = 0;
      var i = 0;
      var started = false;
      var _char;
      while (_char = text.charAt(i)) {
        var l = getCharacterDistance(_char);
        _char = text.slice(i, i + l);
        var rest = text.slice(i + l);
        if (isWordCharacter(_char, rest)) {
          started = true;
          length += l;
        } else if (!started) {
          length += l;
        } else {
          break;
        }
        i += l;
      }
      return length;
    };
    var isWordCharacter = function isWordCharacter2(_char2, remaining) {
      if (SPACE.test(_char2)) {
        return false;
      }
      if (CHAMELEON.test(_char2)) {
        var next = remaining.charAt(0);
        var length = getCharacterDistance(next);
        next = remaining.slice(0, length);
        var rest = remaining.slice(length);
        if (isWordCharacter2(next, rest)) {
          return true;
        }
      }
      if (PUNCTUATION.test(_char2)) {
        return false;
      }
      return true;
    };
    var isSurrogate = function isSurrogate2(code) {
      return SURROGATE_START <= code && code <= SURROGATE_END;
    };
    var isModifier = function isModifier2(code, text, offset) {
      if (code === 55356) {
        var next = text.charCodeAt(offset + 1);
        return next <= 57343 && next >= 57339;
      }
      return false;
    };
    var isVariationSelector = function isVariationSelector2(code) {
      return code <= 65039 && code >= 65024;
    };
    var isBMPEmoji = function isBMPEmoji2(code) {
      return code === 10084 || code === 9794 || code === 9792 || code === 9760 || code === 9877 || code === 9992 || code === 9711;
    };
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Editor = {
      above: function above(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$voids = options.voids, voids = _options$voids === void 0 ? false : _options$voids, _options$mode = options.mode, mode = _options$mode === void 0 ? "lowest" : _options$mode, _options$at = options.at, at = _options$at === void 0 ? editor.selection : _options$at, match = options.match;
        if (!at) {
          return;
        }
        var path = Editor.path(editor, at);
        var reverse = mode === "lowest";
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = Editor.levels(editor, {
            at: path,
            voids,
            match,
            reverse
          })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2), n = _step$value[0], p = _step$value[1];
            if (!Text.isText(n) && !Path.equals(path, p)) {
              return [n, p];
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      },
      addMark: function addMark(editor, key, value) {
        editor.addMark(key, value);
      },
      after: function after(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var anchor = Editor.point(editor, at, {
          edge: "end"
        });
        var focus = Editor.end(editor, []);
        var range = {
          anchor,
          focus
        };
        var _options$distance = options.distance, distance = _options$distance === void 0 ? 1 : _options$distance;
        var d = 0;
        var target;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
          for (var _iterator2 = Editor.positions(editor, _objectSpread({}, options, {
            at: range
          }))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var p = _step2.value;
            if (d > distance) {
              break;
            }
            if (d !== 0) {
              target = p;
            }
            d++;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
        return target;
      },
      before: function before(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var anchor = Editor.start(editor, []);
        var focus = Editor.point(editor, at, {
          edge: "start"
        });
        var range = {
          anchor,
          focus
        };
        var _options$distance2 = options.distance, distance = _options$distance2 === void 0 ? 1 : _options$distance2;
        var d = 0;
        var target;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = void 0;
        try {
          for (var _iterator3 = Editor.positions(editor, _objectSpread({}, options, {
            at: range,
            reverse: true
          }))[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var p = _step3.value;
            if (d > distance) {
              break;
            }
            if (d !== 0) {
              target = p;
            }
            d++;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
        return target;
      },
      deleteBackward: function deleteBackward(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$unit = options.unit, unit = _options$unit === void 0 ? "character" : _options$unit;
        editor.deleteBackward(unit);
      },
      deleteForward: function deleteForward(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$unit2 = options.unit, unit = _options$unit2 === void 0 ? "character" : _options$unit2;
        editor.deleteForward(unit);
      },
      deleteFragment: function deleteFragment(editor) {
        editor.deleteFragment();
      },
      edges: function edges(editor, at) {
        return [Editor.start(editor, at), Editor.end(editor, at)];
      },
      end: function end(editor, at) {
        return Editor.point(editor, at, {
          edge: "end"
        });
      },
      first: function first(editor, at) {
        var path = Editor.path(editor, at, {
          edge: "start"
        });
        return Editor.node(editor, path);
      },
      fragment: function fragment(editor, at) {
        var range = Editor.range(editor, at);
        var fragment2 = Node.fragment(editor, range);
        return fragment2;
      },
      hasBlocks: function hasBlocks(editor, element) {
        return element.children.some(function(n) {
          return Editor.isBlock(editor, n);
        });
      },
      hasInlines: function hasInlines(editor, element) {
        return element.children.some(function(n) {
          return Text.isText(n) || Editor.isInline(editor, n);
        });
      },
      hasTexts: function hasTexts(editor, element) {
        return element.children.every(function(n) {
          return Text.isText(n);
        });
      },
      insertBreak: function insertBreak(editor) {
        editor.insertBreak();
      },
      insertFragment: function insertFragment(editor, fragment) {
        editor.insertFragment(fragment);
      },
      insertNode: function insertNode(editor, node) {
        editor.insertNode(node);
      },
      insertText: function insertText(editor, text) {
        editor.insertText(text);
      },
      isBlock: function isBlock(editor, value) {
        return Element.isElement(value) && !editor.isInline(value);
      },
      isEditor: function isEditor(value) {
        return isPlainObject(value) && typeof value.addMark === "function" && typeof value.apply === "function" && typeof value.deleteBackward === "function" && typeof value.deleteForward === "function" && typeof value.deleteFragment === "function" && typeof value.insertBreak === "function" && typeof value.insertFragment === "function" && typeof value.insertNode === "function" && typeof value.insertText === "function" && typeof value.isInline === "function" && typeof value.isVoid === "function" && typeof value.normalizeNode === "function" && typeof value.onChange === "function" && typeof value.removeMark === "function" && (value.marks === null || isPlainObject(value.marks)) && (value.selection === null || Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);
      },
      isEnd: function isEnd(editor, point, at) {
        var end = Editor.end(editor, at);
        return Point.equals(point, end);
      },
      isEdge: function isEdge(editor, point, at) {
        return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);
      },
      isEmpty: function isEmpty(editor, element) {
        var children = element.children;
        var _children = slicedToArray(children, 1), first = _children[0];
        return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === "" && !editor.isVoid(element);
      },
      isInline: function isInline(editor, value) {
        return Element.isElement(value) && editor.isInline(value);
      },
      isNormalizing: function isNormalizing(editor) {
        var isNormalizing2 = NORMALIZING.get(editor);
        return isNormalizing2 === void 0 ? true : isNormalizing2;
      },
      isStart: function isStart(editor, point, at) {
        if (point.offset !== 0) {
          return false;
        }
        var start = Editor.start(editor, at);
        return Point.equals(point, start);
      },
      isVoid: function isVoid(editor, value) {
        return Element.isElement(value) && editor.isVoid(value);
      },
      last: function last(editor, at) {
        var path = Editor.path(editor, at, {
          edge: "end"
        });
        return Editor.node(editor, path);
      },
      leaf: function leaf(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var path = Editor.path(editor, at, options);
        var node = Node.leaf(editor, path);
        return [node, path];
      },
      levels: function* levels(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$at2 = options.at, at = _options$at2 === void 0 ? editor.selection : _options$at2, _options$reverse = options.reverse, reverse = _options$reverse === void 0 ? false : _options$reverse, _options$voids2 = options.voids, voids = _options$voids2 === void 0 ? false : _options$voids2;
        var match = options.match;
        if (match == null) {
          match = function match2() {
            return true;
          };
        }
        if (!at) {
          return;
        }
        var levels2 = [];
        var path = Editor.path(editor, at);
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = void 0;
        try {
          for (var _iterator4 = Node.levels(editor, path)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _step4$value = slicedToArray(_step4.value, 2), n = _step4$value[0], p = _step4$value[1];
            if (!match(n)) {
              continue;
            }
            levels2.push([n, p]);
            if (!voids && Editor.isVoid(editor, n)) {
              break;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
        if (reverse) {
          levels2.reverse();
        }
        yield* levels2;
      },
      marks: function marks(editor) {
        var marks2 = editor.marks, selection = editor.selection;
        if (!selection) {
          return null;
        }
        if (marks2) {
          return marks2;
        }
        if (Range.isExpanded(selection)) {
          var _Editor$nodes = Editor.nodes(editor, {
            match: Text.isText
          }), _Editor$nodes2 = slicedToArray(_Editor$nodes, 1), match = _Editor$nodes2[0];
          if (match) {
            var _match = slicedToArray(match, 1), _node = _match[0];
            var _text = _node.text, _rest = objectWithoutProperties(_node, ["text"]);
            return _rest;
          } else {
            return {};
          }
        }
        var anchor = selection.anchor;
        var path = anchor.path;
        var _Editor$leaf = Editor.leaf(editor, path), _Editor$leaf2 = slicedToArray(_Editor$leaf, 1), node = _Editor$leaf2[0];
        if (anchor.offset === 0) {
          var prev = Editor.previous(editor, {
            at: path,
            match: Text.isText
          });
          var block = Editor.above(editor, {
            match: function match2(n) {
              return Editor.isBlock(editor, n);
            }
          });
          if (prev && block) {
            var _prev = slicedToArray(prev, 2), prevNode = _prev[0], prevPath = _prev[1];
            var _block = slicedToArray(block, 2), blockPath = _block[1];
            if (Path.isAncestor(blockPath, prevPath)) {
              node = prevNode;
            }
          }
        }
        var _node2 = node, text = _node2.text, rest = objectWithoutProperties(_node2, ["text"]);
        return rest;
      },
      next: function next(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$mode2 = options.mode, mode = _options$mode2 === void 0 ? "lowest" : _options$mode2, _options$voids3 = options.voids, voids = _options$voids3 === void 0 ? false : _options$voids3;
        var match = options.match, _options$at3 = options.at, at = _options$at3 === void 0 ? editor.selection : _options$at3;
        if (!at) {
          return;
        }
        var _Editor$last = Editor.last(editor, at), _Editor$last2 = slicedToArray(_Editor$last, 2), from = _Editor$last2[1];
        var _Editor$last3 = Editor.last(editor, []), _Editor$last4 = slicedToArray(_Editor$last3, 2), to = _Editor$last4[1];
        var span = [from, to];
        if (Path.isPath(at) && at.length === 0) {
          throw new Error("Cannot get the next node from the root node!");
        }
        if (match == null) {
          if (Path.isPath(at)) {
            var _Editor$parent = Editor.parent(editor, at), _Editor$parent2 = slicedToArray(_Editor$parent, 1), parent = _Editor$parent2[0];
            match = function match2(n) {
              return parent.children.includes(n);
            };
          } else {
            match = function match2() {
              return true;
            };
          }
        }
        var _Editor$nodes3 = Editor.nodes(editor, {
          at: span,
          match,
          mode,
          voids
        }), _Editor$nodes4 = slicedToArray(_Editor$nodes3, 2), next2 = _Editor$nodes4[1];
        return next2;
      },
      node: function node(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var path = Editor.path(editor, at, options);
        var node2 = Node.get(editor, path);
        return [node2, path];
      },
      nodes: function* nodes(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$at4 = options.at, at = _options$at4 === void 0 ? editor.selection : _options$at4, _options$mode3 = options.mode, mode = _options$mode3 === void 0 ? "all" : _options$mode3, _options$universal = options.universal, universal = _options$universal === void 0 ? false : _options$universal, _options$reverse2 = options.reverse, reverse = _options$reverse2 === void 0 ? false : _options$reverse2, _options$voids4 = options.voids, voids = _options$voids4 === void 0 ? false : _options$voids4;
        var match = options.match;
        if (!match) {
          match = function match2() {
            return true;
          };
        }
        if (!at) {
          return;
        }
        var from;
        var to;
        if (Span.isSpan(at)) {
          from = at[0];
          to = at[1];
        } else {
          var first = Editor.path(editor, at, {
            edge: "start"
          });
          var last = Editor.path(editor, at, {
            edge: "end"
          });
          from = reverse ? last : first;
          to = reverse ? first : last;
        }
        var iterable = Node.nodes(editor, {
          reverse,
          from,
          to,
          pass: function pass(_ref) {
            var _ref2 = slicedToArray(_ref, 1), n = _ref2[0];
            return voids ? false : Editor.isVoid(editor, n);
          }
        });
        var matches = [];
        var hit;
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = void 0;
        try {
          for (var _iterator5 = iterable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _step5$value = slicedToArray(_step5.value, 2), node = _step5$value[0], path = _step5$value[1];
            var isLower = hit && Path.compare(path, hit[1]) === 0;
            if (mode === "highest" && isLower) {
              continue;
            }
            if (!match(node)) {
              if (universal && !isLower && Text.isText(node)) {
                return;
              } else {
                continue;
              }
            }
            if (mode === "lowest" && isLower) {
              hit = [node, path];
              continue;
            }
            var emit = mode === "lowest" ? hit : [node, path];
            if (emit) {
              if (universal) {
                matches.push(emit);
              } else {
                yield emit;
              }
            }
            hit = [node, path];
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
        if (mode === "lowest" && hit) {
          if (universal) {
            matches.push(hit);
          } else {
            yield hit;
          }
        }
        if (universal) {
          yield* matches;
        }
      },
      normalize: function normalize(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$force = options.force, force = _options$force === void 0 ? false : _options$force;
        var getDirtyPaths2 = function getDirtyPaths3(editor2) {
          return DIRTY_PATHS.get(editor2) || [];
        };
        if (!Editor.isNormalizing(editor)) {
          return;
        }
        if (force) {
          var allPaths = Array.from(Node.nodes(editor), function(_ref3) {
            var _ref4 = slicedToArray(_ref3, 2), p = _ref4[1];
            return p;
          });
          DIRTY_PATHS.set(editor, allPaths);
        }
        if (getDirtyPaths2(editor).length === 0) {
          return;
        }
        Editor.withoutNormalizing(editor, function() {
          var max = getDirtyPaths2(editor).length * 42;
          var m = 0;
          while (getDirtyPaths2(editor).length !== 0) {
            if (m > max) {
              throw new Error("\n            Could not completely normalize the editor after ".concat(max, " iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));
            }
            var path = getDirtyPaths2(editor).pop();
            var entry = Editor.node(editor, path);
            editor.normalizeNode(entry);
            m++;
          }
        });
      },
      parent: function parent(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var path = Editor.path(editor, at, options);
        var parentPath = Path.parent(path);
        var entry = Editor.node(editor, parentPath);
        return entry;
      },
      path: function path(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var depth = options.depth, edge = options.edge;
        if (Path.isPath(at)) {
          if (edge === "start") {
            var _Node$first = Node.first(editor, at), _Node$first2 = slicedToArray(_Node$first, 2), firstPath = _Node$first2[1];
            at = firstPath;
          } else if (edge === "end") {
            var _Node$last = Node.last(editor, at), _Node$last2 = slicedToArray(_Node$last, 2), lastPath = _Node$last2[1];
            at = lastPath;
          }
        }
        if (Range.isRange(at)) {
          if (edge === "start") {
            at = Range.start(at);
          } else if (edge === "end") {
            at = Range.end(at);
          } else {
            at = Path.common(at.anchor.path, at.focus.path);
          }
        }
        if (Point.isPoint(at)) {
          at = at.path;
        }
        if (depth != null) {
          at = at.slice(0, depth);
        }
        return at;
      },
      pathRef: function pathRef(editor, path) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$affinity = options.affinity, affinity = _options$affinity === void 0 ? "forward" : _options$affinity;
        var ref = {
          current: path,
          affinity,
          unref: function unref() {
            var current = ref.current;
            var pathRefs = Editor.pathRefs(editor);
            pathRefs["delete"](ref);
            ref.current = null;
            return current;
          }
        };
        var refs = Editor.pathRefs(editor);
        refs.add(ref);
        return ref;
      },
      pathRefs: function pathRefs(editor) {
        var refs = PATH_REFS.get(editor);
        if (!refs) {
          refs = new Set();
          PATH_REFS.set(editor, refs);
        }
        return refs;
      },
      point: function point(editor, at) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$edge = options.edge, edge = _options$edge === void 0 ? "start" : _options$edge;
        if (Path.isPath(at)) {
          var path;
          if (edge === "end") {
            var _Node$last3 = Node.last(editor, at), _Node$last4 = slicedToArray(_Node$last3, 2), lastPath = _Node$last4[1];
            path = lastPath;
          } else {
            var _Node$first3 = Node.first(editor, at), _Node$first4 = slicedToArray(_Node$first3, 2), firstPath = _Node$first4[1];
            path = firstPath;
          }
          var node = Node.get(editor, path);
          if (!Text.isText(node)) {
            throw new Error("Cannot get the ".concat(edge, " point in the node at path [").concat(at, "] because it has no ").concat(edge, " text node."));
          }
          return {
            path,
            offset: edge === "end" ? node.text.length : 0
          };
        }
        if (Range.isRange(at)) {
          var _Range$edges = Range.edges(at), _Range$edges2 = slicedToArray(_Range$edges, 2), start = _Range$edges2[0], end = _Range$edges2[1];
          return edge === "start" ? start : end;
        }
        return at;
      },
      pointRef: function pointRef(editor, point) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$affinity2 = options.affinity, affinity = _options$affinity2 === void 0 ? "forward" : _options$affinity2;
        var ref = {
          current: point,
          affinity,
          unref: function unref() {
            var current = ref.current;
            var pointRefs = Editor.pointRefs(editor);
            pointRefs["delete"](ref);
            ref.current = null;
            return current;
          }
        };
        var refs = Editor.pointRefs(editor);
        refs.add(ref);
        return ref;
      },
      pointRefs: function pointRefs(editor) {
        var refs = POINT_REFS.get(editor);
        if (!refs) {
          refs = new Set();
          POINT_REFS.set(editor, refs);
        }
        return refs;
      },
      positions: function* positions(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$at5 = options.at, at = _options$at5 === void 0 ? editor.selection : _options$at5, _options$unit3 = options.unit, unit = _options$unit3 === void 0 ? "offset" : _options$unit3, _options$reverse3 = options.reverse, reverse = _options$reverse3 === void 0 ? false : _options$reverse3;
        if (!at) {
          return;
        }
        var range = Editor.range(editor, at);
        var _Range$edges3 = Range.edges(range), _Range$edges4 = slicedToArray(_Range$edges3, 2), start = _Range$edges4[0], end = _Range$edges4[1];
        var first = reverse ? end : start;
        var string = "";
        var available = 0;
        var offset = 0;
        var distance = null;
        var isNewBlock = false;
        var advance = function advance2() {
          if (distance == null) {
            if (unit === "character") {
              distance = getCharacterDistance(string);
            } else if (unit === "word") {
              distance = getWordDistance(string);
            } else if (unit === "line" || unit === "block") {
              distance = string.length;
            } else {
              distance = 1;
            }
            string = string.slice(distance);
          }
          offset = reverse ? offset - distance : offset + distance;
          available = available - distance;
          distance = available >= 0 ? null : 0 - available;
        };
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = void 0;
        try {
          for (var _iterator6 = Editor.nodes(editor, {
            at,
            reverse
          })[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _step6$value = slicedToArray(_step6.value, 2), node = _step6$value[0], path = _step6$value[1];
            if (Element.isElement(node)) {
              if (editor.isVoid(node)) {
                yield Editor.start(editor, path);
                continue;
              }
              if (editor.isInline(node)) {
                continue;
              }
              if (Editor.hasInlines(editor, node)) {
                var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);
                var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);
                var text = Editor.string(editor, {
                  anchor: s,
                  focus: e
                });
                string = reverse ? esrever.reverse(text) : text;
                isNewBlock = true;
              }
            }
            if (Text.isText(node)) {
              var isFirst = Path.equals(path, first.path);
              available = node.text.length;
              offset = reverse ? available : 0;
              if (isFirst) {
                available = reverse ? first.offset : available - first.offset;
                offset = first.offset;
              }
              if (isFirst || isNewBlock || unit === "offset") {
                yield {
                  path,
                  offset
                };
              }
              while (true) {
                if (string === "") {
                  break;
                } else {
                  advance();
                }
                if (available >= 0) {
                  yield {
                    path,
                    offset
                  };
                } else {
                  break;
                }
              }
              isNewBlock = false;
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      },
      previous: function previous(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$mode4 = options.mode, mode = _options$mode4 === void 0 ? "lowest" : _options$mode4, _options$voids5 = options.voids, voids = _options$voids5 === void 0 ? false : _options$voids5;
        var match = options.match, _options$at6 = options.at, at = _options$at6 === void 0 ? editor.selection : _options$at6;
        if (!at) {
          return;
        }
        var _Editor$first = Editor.first(editor, at), _Editor$first2 = slicedToArray(_Editor$first, 2), from = _Editor$first2[1];
        var _Editor$first3 = Editor.first(editor, []), _Editor$first4 = slicedToArray(_Editor$first3, 2), to = _Editor$first4[1];
        var span = [from, to];
        if (Path.isPath(at) && at.length === 0) {
          throw new Error("Cannot get the previous node from the root node!");
        }
        if (match == null) {
          if (Path.isPath(at)) {
            var _Editor$parent3 = Editor.parent(editor, at), _Editor$parent4 = slicedToArray(_Editor$parent3, 1), parent = _Editor$parent4[0];
            match = function match2(n) {
              return parent.children.includes(n);
            };
          } else {
            match = function match2() {
              return true;
            };
          }
        }
        var _Editor$nodes5 = Editor.nodes(editor, {
          reverse: true,
          at: span,
          match,
          mode,
          voids
        }), _Editor$nodes6 = slicedToArray(_Editor$nodes5, 2), previous2 = _Editor$nodes6[1];
        return previous2;
      },
      range: function range(editor, at, to) {
        if (Range.isRange(at) && !to) {
          return at;
        }
        var start = Editor.start(editor, at);
        var end = Editor.end(editor, to || at);
        return {
          anchor: start,
          focus: end
        };
      },
      rangeRef: function rangeRef(editor, range) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$affinity3 = options.affinity, affinity = _options$affinity3 === void 0 ? "forward" : _options$affinity3;
        var ref = {
          current: range,
          affinity,
          unref: function unref() {
            var current = ref.current;
            var rangeRefs = Editor.rangeRefs(editor);
            rangeRefs["delete"](ref);
            ref.current = null;
            return current;
          }
        };
        var refs = Editor.rangeRefs(editor);
        refs.add(ref);
        return ref;
      },
      rangeRefs: function rangeRefs(editor) {
        var refs = RANGE_REFS.get(editor);
        if (!refs) {
          refs = new Set();
          RANGE_REFS.set(editor, refs);
        }
        return refs;
      },
      removeMark: function removeMark(editor, key) {
        editor.removeMark(key);
      },
      start: function start(editor, at) {
        return Editor.point(editor, at, {
          edge: "start"
        });
      },
      string: function string(editor, at) {
        var range = Editor.range(editor, at);
        var _Range$edges5 = Range.edges(range), _Range$edges6 = slicedToArray(_Range$edges5, 2), start = _Range$edges6[0], end = _Range$edges6[1];
        var text = "";
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = void 0;
        try {
          for (var _iterator7 = Editor.nodes(editor, {
            at: range,
            match: Text.isText
          })[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _step7$value = slicedToArray(_step7.value, 2), node = _step7$value[0], path = _step7$value[1];
            var t = node.text;
            if (Path.equals(path, end.path)) {
              t = t.slice(0, end.offset);
            }
            if (Path.equals(path, start.path)) {
              t = t.slice(start.offset);
            }
            text += t;
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
              _iterator7["return"]();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
        return text;
      },
      transform: function transform(editor, op) {
        editor.children = immer.createDraft(editor.children);
        var selection = editor.selection && immer.createDraft(editor.selection);
        switch (op.type) {
          case "insert_node": {
            var path = op.path, node = op.node;
            var parent = Node.parent(editor, path);
            var index = path[path.length - 1];
            parent.children.splice(index, 0, node);
            if (selection) {
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = void 0;
              try {
                for (var _iterator8 = Range.points(selection)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var _step8$value = slicedToArray(_step8.value, 2), point = _step8$value[0], key = _step8$value[1];
                  selection[key] = Point.transform(point, op);
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                    _iterator8["return"]();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }
            }
            break;
          }
          case "insert_text": {
            var _path = op.path, offset = op.offset, text = op.text;
            var _node3 = Node.leaf(editor, _path);
            var before = _node3.text.slice(0, offset);
            var after = _node3.text.slice(offset);
            _node3.text = before + text + after;
            if (selection) {
              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = void 0;
              try {
                for (var _iterator9 = Range.points(selection)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var _step9$value = slicedToArray(_step9.value, 2), _point = _step9$value[0], _key = _step9$value[1];
                  selection[_key] = Point.transform(_point, op);
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                    _iterator9["return"]();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
            }
            break;
          }
          case "merge_node": {
            var _path2 = op.path;
            var _node4 = Node.get(editor, _path2);
            var prevPath = Path.previous(_path2);
            var prev = Node.get(editor, prevPath);
            var _parent = Node.parent(editor, _path2);
            var _index = _path2[_path2.length - 1];
            if (Text.isText(_node4) && Text.isText(prev)) {
              prev.text += _node4.text;
            } else if (!Text.isText(_node4) && !Text.isText(prev)) {
              var _prev$children;
              (_prev$children = prev.children).push.apply(_prev$children, toConsumableArray(_node4.children));
            } else {
              throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2, "] to nodes of different interaces: ").concat(_node4, " ").concat(prev));
            }
            _parent.children.splice(_index, 1);
            if (selection) {
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = void 0;
              try {
                for (var _iterator10 = Range.points(selection)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var _step10$value = slicedToArray(_step10.value, 2), _point2 = _step10$value[0], _key2 = _step10$value[1];
                  selection[_key2] = Point.transform(_point2, op);
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
            }
            break;
          }
          case "move_node": {
            var _path3 = op.path, newPath = op.newPath;
            if (Path.isAncestor(_path3, newPath)) {
              throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
            }
            var _node5 = Node.get(editor, _path3);
            var _parent2 = Node.parent(editor, _path3);
            var _index2 = _path3[_path3.length - 1];
            _parent2.children.splice(_index2, 1);
            var truePath = Path.transform(_path3, op);
            var newParent = Node.get(editor, Path.parent(truePath));
            var newIndex = truePath[truePath.length - 1];
            newParent.children.splice(newIndex, 0, _node5);
            if (selection) {
              var _iteratorNormalCompletion11 = true;
              var _didIteratorError11 = false;
              var _iteratorError11 = void 0;
              try {
                for (var _iterator11 = Range.points(selection)[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                  var _step11$value = slicedToArray(_step11.value, 2), _point3 = _step11$value[0], _key3 = _step11$value[1];
                  selection[_key3] = Point.transform(_point3, op);
                }
              } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                    _iterator11["return"]();
                  }
                } finally {
                  if (_didIteratorError11) {
                    throw _iteratorError11;
                  }
                }
              }
            }
            break;
          }
          case "remove_node": {
            var _path4 = op.path;
            var _index3 = _path4[_path4.length - 1];
            var _parent3 = Node.parent(editor, _path4);
            _parent3.children.splice(_index3, 1);
            if (selection) {
              var _iteratorNormalCompletion12 = true;
              var _didIteratorError12 = false;
              var _iteratorError12 = void 0;
              try {
                for (var _iterator12 = Range.points(selection)[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                  var _step12$value = slicedToArray(_step12.value, 2), _point4 = _step12$value[0], _key4 = _step12$value[1];
                  var result = Point.transform(_point4, op);
                  if (selection != null && result != null) {
                    selection[_key4] = result;
                  } else {
                    var _prev2 = void 0;
                    var next = void 0;
                    var _iteratorNormalCompletion13 = true;
                    var _didIteratorError13 = false;
                    var _iteratorError13 = void 0;
                    try {
                      for (var _iterator13 = Node.texts(editor)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                        var _step13$value = slicedToArray(_step13.value, 2), n = _step13$value[0], p = _step13$value[1];
                        if (Path.compare(p, _path4) === -1) {
                          _prev2 = [n, p];
                        } else {
                          next = [n, p];
                          break;
                        }
                      }
                    } catch (err) {
                      _didIteratorError13 = true;
                      _iteratorError13 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                          _iterator13["return"]();
                        }
                      } finally {
                        if (_didIteratorError13) {
                          throw _iteratorError13;
                        }
                      }
                    }
                    if (_prev2) {
                      _point4.path = _prev2[1];
                      _point4.offset = _prev2[0].text.length;
                    } else if (next) {
                      _point4.path = next[1];
                      _point4.offset = 0;
                    } else {
                      selection = null;
                    }
                  }
                }
              } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                    _iterator12["return"]();
                  }
                } finally {
                  if (_didIteratorError12) {
                    throw _iteratorError12;
                  }
                }
              }
            }
            break;
          }
          case "remove_text": {
            var _path5 = op.path, _offset = op.offset, _text2 = op.text;
            var _node6 = Node.leaf(editor, _path5);
            var _before = _node6.text.slice(0, _offset);
            var _after = _node6.text.slice(_offset + _text2.length);
            _node6.text = _before + _after;
            if (selection) {
              var _iteratorNormalCompletion14 = true;
              var _didIteratorError14 = false;
              var _iteratorError14 = void 0;
              try {
                for (var _iterator14 = Range.points(selection)[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                  var _step14$value = slicedToArray(_step14.value, 2), _point5 = _step14$value[0], _key5 = _step14$value[1];
                  selection[_key5] = Point.transform(_point5, op);
                }
              } catch (err) {
                _didIteratorError14 = true;
                _iteratorError14 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                    _iterator14["return"]();
                  }
                } finally {
                  if (_didIteratorError14) {
                    throw _iteratorError14;
                  }
                }
              }
            }
            break;
          }
          case "set_node": {
            var _path6 = op.path, newProperties = op.newProperties;
            if (_path6.length === 0) {
              throw new Error("Cannot set properties on the root node!");
            }
            var _node7 = Node.get(editor, _path6);
            for (var _key6 in newProperties) {
              if (_key6 === "children" || _key6 === "text") {
                throw new Error('Cannot set the "'.concat(_key6, '" property of nodes!'));
              }
              var value = newProperties[_key6];
              if (value == null) {
                delete _node7[_key6];
              } else {
                _node7[_key6] = value;
              }
            }
            break;
          }
          case "set_selection": {
            var _newProperties = op.newProperties;
            if (_newProperties == null) {
              selection = _newProperties;
            } else if (selection == null) {
              if (!Range.isRange(_newProperties)) {
                throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(JSON.stringify(_newProperties), " when there is no current selection."));
              }
              selection = _newProperties;
            } else {
              Object.assign(selection, _newProperties);
            }
            break;
          }
          case "split_node": {
            var _path7 = op.path, position = op.position, properties = op.properties;
            if (_path7.length === 0) {
              throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7, "] because the root node cannot be split."));
            }
            var _node8 = Node.get(editor, _path7);
            var _parent4 = Node.parent(editor, _path7);
            var _index4 = _path7[_path7.length - 1];
            var newNode;
            if (Text.isText(_node8)) {
              var _before2 = _node8.text.slice(0, position);
              var _after2 = _node8.text.slice(position);
              _node8.text = _before2;
              newNode = _objectSpread({}, _node8, {}, properties, {
                text: _after2
              });
            } else {
              var _before3 = _node8.children.slice(0, position);
              var _after3 = _node8.children.slice(position);
              _node8.children = _before3;
              newNode = _objectSpread({}, _node8, {}, properties, {
                children: _after3
              });
            }
            _parent4.children.splice(_index4 + 1, 0, newNode);
            if (selection) {
              var _iteratorNormalCompletion15 = true;
              var _didIteratorError15 = false;
              var _iteratorError15 = void 0;
              try {
                for (var _iterator15 = Range.points(selection)[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                  var _step15$value = slicedToArray(_step15.value, 2), _point6 = _step15$value[0], _key7 = _step15$value[1];
                  selection[_key7] = Point.transform(_point6, op);
                }
              } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                    _iterator15["return"]();
                  }
                } finally {
                  if (_didIteratorError15) {
                    throw _iteratorError15;
                  }
                }
              }
            }
            break;
          }
        }
        editor.children = immer.finishDraft(editor.children);
        if (selection) {
          editor.selection = immer.isDraft(selection) ? immer.finishDraft(selection) : selection;
        } else {
          editor.selection = null;
        }
      },
      unhangRange: function unhangRange(editor, range) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$voids6 = options.voids, voids = _options$voids6 === void 0 ? false : _options$voids6;
        var _Range$edges7 = Range.edges(range), _Range$edges8 = slicedToArray(_Range$edges7, 2), start = _Range$edges8[0], end = _Range$edges8[1];
        if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {
          return range;
        }
        var endBlock = Editor.above(editor, {
          at: end,
          match: function match(n) {
            return Editor.isBlock(editor, n);
          }
        });
        var blockPath = endBlock ? endBlock[1] : [];
        var first = Editor.start(editor, []);
        var before = {
          anchor: first,
          focus: end
        };
        var skip = true;
        var _iteratorNormalCompletion16 = true;
        var _didIteratorError16 = false;
        var _iteratorError16 = void 0;
        try {
          for (var _iterator16 = Editor.nodes(editor, {
            at: before,
            match: Text.isText,
            reverse: true,
            voids
          })[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
            var _step16$value = slicedToArray(_step16.value, 2), node = _step16$value[0], path = _step16$value[1];
            if (skip) {
              skip = false;
              continue;
            }
            if (node.text !== "" || Path.isBefore(path, blockPath)) {
              end = {
                path,
                offset: node.text.length
              };
              break;
            }
          }
        } catch (err) {
          _didIteratorError16 = true;
          _iteratorError16 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
              _iterator16["return"]();
            }
          } finally {
            if (_didIteratorError16) {
              throw _iteratorError16;
            }
          }
        }
        return {
          anchor: start,
          focus: end
        };
      },
      void: function _void(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return Editor.above(editor, _objectSpread({}, options, {
          match: function match(n) {
            return Editor.isVoid(editor, n);
          }
        }));
      },
      withoutNormalizing: function withoutNormalizing(editor, fn) {
        var value = Editor.isNormalizing(editor);
        NORMALIZING.set(editor, false);
        fn();
        NORMALIZING.set(editor, value);
        Editor.normalize(editor);
      }
    };
    var Element = {
      isElement: function isElement(value) {
        return isPlainObject(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);
      },
      isElementList: function isElementList(value) {
        return Array.isArray(value) && (value.length === 0 || Element.isElement(value[0]));
      },
      matches: function matches(element, props) {
        for (var key in props) {
          if (key === "children") {
            continue;
          }
          if (element[key] !== props[key]) {
            return false;
          }
        }
        return true;
      }
    };
    var Location = {
      isLocation: function isLocation(value) {
        return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value);
      }
    };
    var Span = {
      isSpan: function isSpan(value) {
        return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);
      }
    };
    var Node = {
      ancestor: function ancestor(root, path) {
        var node = Node.get(root, path);
        if (Text.isText(node)) {
          throw new Error("Cannot get the ancestor node at path [".concat(path, "] because it refers to a text node instead: ").concat(node));
        }
        return node;
      },
      ancestors: function* ancestors(root, path) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = Path.ancestors(path, options)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var p = _step.value;
            var n = Node.ancestor(root, p);
            var entry = [n, p];
            yield entry;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      },
      child: function child(root, index) {
        if (Text.isText(root)) {
          throw new Error("Cannot get the child of a text node: ".concat(JSON.stringify(root)));
        }
        var c = root.children[index];
        if (c == null) {
          throw new Error("Cannot get child at index `".concat(index, "` in node: ").concat(JSON.stringify(root)));
        }
        return c;
      },
      children: function* children(root, path) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$reverse = options.reverse, reverse = _options$reverse === void 0 ? false : _options$reverse;
        var ancestor = Node.ancestor(root, path);
        var children2 = ancestor.children;
        var index = reverse ? children2.length - 1 : 0;
        while (reverse ? index >= 0 : index < children2.length) {
          var child = Node.child(ancestor, index);
          var childPath = path.concat(index);
          yield [child, childPath];
          index = reverse ? index - 1 : index + 1;
        }
      },
      common: function common(root, path, another) {
        var p = Path.common(path, another);
        var n = Node.get(root, p);
        return [n, p];
      },
      descendant: function descendant(root, path) {
        var node = Node.get(root, path);
        if (Editor.isEditor(node)) {
          throw new Error("Cannot get the descendant node at path [".concat(path, "] because it refers to the root editor node instead: ").concat(node));
        }
        return node;
      },
      descendants: function* descendants(root) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
          for (var _iterator2 = Node.nodes(root, options)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = slicedToArray(_step2.value, 2), node = _step2$value[0], path = _step2$value[1];
            if (path.length !== 0) {
              yield [node, path];
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      },
      elements: function* elements(root) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = void 0;
        try {
          for (var _iterator3 = Node.nodes(root, options)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _step3$value = slicedToArray(_step3.value, 2), node = _step3$value[0], path = _step3$value[1];
            if (Element.isElement(node)) {
              yield [node, path];
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      },
      first: function first(root, path) {
        var p = path.slice();
        var n = Node.get(root, p);
        while (n) {
          if (Text.isText(n) || n.children.length === 0) {
            break;
          } else {
            n = n.children[0];
            p.push(0);
          }
        }
        return [n, p];
      },
      fragment: function fragment(root, range) {
        if (Text.isText(root)) {
          throw new Error("Cannot get a fragment starting from a root text node: ".concat(JSON.stringify(root)));
        }
        var newRoot = immer.produce(root, function(r) {
          var _Range$edges = Range.edges(range), _Range$edges2 = slicedToArray(_Range$edges, 2), start = _Range$edges2[0], end = _Range$edges2[1];
          var iterable = Node.nodes(r, {
            reverse: true,
            pass: function pass(_ref) {
              var _ref2 = slicedToArray(_ref, 2), path2 = _ref2[1];
              return !Range.includes(range, path2);
            }
          });
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = void 0;
          try {
            for (var _iterator4 = iterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var _step4$value = slicedToArray(_step4.value, 2), path = _step4$value[1];
              if (!Range.includes(range, path)) {
                var parent = Node.parent(r, path);
                var index = path[path.length - 1];
                parent.children.splice(index, 1);
              }
              if (Path.equals(path, end.path)) {
                var leaf = Node.leaf(r, path);
                leaf.text = leaf.text.slice(0, end.offset);
              }
              if (Path.equals(path, start.path)) {
                var _leaf = Node.leaf(r, path);
                _leaf.text = _leaf.text.slice(start.offset);
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
          delete r.selection;
        });
        return newRoot.children;
      },
      get: function get(root, path) {
        var node = root;
        for (var i = 0; i < path.length; i++) {
          var p = path[i];
          if (Text.isText(node) || !node.children[p]) {
            throw new Error("Cannot find a descendant at path [".concat(path, "] in node: ").concat(JSON.stringify(root)));
          }
          node = node.children[p];
        }
        return node;
      },
      has: function has(root, path) {
        var node = root;
        for (var i = 0; i < path.length; i++) {
          var p = path[i];
          if (Text.isText(node) || !node.children[p]) {
            return false;
          }
          node = node.children[p];
        }
        return true;
      },
      isNode: function isNode(value) {
        return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);
      },
      isNodeList: function isNodeList(value) {
        return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]));
      },
      last: function last(root, path) {
        var p = path.slice();
        var n = Node.get(root, p);
        while (n) {
          if (Text.isText(n) || n.children.length === 0) {
            break;
          } else {
            var i = n.children.length - 1;
            n = n.children[i];
            p.push(i);
          }
        }
        return [n, p];
      },
      leaf: function leaf(root, path) {
        var node = Node.get(root, path);
        if (!Text.isText(node)) {
          throw new Error("Cannot get the leaf node at path [".concat(path, "] because it refers to a non-leaf node: ").concat(node));
        }
        return node;
      },
      levels: function* levels(root, path) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = void 0;
        try {
          for (var _iterator5 = Path.levels(path, options)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var p = _step5.value;
            var n = Node.get(root, p);
            yield [n, p];
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      },
      matches: function matches(node, props) {
        return Element.isElement(node) && Element.matches(node, props) || Text.isText(node) && Text.matches(node, props);
      },
      nodes: function* nodes(root) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var pass = options.pass, _options$reverse2 = options.reverse, reverse = _options$reverse2 === void 0 ? false : _options$reverse2;
        var _options$from = options.from, from = _options$from === void 0 ? [] : _options$from, to = options.to;
        var visited = new Set();
        var p = [];
        var n = root;
        while (true) {
          if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {
            break;
          }
          if (!visited.has(n)) {
            yield [n, p];
          }
          if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([n, p]) === false)) {
            visited.add(n);
            var nextIndex = reverse ? n.children.length - 1 : 0;
            if (Path.isAncestor(p, from)) {
              nextIndex = from[p.length];
            }
            p = p.concat(nextIndex);
            n = Node.get(root, p);
            continue;
          }
          if (p.length === 0) {
            break;
          }
          if (!reverse) {
            var newPath = Path.next(p);
            if (Node.has(root, newPath)) {
              p = newPath;
              n = Node.get(root, p);
              continue;
            }
          }
          if (reverse && p[p.length - 1] !== 0) {
            var _newPath = Path.previous(p);
            p = _newPath;
            n = Node.get(root, p);
            continue;
          }
          p = Path.parent(p);
          n = Node.get(root, p);
          visited.add(n);
        }
      },
      parent: function parent(root, path) {
        var parentPath = Path.parent(path);
        var p = Node.get(root, parentPath);
        if (Text.isText(p)) {
          throw new Error("Cannot get the parent of path [".concat(path, "] because it does not exist in the root."));
        }
        return p;
      },
      string: function string(node) {
        if (Text.isText(node)) {
          return node.text;
        } else {
          return node.children.map(Node.string).join("");
        }
      },
      texts: function* texts(root) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = void 0;
        try {
          for (var _iterator6 = Node.nodes(root, options)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _step6$value = slicedToArray(_step6.value, 2), node = _step6$value[0], path = _step6$value[1];
            if (Text.isText(node)) {
              yield [node, path];
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      }
    };
    function ownKeys$1(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$1(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$1(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Operation = {
      isNodeOperation: function isNodeOperation(value) {
        return Operation.isOperation(value) && value.type.endsWith("_node");
      },
      isOperation: function isOperation(value) {
        if (!isPlainObject(value)) {
          return false;
        }
        switch (value.type) {
          case "insert_node":
            return Path.isPath(value.path) && Node.isNode(value.node);
          case "insert_text":
            return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
          case "merge_node":
            return typeof value.position === "number" && (typeof value.target === "number" || value.target === null) && Path.isPath(value.path) && isPlainObject(value.properties);
          case "move_node":
            return Path.isPath(value.path) && Path.isPath(value.newPath);
          case "remove_node":
            return Path.isPath(value.path) && Node.isNode(value.node);
          case "remove_text":
            return typeof value.offset === "number" && typeof value.text === "string" && Path.isPath(value.path);
          case "set_node":
            return Path.isPath(value.path) && isPlainObject(value.properties) && isPlainObject(value.newProperties);
          case "set_selection":
            return value.properties === null && Range.isRange(value.newProperties) || value.newProperties === null && Range.isRange(value.properties) || isPlainObject(value.properties) && isPlainObject(value.newProperties);
          case "split_node":
            return Path.isPath(value.path) && typeof value.position === "number" && (typeof value.target === "number" || value.target === null) && isPlainObject(value.properties);
          default:
            return false;
        }
      },
      isOperationList: function isOperationList(value) {
        return Array.isArray(value) && (value.length === 0 || Operation.isOperation(value[0]));
      },
      isSelectionOperation: function isSelectionOperation(value) {
        return Operation.isOperation(value) && value.type.endsWith("_selection");
      },
      isTextOperation: function isTextOperation(value) {
        return Operation.isOperation(value) && value.type.endsWith("_text");
      },
      inverse: function inverse(op) {
        switch (op.type) {
          case "insert_node": {
            return _objectSpread$1({}, op, {
              type: "remove_node"
            });
          }
          case "insert_text": {
            return _objectSpread$1({}, op, {
              type: "remove_text"
            });
          }
          case "merge_node": {
            return _objectSpread$1({}, op, {
              type: "split_node",
              path: Path.previous(op.path)
            });
          }
          case "move_node": {
            var newPath = op.newPath, path = op.path;
            if (Path.equals(newPath, path)) {
              return op;
            }
            if (Path.isSibling(path, newPath)) {
              return _objectSpread$1({}, op, {
                path: newPath,
                newPath: path
              });
            }
            var inversePath = Path.transform(path, op);
            var inverseNewPath = Path.transform(Path.next(path), op);
            return _objectSpread$1({}, op, {
              path: inversePath,
              newPath: inverseNewPath
            });
          }
          case "remove_node": {
            return _objectSpread$1({}, op, {
              type: "insert_node"
            });
          }
          case "remove_text": {
            return _objectSpread$1({}, op, {
              type: "insert_text"
            });
          }
          case "set_node": {
            var properties = op.properties, newProperties = op.newProperties;
            return _objectSpread$1({}, op, {
              properties: newProperties,
              newProperties: properties
            });
          }
          case "set_selection": {
            var _properties = op.properties, _newProperties = op.newProperties;
            if (_properties == null) {
              return _objectSpread$1({}, op, {
                properties: _newProperties,
                newProperties: null
              });
            } else if (_newProperties == null) {
              return _objectSpread$1({}, op, {
                properties: null,
                newProperties: _properties
              });
            } else {
              return _objectSpread$1({}, op, {
                properties: _newProperties,
                newProperties: _properties
              });
            }
          }
          case "split_node": {
            return _objectSpread$1({}, op, {
              type: "merge_node",
              path: Path.next(op.path)
            });
          }
        }
      }
    };
    var Path = {
      ancestors: function ancestors(path) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$reverse = options.reverse, reverse = _options$reverse === void 0 ? false : _options$reverse;
        var paths = Path.levels(path, options);
        if (reverse) {
          paths = paths.slice(1);
        } else {
          paths = paths.slice(0, -1);
        }
        return paths;
      },
      common: function common(path, another) {
        var common2 = [];
        for (var i = 0; i < path.length && i < another.length; i++) {
          var av = path[i];
          var bv = another[i];
          if (av !== bv) {
            break;
          }
          common2.push(av);
        }
        return common2;
      },
      compare: function compare(path, another) {
        var min = Math.min(path.length, another.length);
        for (var i = 0; i < min; i++) {
          if (path[i] < another[i])
            return -1;
          if (path[i] > another[i])
            return 1;
        }
        return 0;
      },
      endsAfter: function endsAfter(path, another) {
        var i = path.length - 1;
        var as = path.slice(0, i);
        var bs = another.slice(0, i);
        var av = path[i];
        var bv = another[i];
        return Path.equals(as, bs) && av > bv;
      },
      endsAt: function endsAt(path, another) {
        var i = path.length;
        var as = path.slice(0, i);
        var bs = another.slice(0, i);
        return Path.equals(as, bs);
      },
      endsBefore: function endsBefore(path, another) {
        var i = path.length - 1;
        var as = path.slice(0, i);
        var bs = another.slice(0, i);
        var av = path[i];
        var bv = another[i];
        return Path.equals(as, bs) && av < bv;
      },
      equals: function equals(path, another) {
        return path.length === another.length && path.every(function(n, i) {
          return n === another[i];
        });
      },
      isAfter: function isAfter(path, another) {
        return Path.compare(path, another) === 1;
      },
      isAncestor: function isAncestor(path, another) {
        return path.length < another.length && Path.compare(path, another) === 0;
      },
      isBefore: function isBefore(path, another) {
        return Path.compare(path, another) === -1;
      },
      isChild: function isChild(path, another) {
        return path.length === another.length + 1 && Path.compare(path, another) === 0;
      },
      isCommon: function isCommon(path, another) {
        return path.length <= another.length && Path.compare(path, another) === 0;
      },
      isDescendant: function isDescendant(path, another) {
        return path.length > another.length && Path.compare(path, another) === 0;
      },
      isParent: function isParent(path, another) {
        return path.length + 1 === another.length && Path.compare(path, another) === 0;
      },
      isPath: function isPath(value) {
        return Array.isArray(value) && (value.length === 0 || typeof value[0] === "number");
      },
      isSibling: function isSibling(path, another) {
        if (path.length !== another.length) {
          return false;
        }
        var as = path.slice(0, -1);
        var bs = another.slice(0, -1);
        var al = path[path.length - 1];
        var bl = another[another.length - 1];
        return al !== bl && Path.equals(as, bs);
      },
      levels: function levels(path) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$reverse2 = options.reverse, reverse = _options$reverse2 === void 0 ? false : _options$reverse2;
        var list = [];
        for (var i = 0; i <= path.length; i++) {
          list.push(path.slice(0, i));
        }
        if (reverse) {
          list.reverse();
        }
        return list;
      },
      next: function next(path) {
        if (path.length === 0) {
          throw new Error("Cannot get the next path of a root path [".concat(path, "], because it has no next index."));
        }
        var last = path[path.length - 1];
        return path.slice(0, -1).concat(last + 1);
      },
      parent: function parent(path) {
        if (path.length === 0) {
          throw new Error("Cannot get the parent path of the root path [".concat(path, "]."));
        }
        return path.slice(0, -1);
      },
      previous: function previous(path) {
        if (path.length === 0) {
          throw new Error("Cannot get the previous path of a root path [".concat(path, "], because it has no previous index."));
        }
        var last = path[path.length - 1];
        if (last <= 0) {
          throw new Error("Cannot get the previous path of a first child path [".concat(path, "] because it would result in a negative index."));
        }
        return path.slice(0, -1).concat(last - 1);
      },
      relative: function relative(path, ancestor) {
        if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {
          throw new Error("Cannot get the relative path of [".concat(path, "] inside ancestor [").concat(ancestor, "], because it is not above or equal to the path."));
        }
        return path.slice(ancestor.length);
      },
      transform: function transform(path, operation) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return immer.produce(path, function(p) {
          var _options$affinity = options.affinity, affinity = _options$affinity === void 0 ? "forward" : _options$affinity;
          if (path.length === 0) {
            return;
          }
          switch (operation.type) {
            case "insert_node": {
              var op = operation.path;
              if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {
                p[op.length - 1] += 1;
              }
              break;
            }
            case "remove_node": {
              var _op = operation.path;
              if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {
                return null;
              } else if (Path.endsBefore(_op, p)) {
                p[_op.length - 1] -= 1;
              }
              break;
            }
            case "merge_node": {
              var _op2 = operation.path, position = operation.position;
              if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {
                p[_op2.length - 1] -= 1;
              } else if (Path.isAncestor(_op2, p)) {
                p[_op2.length - 1] -= 1;
                p[_op2.length] += position;
              }
              break;
            }
            case "split_node": {
              var _op3 = operation.path, _position = operation.position;
              if (Path.equals(_op3, p)) {
                if (affinity === "forward") {
                  p[p.length - 1] += 1;
                } else if (affinity === "backward")
                  ;
                else {
                  return null;
                }
              } else if (Path.endsBefore(_op3, p)) {
                p[_op3.length - 1] += 1;
              } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {
                p[_op3.length - 1] += 1;
                p[_op3.length] -= _position;
              }
              break;
            }
            case "move_node": {
              var _op4 = operation.path, onp = operation.newPath;
              if (Path.equals(_op4, onp)) {
                return;
              }
              if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {
                var copy = onp.slice();
                if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {
                  copy[_op4.length - 1] -= 1;
                }
                return copy.concat(p.slice(_op4.length));
              } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {
                if (Path.endsBefore(_op4, p)) {
                  p[_op4.length - 1] -= 1;
                } else {
                  p[_op4.length - 1] += 1;
                }
              } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {
                if (Path.endsBefore(_op4, p)) {
                  p[_op4.length - 1] -= 1;
                }
                p[onp.length - 1] += 1;
              } else if (Path.endsBefore(_op4, p)) {
                if (Path.equals(onp, p)) {
                  p[onp.length - 1] += 1;
                }
                p[_op4.length - 1] -= 1;
              }
              break;
            }
          }
        });
      }
    };
    var PathRef = {
      transform: function transform(ref, op) {
        var current = ref.current, affinity = ref.affinity;
        if (current == null) {
          return;
        }
        var path = Path.transform(current, op, {
          affinity
        });
        ref.current = path;
        if (path == null) {
          ref.unref();
        }
      }
    };
    function ownKeys$2(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$2(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Point = {
      compare: function compare(point, another) {
        var result = Path.compare(point.path, another.path);
        if (result === 0) {
          if (point.offset < another.offset)
            return -1;
          if (point.offset > another.offset)
            return 1;
          return 0;
        }
        return result;
      },
      isAfter: function isAfter(point, another) {
        return Point.compare(point, another) === 1;
      },
      isBefore: function isBefore(point, another) {
        return Point.compare(point, another) === -1;
      },
      equals: function equals(point, another) {
        return point.offset === another.offset && Path.equals(point.path, another.path);
      },
      isPoint: function isPoint(value) {
        return isPlainObject(value) && typeof value.offset === "number" && Path.isPath(value.path);
      },
      transform: function transform(point, op) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return immer.produce(point, function(p) {
          var _options$affinity = options.affinity, affinity = _options$affinity === void 0 ? "forward" : _options$affinity;
          var path = p.path, offset = p.offset;
          switch (op.type) {
            case "insert_node":
            case "move_node": {
              p.path = Path.transform(path, op, options);
              break;
            }
            case "insert_text": {
              if (Path.equals(op.path, path) && op.offset <= offset) {
                p.offset += op.text.length;
              }
              break;
            }
            case "merge_node": {
              if (Path.equals(op.path, path)) {
                p.offset += op.position;
              }
              p.path = Path.transform(path, op, options);
              break;
            }
            case "remove_text": {
              if (Path.equals(op.path, path) && op.offset <= offset) {
                p.offset -= Math.min(offset - op.offset, op.text.length);
              }
              break;
            }
            case "remove_node": {
              if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {
                return null;
              }
              p.path = Path.transform(path, op, options);
              break;
            }
            case "split_node": {
              if (Path.equals(op.path, path)) {
                if (op.position === offset && affinity == null) {
                  return null;
                } else if (op.position < offset || op.position === offset && affinity === "forward") {
                  p.offset -= op.position;
                  p.path = Path.transform(path, op, _objectSpread$2({}, options, {
                    affinity: "forward"
                  }));
                }
              } else {
                p.path = Path.transform(path, op, options);
              }
              break;
            }
          }
        });
      }
    };
    var PointRef = {
      transform: function transform(ref, op) {
        var current = ref.current, affinity = ref.affinity;
        if (current == null) {
          return;
        }
        var point = Point.transform(current, op, {
          affinity
        });
        ref.current = point;
        if (point == null) {
          ref.unref();
        }
      }
    };
    function ownKeys$3(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$3(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Range = {
      edges: function edges(range) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$reverse = options.reverse, reverse = _options$reverse === void 0 ? false : _options$reverse;
        var anchor = range.anchor, focus = range.focus;
        return Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];
      },
      end: function end(range) {
        var _Range$edges = Range.edges(range), _Range$edges2 = slicedToArray(_Range$edges, 2), end2 = _Range$edges2[1];
        return end2;
      },
      equals: function equals(range, another) {
        return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);
      },
      includes: function includes(range, target) {
        if (Range.isRange(target)) {
          if (Range.includes(range, target.anchor) || Range.includes(range, target.focus)) {
            return true;
          }
          var _Range$edges3 = Range.edges(range), _Range$edges4 = slicedToArray(_Range$edges3, 2), rs = _Range$edges4[0], re = _Range$edges4[1];
          var _Range$edges5 = Range.edges(target), _Range$edges6 = slicedToArray(_Range$edges5, 2), ts = _Range$edges6[0], te = _Range$edges6[1];
          return Point.isBefore(rs, ts) && Point.isAfter(re, te);
        }
        var _Range$edges7 = Range.edges(range), _Range$edges8 = slicedToArray(_Range$edges7, 2), start = _Range$edges8[0], end = _Range$edges8[1];
        var isAfterStart = false;
        var isBeforeEnd = false;
        if (Point.isPoint(target)) {
          isAfterStart = Point.compare(target, start) >= 0;
          isBeforeEnd = Point.compare(target, end) <= 0;
        } else {
          isAfterStart = Path.compare(target, start.path) >= 0;
          isBeforeEnd = Path.compare(target, end.path) <= 0;
        }
        return isAfterStart && isBeforeEnd;
      },
      intersection: function intersection(range, another) {
        var anchor = range.anchor, focus = range.focus, rest = objectWithoutProperties(range, ["anchor", "focus"]);
        var _Range$edges9 = Range.edges(range), _Range$edges10 = slicedToArray(_Range$edges9, 2), s1 = _Range$edges10[0], e1 = _Range$edges10[1];
        var _Range$edges11 = Range.edges(another), _Range$edges12 = slicedToArray(_Range$edges11, 2), s2 = _Range$edges12[0], e2 = _Range$edges12[1];
        var start = Point.isBefore(s1, s2) ? s2 : s1;
        var end = Point.isBefore(e1, e2) ? e1 : e2;
        if (Point.isBefore(end, start)) {
          return null;
        } else {
          return _objectSpread$3({
            anchor: start,
            focus: end
          }, rest);
        }
      },
      isBackward: function isBackward(range) {
        var anchor = range.anchor, focus = range.focus;
        return Point.isAfter(anchor, focus);
      },
      isCollapsed: function isCollapsed(range) {
        var anchor = range.anchor, focus = range.focus;
        return Point.equals(anchor, focus);
      },
      isExpanded: function isExpanded(range) {
        return !Range.isCollapsed(range);
      },
      isForward: function isForward(range) {
        return !Range.isBackward(range);
      },
      isRange: function isRange(value) {
        return isPlainObject(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);
      },
      points: function* points(range) {
        yield [range.anchor, "anchor"];
        yield [range.focus, "focus"];
      },
      start: function start(range) {
        var _Range$edges13 = Range.edges(range), _Range$edges14 = slicedToArray(_Range$edges13, 1), start2 = _Range$edges14[0];
        return start2;
      },
      transform: function transform(range, op, options) {
        var _options$affinity = options.affinity, affinity = _options$affinity === void 0 ? "inward" : _options$affinity;
        var affinityAnchor;
        var affinityFocus;
        if (affinity === "inward") {
          if (Range.isForward(range)) {
            affinityAnchor = "forward";
            affinityFocus = "backward";
          } else {
            affinityAnchor = "backward";
            affinityFocus = "forward";
          }
        } else if (affinity === "outward") {
          if (Range.isForward(range)) {
            affinityAnchor = "backward";
            affinityFocus = "forward";
          } else {
            affinityAnchor = "forward";
            affinityFocus = "backward";
          }
        } else {
          affinityAnchor = affinity;
          affinityFocus = affinity;
        }
        return immer.produce(range, function(r) {
          var anchor = Point.transform(r.anchor, op, {
            affinity: affinityAnchor
          });
          var focus = Point.transform(r.focus, op, {
            affinity: affinityFocus
          });
          if (!anchor || !focus) {
            return null;
          }
          r.anchor = anchor;
          r.focus = focus;
        });
      }
    };
    var RangeRef = {
      transform: function transform(ref, op) {
        var current = ref.current, affinity = ref.affinity;
        if (current == null) {
          return;
        }
        var path = Range.transform(current, op, {
          affinity
        });
        ref.current = path;
        if (path == null) {
          ref.unref();
        }
      }
    };
    function ownKeys$4(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$4(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Text = {
      equals: function equals(text, another) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$loose = options.loose, loose = _options$loose === void 0 ? false : _options$loose;
        for (var key in text) {
          if (loose && key === "text") {
            continue;
          }
          if (text[key] !== another[key]) {
            return false;
          }
        }
        for (var _key in another) {
          if (loose && _key === "text") {
            continue;
          }
          if (text[_key] !== another[_key]) {
            return false;
          }
        }
        return true;
      },
      isText: function isText(value) {
        return isPlainObject(value) && typeof value.text === "string";
      },
      isTextList: function isTextList(value) {
        return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]));
      },
      matches: function matches(text, props) {
        for (var key in props) {
          if (key === "text") {
            continue;
          }
          if (text[key] !== props[key]) {
            return false;
          }
        }
        return true;
      },
      decorations: function decorations(node, _decorations) {
        var leaves = [_objectSpread$4({}, node)];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = _decorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var dec = _step.value;
            var anchor = dec.anchor, focus = dec.focus, rest = objectWithoutProperties(dec, ["anchor", "focus"]);
            var _Range$edges = Range.edges(dec), _Range$edges2 = slicedToArray(_Range$edges, 2), start = _Range$edges2[0], end = _Range$edges2[1];
            var next = [];
            var o = 0;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = leaves[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var leaf = _step2.value;
                var length = leaf.text.length;
                var offset = o;
                o += length;
                if (start.offset <= offset && end.offset >= offset + length) {
                  Object.assign(leaf, rest);
                  next.push(leaf);
                  continue;
                }
                if (start.offset > offset + length || end.offset < offset || end.offset === offset && offset !== 0) {
                  next.push(leaf);
                  continue;
                }
                var middle = leaf;
                var before = void 0;
                var after = void 0;
                if (end.offset < offset + length) {
                  var off = end.offset - offset;
                  after = _objectSpread$4({}, middle, {
                    text: middle.text.slice(off)
                  });
                  middle = _objectSpread$4({}, middle, {
                    text: middle.text.slice(0, off)
                  });
                }
                if (start.offset > offset) {
                  var _off = start.offset - offset;
                  before = _objectSpread$4({}, middle, {
                    text: middle.text.slice(0, _off)
                  });
                  middle = _objectSpread$4({}, middle, {
                    text: middle.text.slice(_off)
                  });
                }
                Object.assign(middle, rest);
                if (before) {
                  next.push(before);
                }
                next.push(middle);
                if (after) {
                  next.push(after);
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            leaves = next;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return leaves;
      }
    };
    function ownKeys$5(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$5(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$5(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$5(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var GeneralTransforms = {
      transform: function transform(editor, op) {
        editor.children = immer.createDraft(editor.children);
        var selection = editor.selection && immer.createDraft(editor.selection);
        switch (op.type) {
          case "insert_node": {
            var path = op.path, node = op.node;
            var parent = Node.parent(editor, path);
            var index = path[path.length - 1];
            parent.children.splice(index, 0, node);
            if (selection) {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = Range.points(selection)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var _step$value = slicedToArray(_step.value, 2), point = _step$value[0], key = _step$value[1];
                  selection[key] = Point.transform(point, op);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
            break;
          }
          case "insert_text": {
            var _path = op.path, offset = op.offset, text = op.text;
            var _node = Node.leaf(editor, _path);
            var before = _node.text.slice(0, offset);
            var after = _node.text.slice(offset);
            _node.text = before + text + after;
            if (selection) {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = void 0;
              try {
                for (var _iterator2 = Range.points(selection)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _step2$value = slicedToArray(_step2.value, 2), _point = _step2$value[0], _key = _step2$value[1];
                  selection[_key] = Point.transform(_point, op);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
            break;
          }
          case "merge_node": {
            var _path2 = op.path;
            var _node2 = Node.get(editor, _path2);
            var prevPath = Path.previous(_path2);
            var prev = Node.get(editor, prevPath);
            var _parent = Node.parent(editor, _path2);
            var _index = _path2[_path2.length - 1];
            if (Text.isText(_node2) && Text.isText(prev)) {
              prev.text += _node2.text;
            } else if (!Text.isText(_node2) && !Text.isText(prev)) {
              var _prev$children;
              (_prev$children = prev.children).push.apply(_prev$children, toConsumableArray(_node2.children));
            } else {
              throw new Error('Cannot apply a "merge_node" operation at path ['.concat(_path2, "] to nodes of different interaces: ").concat(_node2, " ").concat(prev));
            }
            _parent.children.splice(_index, 1);
            if (selection) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = void 0;
              try {
                for (var _iterator3 = Range.points(selection)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var _step3$value = slicedToArray(_step3.value, 2), _point2 = _step3$value[0], _key2 = _step3$value[1];
                  selection[_key2] = Point.transform(_point2, op);
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                    _iterator3["return"]();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }
            break;
          }
          case "move_node": {
            var _path3 = op.path, newPath = op.newPath;
            if (Path.isAncestor(_path3, newPath)) {
              throw new Error("Cannot move a path [".concat(_path3, "] to new path [").concat(newPath, "] because the destination is inside itself."));
            }
            var _node3 = Node.get(editor, _path3);
            var _parent2 = Node.parent(editor, _path3);
            var _index2 = _path3[_path3.length - 1];
            _parent2.children.splice(_index2, 1);
            var truePath = Path.transform(_path3, op);
            var newParent = Node.get(editor, Path.parent(truePath));
            var newIndex = truePath[truePath.length - 1];
            newParent.children.splice(newIndex, 0, _node3);
            if (selection) {
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = void 0;
              try {
                for (var _iterator4 = Range.points(selection)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var _step4$value = slicedToArray(_step4.value, 2), _point3 = _step4$value[0], _key3 = _step4$value[1];
                  selection[_key3] = Point.transform(_point3, op);
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }
            }
            break;
          }
          case "remove_node": {
            var _path4 = op.path;
            var _index3 = _path4[_path4.length - 1];
            var _parent3 = Node.parent(editor, _path4);
            _parent3.children.splice(_index3, 1);
            if (selection) {
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = void 0;
              try {
                for (var _iterator5 = Range.points(selection)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var _step5$value = slicedToArray(_step5.value, 2), _point4 = _step5$value[0], _key4 = _step5$value[1];
                  var result = Point.transform(_point4, op);
                  if (selection != null && result != null) {
                    selection[_key4] = result;
                  } else {
                    var _prev = void 0;
                    var next = void 0;
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = void 0;
                    try {
                      for (var _iterator6 = Node.texts(editor)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var _step6$value = slicedToArray(_step6.value, 2), n = _step6$value[0], p = _step6$value[1];
                        if (Path.compare(p, _path4) === -1) {
                          _prev = [n, p];
                        } else {
                          next = [n, p];
                          break;
                        }
                      }
                    } catch (err) {
                      _didIteratorError6 = true;
                      _iteratorError6 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                          _iterator6["return"]();
                        }
                      } finally {
                        if (_didIteratorError6) {
                          throw _iteratorError6;
                        }
                      }
                    }
                    if (_prev) {
                      _point4.path = _prev[1];
                      _point4.offset = _prev[0].text.length;
                    } else if (next) {
                      _point4.path = next[1];
                      _point4.offset = 0;
                    } else {
                      selection = null;
                    }
                  }
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }
            }
            break;
          }
          case "remove_text": {
            var _path5 = op.path, _offset = op.offset, _text = op.text;
            var _node4 = Node.leaf(editor, _path5);
            var _before = _node4.text.slice(0, _offset);
            var _after = _node4.text.slice(_offset + _text.length);
            _node4.text = _before + _after;
            if (selection) {
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = void 0;
              try {
                for (var _iterator7 = Range.points(selection)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var _step7$value = slicedToArray(_step7.value, 2), _point5 = _step7$value[0], _key5 = _step7$value[1];
                  selection[_key5] = Point.transform(_point5, op);
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                    _iterator7["return"]();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }
            }
            break;
          }
          case "set_node": {
            var _path6 = op.path, newProperties = op.newProperties;
            if (_path6.length === 0) {
              throw new Error("Cannot set properties on the root node!");
            }
            var _node5 = Node.get(editor, _path6);
            for (var _key6 in newProperties) {
              if (_key6 === "children" || _key6 === "text") {
                throw new Error('Cannot set the "'.concat(_key6, '" property of nodes!'));
              }
              var value = newProperties[_key6];
              if (value == null) {
                delete _node5[_key6];
              } else {
                _node5[_key6] = value;
              }
            }
            break;
          }
          case "set_selection": {
            var _newProperties = op.newProperties;
            if (_newProperties == null) {
              selection = _newProperties;
            } else if (selection == null) {
              if (!Range.isRange(_newProperties)) {
                throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(JSON.stringify(_newProperties), " when there is no current selection."));
              }
              selection = _newProperties;
            } else {
              Object.assign(selection, _newProperties);
            }
            break;
          }
          case "split_node": {
            var _path7 = op.path, position = op.position, properties = op.properties;
            if (_path7.length === 0) {
              throw new Error('Cannot apply a "split_node" operation at path ['.concat(_path7, "] because the root node cannot be split."));
            }
            var _node6 = Node.get(editor, _path7);
            var _parent4 = Node.parent(editor, _path7);
            var _index4 = _path7[_path7.length - 1];
            var newNode;
            if (Text.isText(_node6)) {
              var _before2 = _node6.text.slice(0, position);
              var _after2 = _node6.text.slice(position);
              _node6.text = _before2;
              newNode = _objectSpread$5({}, _node6, {}, properties, {
                text: _after2
              });
            } else {
              var _before3 = _node6.children.slice(0, position);
              var _after3 = _node6.children.slice(position);
              _node6.children = _before3;
              newNode = _objectSpread$5({}, _node6, {}, properties, {
                children: _after3
              });
            }
            _parent4.children.splice(_index4 + 1, 0, newNode);
            if (selection) {
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = void 0;
              try {
                for (var _iterator8 = Range.points(selection)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var _step8$value = slicedToArray(_step8.value, 2), _point6 = _step8$value[0], _key7 = _step8$value[1];
                  selection[_key7] = Point.transform(_point6, op);
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                    _iterator8["return"]();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }
            }
            break;
          }
        }
        editor.children = immer.finishDraft(editor.children);
        if (selection) {
          editor.selection = immer.isDraft(selection) ? immer.finishDraft(selection) : selection;
        } else {
          editor.selection = null;
        }
      }
    };
    function ownKeys$6(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$6(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$6(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$6(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var NodeTransforms = {
      insertNodes: function insertNodes(editor, nodes) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$hanging = options.hanging, hanging = _options$hanging === void 0 ? false : _options$hanging, _options$voids = options.voids, voids = _options$voids === void 0 ? false : _options$voids, _options$mode = options.mode, mode = _options$mode === void 0 ? "lowest" : _options$mode;
          var at = options.at, match = options.match, select = options.select;
          if (Node.isNode(nodes)) {
            nodes = [nodes];
          }
          if (nodes.length === 0) {
            return;
          }
          var _nodes = nodes, _nodes2 = slicedToArray(_nodes, 1), node = _nodes2[0];
          if (!at) {
            if (editor.selection) {
              at = editor.selection;
            } else if (editor.children.length > 0) {
              at = Editor.end(editor, []);
            } else {
              at = [0];
            }
            select = true;
          }
          if (select == null) {
            select = false;
          }
          if (Range.isRange(at)) {
            if (!hanging) {
              at = Editor.unhangRange(editor, at);
            }
            if (Range.isCollapsed(at)) {
              at = at.anchor;
            } else {
              var _Range$edges = Range.edges(at), _Range$edges2 = slicedToArray(_Range$edges, 2), end = _Range$edges2[1];
              var pointRef = Editor.pointRef(editor, end);
              Transforms["delete"](editor, {
                at
              });
              at = pointRef.unref();
            }
          }
          if (Point.isPoint(at)) {
            if (match == null) {
              if (Text.isText(node)) {
                match = function match2(n) {
                  return Text.isText(n);
                };
              } else if (editor.isInline(node)) {
                match = function match2(n) {
                  return Text.isText(n) || Editor.isInline(editor, n);
                };
              } else {
                match = function match2(n) {
                  return Editor.isBlock(editor, n);
                };
              }
            }
            var _Editor$nodes = Editor.nodes(editor, {
              at: at.path,
              match,
              mode,
              voids
            }), _Editor$nodes2 = slicedToArray(_Editor$nodes, 1), entry = _Editor$nodes2[0];
            if (entry) {
              var _entry = slicedToArray(entry, 2), _matchPath = _entry[1];
              var pathRef = Editor.pathRef(editor, _matchPath);
              var isAtEnd = Editor.isEnd(editor, at, _matchPath);
              Transforms.splitNodes(editor, {
                at,
                match,
                mode,
                voids
              });
              var path = pathRef.unref();
              at = isAtEnd ? Path.next(path) : path;
            } else {
              return;
            }
          }
          var parentPath = Path.parent(at);
          var index = at[at.length - 1];
          if (!voids && Editor["void"](editor, {
            at: parentPath
          })) {
            return;
          }
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _node = _step.value;
              var _path = parentPath.concat(index);
              index++;
              editor.apply({
                type: "insert_node",
                path: _path,
                node: _node
              });
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          if (select) {
            var point = Editor.end(editor, at);
            if (point) {
              Transforms.select(editor, point);
            }
          }
        });
      },
      liftNodes: function liftNodes(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$at = options.at, at = _options$at === void 0 ? editor.selection : _options$at, _options$mode2 = options.mode, mode = _options$mode2 === void 0 ? "lowest" : _options$mode2, _options$voids2 = options.voids, voids = _options$voids2 === void 0 ? false : _options$voids2;
          var match = options.match;
          if (match == null) {
            match = Path.isPath(at) ? matchPath(editor, at) : function(n) {
              return Editor.isBlock(editor, n);
            };
          }
          if (!at) {
            return;
          }
          var matches = Editor.nodes(editor, {
            at,
            match,
            mode,
            voids
          });
          var pathRefs = Array.from(matches, function(_ref) {
            var _ref2 = slicedToArray(_ref, 2), p = _ref2[1];
            return Editor.pathRef(editor, p);
          });
          for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {
            var pathRef = _pathRefs[_i];
            var path = pathRef.unref();
            if (path.length < 2) {
              throw new Error("Cannot lift node at a path [".concat(path, "] because it has a depth of less than `2`."));
            }
            var parentNodeEntry = Editor.node(editor, Path.parent(path));
            var _parentNodeEntry = slicedToArray(parentNodeEntry, 2), parent = _parentNodeEntry[0], parentPath = _parentNodeEntry[1];
            var index = path[path.length - 1];
            var length = parent.children.length;
            if (length === 1) {
              var toPath = Path.next(parentPath);
              Transforms.moveNodes(editor, {
                at: path,
                to: toPath,
                voids
              });
              Transforms.removeNodes(editor, {
                at: parentPath,
                voids
              });
            } else if (index === 0) {
              Transforms.moveNodes(editor, {
                at: path,
                to: parentPath,
                voids
              });
            } else if (index === length - 1) {
              var _toPath = Path.next(parentPath);
              Transforms.moveNodes(editor, {
                at: path,
                to: _toPath,
                voids
              });
            } else {
              var splitPath = Path.next(path);
              var _toPath2 = Path.next(parentPath);
              Transforms.splitNodes(editor, {
                at: splitPath,
                voids
              });
              Transforms.moveNodes(editor, {
                at: path,
                to: _toPath2,
                voids
              });
            }
          }
        });
      },
      mergeNodes: function mergeNodes(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Editor.withoutNormalizing(editor, function() {
          var match = options.match, _options$at2 = options.at, at = _options$at2 === void 0 ? editor.selection : _options$at2;
          var _options$hanging2 = options.hanging, hanging = _options$hanging2 === void 0 ? false : _options$hanging2, _options$voids3 = options.voids, voids = _options$voids3 === void 0 ? false : _options$voids3, _options$mode3 = options.mode, mode = _options$mode3 === void 0 ? "lowest" : _options$mode3;
          if (!at) {
            return;
          }
          if (match == null) {
            if (Path.isPath(at)) {
              var _Editor$parent = Editor.parent(editor, at), _Editor$parent2 = slicedToArray(_Editor$parent, 1), parent = _Editor$parent2[0];
              match = function match2(n) {
                return parent.children.includes(n);
              };
            } else {
              match = function match2(n) {
                return Editor.isBlock(editor, n);
              };
            }
          }
          if (!hanging && Range.isRange(at)) {
            at = Editor.unhangRange(editor, at);
          }
          if (Range.isRange(at)) {
            if (Range.isCollapsed(at)) {
              at = at.anchor;
            } else {
              var _Range$edges3 = Range.edges(at), _Range$edges4 = slicedToArray(_Range$edges3, 2), end = _Range$edges4[1];
              var pointRef = Editor.pointRef(editor, end);
              Transforms["delete"](editor, {
                at
              });
              at = pointRef.unref();
              if (options.at == null) {
                Transforms.select(editor, at);
              }
            }
          }
          var _Editor$nodes3 = Editor.nodes(editor, {
            at,
            match,
            voids,
            mode
          }), _Editor$nodes4 = slicedToArray(_Editor$nodes3, 1), current = _Editor$nodes4[0];
          var prev = Editor.previous(editor, {
            at,
            match,
            voids,
            mode
          });
          if (!current || !prev) {
            return;
          }
          var _current = slicedToArray(current, 2), node = _current[0], path = _current[1];
          var _prev = slicedToArray(prev, 2), prevNode = _prev[0], prevPath = _prev[1];
          if (path.length === 0 || prevPath.length === 0) {
            return;
          }
          var newPath = Path.next(prevPath);
          var commonPath = Path.common(path, prevPath);
          var isPreviousSibling = Path.isSibling(path, prevPath);
          var levels = Array.from(Editor.levels(editor, {
            at: path
          }), function(_ref3) {
            var _ref4 = slicedToArray(_ref3, 1), n = _ref4[0];
            return n;
          }).slice(commonPath.length).slice(0, -1);
          var emptyAncestor = Editor.above(editor, {
            at: path,
            mode: "highest",
            match: function match2(n) {
              return levels.includes(n) && Element.isElement(n) && n.children.length === 1;
            }
          });
          var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);
          var properties;
          var position;
          if (Text.isText(node) && Text.isText(prevNode)) {
            var text = node.text, rest = objectWithoutProperties(node, ["text"]);
            position = prevNode.text.length;
            properties = rest;
          } else if (Element.isElement(node) && Element.isElement(prevNode)) {
            var children = node.children, _rest = objectWithoutProperties(node, ["children"]);
            position = prevNode.children.length;
            properties = _rest;
          } else {
            throw new Error("Cannot merge the node at path [".concat(path, "] with the previous sibling because it is not the same kind: ").concat(JSON.stringify(node), " ").concat(JSON.stringify(prevNode)));
          }
          if (!isPreviousSibling) {
            Transforms.moveNodes(editor, {
              at: path,
              to: newPath,
              voids
            });
          }
          if (emptyRef) {
            Transforms.removeNodes(editor, {
              at: emptyRef.current,
              voids
            });
          }
          if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === "") {
            Transforms.removeNodes(editor, {
              at: prevPath,
              voids
            });
          } else {
            editor.apply({
              type: "merge_node",
              path: newPath,
              position,
              target: null,
              properties
            });
          }
          if (emptyRef) {
            emptyRef.unref();
          }
        });
      },
      moveNodes: function moveNodes(editor, options) {
        Editor.withoutNormalizing(editor, function() {
          var to = options.to, _options$at3 = options.at, at = _options$at3 === void 0 ? editor.selection : _options$at3, _options$mode4 = options.mode, mode = _options$mode4 === void 0 ? "lowest" : _options$mode4, _options$voids4 = options.voids, voids = _options$voids4 === void 0 ? false : _options$voids4;
          var match = options.match;
          if (!at) {
            return;
          }
          if (match == null) {
            match = Path.isPath(at) ? matchPath(editor, at) : function(n) {
              return Editor.isBlock(editor, n);
            };
          }
          var toRef = Editor.pathRef(editor, to);
          var targets = Editor.nodes(editor, {
            at,
            match,
            mode,
            voids
          });
          var pathRefs = Array.from(targets, function(_ref5) {
            var _ref6 = slicedToArray(_ref5, 2), p = _ref6[1];
            return Editor.pathRef(editor, p);
          });
          for (var _i2 = 0, _pathRefs2 = pathRefs; _i2 < _pathRefs2.length; _i2++) {
            var pathRef = _pathRefs2[_i2];
            var path = pathRef.unref();
            var newPath = toRef.current;
            if (path.length !== 0) {
              editor.apply({
                type: "move_node",
                path,
                newPath
              });
            }
          }
          toRef.unref();
        });
      },
      removeNodes: function removeNodes(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$hanging3 = options.hanging, hanging = _options$hanging3 === void 0 ? false : _options$hanging3, _options$voids5 = options.voids, voids = _options$voids5 === void 0 ? false : _options$voids5, _options$mode5 = options.mode, mode = _options$mode5 === void 0 ? "lowest" : _options$mode5;
          var _options$at4 = options.at, at = _options$at4 === void 0 ? editor.selection : _options$at4, match = options.match;
          if (!at) {
            return;
          }
          if (match == null) {
            match = Path.isPath(at) ? matchPath(editor, at) : function(n) {
              return Editor.isBlock(editor, n);
            };
          }
          if (!hanging && Range.isRange(at)) {
            at = Editor.unhangRange(editor, at);
          }
          var depths = Editor.nodes(editor, {
            at,
            match,
            mode,
            voids
          });
          var pathRefs = Array.from(depths, function(_ref7) {
            var _ref8 = slicedToArray(_ref7, 2), p = _ref8[1];
            return Editor.pathRef(editor, p);
          });
          for (var _i3 = 0, _pathRefs3 = pathRefs; _i3 < _pathRefs3.length; _i3++) {
            var pathRef = _pathRefs3[_i3];
            var path = pathRef.unref();
            if (path) {
              var _Editor$node = Editor.node(editor, path), _Editor$node2 = slicedToArray(_Editor$node, 1), node = _Editor$node2[0];
              editor.apply({
                type: "remove_node",
                path,
                node
              });
            }
          }
        });
      },
      setNodes: function setNodes(editor, props) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        Editor.withoutNormalizing(editor, function() {
          var match = options.match, _options$at5 = options.at, at = _options$at5 === void 0 ? editor.selection : _options$at5;
          var _options$hanging4 = options.hanging, hanging = _options$hanging4 === void 0 ? false : _options$hanging4, _options$mode6 = options.mode, mode = _options$mode6 === void 0 ? "lowest" : _options$mode6, _options$split = options.split, split = _options$split === void 0 ? false : _options$split, _options$voids6 = options.voids, voids = _options$voids6 === void 0 ? false : _options$voids6;
          if (!at) {
            return;
          }
          if (match == null) {
            match = Path.isPath(at) ? matchPath(editor, at) : function(n) {
              return Editor.isBlock(editor, n);
            };
          }
          if (!hanging && Range.isRange(at)) {
            at = Editor.unhangRange(editor, at);
          }
          if (split && Range.isRange(at)) {
            var rangeRef = Editor.rangeRef(editor, at, {
              affinity: "inward"
            });
            var _Range$edges5 = Range.edges(at), _Range$edges6 = slicedToArray(_Range$edges5, 2), start = _Range$edges6[0], end = _Range$edges6[1];
            var splitMode = mode === "lowest" ? "lowest" : "highest";
            Transforms.splitNodes(editor, {
              at: end,
              match,
              mode: splitMode,
              voids
            });
            Transforms.splitNodes(editor, {
              at: start,
              match,
              mode: splitMode,
              voids
            });
            at = rangeRef.unref();
            if (options.at == null) {
              Transforms.select(editor, at);
            }
          }
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = Editor.nodes(editor, {
              at,
              match,
              mode,
              voids
            })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = slicedToArray(_step2.value, 2), node = _step2$value[0], path = _step2$value[1];
              var properties = {};
              var newProperties = {};
              if (path.length === 0) {
                continue;
              }
              for (var k in props) {
                if (k === "children" || k === "text") {
                  continue;
                }
                if (props[k] !== node[k]) {
                  properties[k] = node[k];
                  newProperties[k] = props[k];
                }
              }
              if (Object.keys(newProperties).length !== 0) {
                editor.apply({
                  type: "set_node",
                  path,
                  properties,
                  newProperties
                });
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        });
      },
      splitNodes: function splitNodes(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$mode7 = options.mode, mode = _options$mode7 === void 0 ? "lowest" : _options$mode7, _options$voids7 = options.voids, voids = _options$voids7 === void 0 ? false : _options$voids7;
          var match = options.match, _options$at6 = options.at, at = _options$at6 === void 0 ? editor.selection : _options$at6, _options$height = options.height, height = _options$height === void 0 ? 0 : _options$height, _options$always = options.always, always = _options$always === void 0 ? false : _options$always;
          if (match == null) {
            match = function match2(n) {
              return Editor.isBlock(editor, n);
            };
          }
          if (Range.isRange(at)) {
            at = deleteRange(editor, at);
          }
          if (Path.isPath(at)) {
            var path = at;
            var point = Editor.point(editor, path);
            var _Editor$parent3 = Editor.parent(editor, path), _Editor$parent4 = slicedToArray(_Editor$parent3, 1), parent = _Editor$parent4[0];
            match = function match2(n) {
              return n === parent;
            };
            height = point.path.length - path.length + 1;
            at = point;
            always = true;
          }
          if (!at) {
            return;
          }
          var beforeRef = Editor.pointRef(editor, at, {
            affinity: "backward"
          });
          var _Editor$nodes5 = Editor.nodes(editor, {
            at,
            match,
            mode,
            voids
          }), _Editor$nodes6 = slicedToArray(_Editor$nodes5, 1), highest = _Editor$nodes6[0];
          if (!highest) {
            return;
          }
          var voidMatch = Editor["void"](editor, {
            at,
            mode: "highest"
          });
          var nudge = 0;
          if (!voids && voidMatch) {
            var _voidMatch = slicedToArray(voidMatch, 2), voidNode = _voidMatch[0], voidPath = _voidMatch[1];
            if (Element.isElement(voidNode) && editor.isInline(voidNode)) {
              var after = Editor.after(editor, voidPath);
              if (!after) {
                var text = {
                  text: ""
                };
                var afterPath = Path.next(voidPath);
                Transforms.insertNodes(editor, text, {
                  at: afterPath,
                  voids
                });
                after = Editor.point(editor, afterPath);
              }
              at = after;
              always = true;
            }
            var siblingHeight = at.path.length - voidPath.length;
            height = siblingHeight + 1;
            always = true;
          }
          var afterRef = Editor.pointRef(editor, at);
          var depth = at.path.length - height;
          var _highest = slicedToArray(highest, 2), highestPath = _highest[1];
          var lowestPath = at.path.slice(0, depth);
          var position = height === 0 ? at.offset : at.path[depth] + nudge;
          var target = null;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = Editor.levels(editor, {
              at: lowestPath,
              reverse: true,
              voids
            })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _step3$value = slicedToArray(_step3.value, 2), node = _step3$value[0], _path2 = _step3$value[1];
              var split = false;
              if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor.isVoid(editor, node)) {
                break;
              }
              var _point2 = beforeRef.current;
              var isEnd = Editor.isEnd(editor, _point2, _path2);
              if (always || !beforeRef || !Editor.isEdge(editor, _point2, _path2)) {
                split = true;
                var _text = node.text, children = node.children, properties = objectWithoutProperties(node, ["text", "children"]);
                editor.apply({
                  type: "split_node",
                  path: _path2,
                  position,
                  target,
                  properties
                });
              }
              target = position;
              position = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
          if (options.at == null) {
            var _point = afterRef.current || Editor.end(editor, []);
            Transforms.select(editor, _point);
          }
          beforeRef.unref();
          afterRef.unref();
        });
      },
      unsetNodes: function unsetNodes(editor, props) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        if (!Array.isArray(props)) {
          props = [props];
        }
        var obj = {};
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = void 0;
        try {
          for (var _iterator4 = props[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var key = _step4.value;
            obj[key] = null;
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
        Transforms.setNodes(editor, obj, options);
      },
      unwrapNodes: function unwrapNodes(editor, options) {
        Editor.withoutNormalizing(editor, function() {
          var _options$mode8 = options.mode, mode = _options$mode8 === void 0 ? "lowest" : _options$mode8, _options$split2 = options.split, split = _options$split2 === void 0 ? false : _options$split2, _options$voids8 = options.voids, voids = _options$voids8 === void 0 ? false : _options$voids8;
          var _options$at7 = options.at, at = _options$at7 === void 0 ? editor.selection : _options$at7, match = options.match;
          if (!at) {
            return;
          }
          if (match == null) {
            match = Path.isPath(at) ? matchPath(editor, at) : function(n) {
              return Editor.isBlock(editor, n);
            };
          }
          if (Path.isPath(at)) {
            at = Editor.range(editor, at);
          }
          var rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null;
          var matches = Editor.nodes(editor, {
            at,
            match,
            mode,
            voids
          });
          var pathRefs = Array.from(matches, function(_ref9) {
            var _ref10 = slicedToArray(_ref9, 2), p = _ref10[1];
            return Editor.pathRef(editor, p);
          });
          var _loop = function _loop2() {
            var pathRef = _pathRefs4[_i4];
            var path = pathRef.unref();
            var _Editor$node3 = Editor.node(editor, path), _Editor$node4 = slicedToArray(_Editor$node3, 1), node = _Editor$node4[0];
            var range = Editor.range(editor, path);
            if (split && rangeRef) {
              range = Range.intersection(rangeRef.current, range);
            }
            Transforms.liftNodes(editor, {
              at: range,
              match: function match2(n) {
                return node.children.includes(n);
              },
              voids
            });
          };
          for (var _i4 = 0, _pathRefs4 = pathRefs; _i4 < _pathRefs4.length; _i4++) {
            _loop();
          }
          if (rangeRef) {
            rangeRef.unref();
          }
        });
      },
      wrapNodes: function wrapNodes(editor, element) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$mode9 = options.mode, mode = _options$mode9 === void 0 ? "lowest" : _options$mode9, _options$split3 = options.split, split = _options$split3 === void 0 ? false : _options$split3, _options$voids9 = options.voids, voids = _options$voids9 === void 0 ? false : _options$voids9;
          var match = options.match, _options$at8 = options.at, at = _options$at8 === void 0 ? editor.selection : _options$at8;
          if (!at) {
            return;
          }
          if (match == null) {
            if (Path.isPath(at)) {
              match = matchPath(editor, at);
            } else if (editor.isInline(element)) {
              match = function match2(n) {
                return Editor.isInline(editor, n) || Text.isText(n);
              };
            } else {
              match = function match2(n) {
                return Editor.isBlock(editor, n);
              };
            }
          }
          if (split && Range.isRange(at)) {
            var _Range$edges7 = Range.edges(at), _Range$edges8 = slicedToArray(_Range$edges7, 2), start = _Range$edges8[0], end = _Range$edges8[1];
            var rangeRef = Editor.rangeRef(editor, at, {
              affinity: "inward"
            });
            Transforms.splitNodes(editor, {
              at: end,
              match,
              voids
            });
            Transforms.splitNodes(editor, {
              at: start,
              match,
              voids
            });
            at = rangeRef.unref();
            if (options.at == null) {
              Transforms.select(editor, at);
            }
          }
          var roots = Array.from(Editor.nodes(editor, {
            at,
            match: editor.isInline(element) ? function(n) {
              return Editor.isBlock(editor, n);
            } : function(n) {
              return Editor.isEditor(n);
            },
            mode: "lowest",
            voids
          }));
          for (var _i5 = 0, _roots = roots; _i5 < _roots.length; _i5++) {
            var _roots$_i = slicedToArray(_roots[_i5], 2), rootPath = _roots$_i[1];
            var a = Range.isRange(at) ? Range.intersection(at, Editor.range(editor, rootPath)) : at;
            if (!a) {
              continue;
            }
            var matches = Array.from(Editor.nodes(editor, {
              at: a,
              match,
              mode,
              voids
            }));
            if (matches.length > 0) {
              (function() {
                var _matches = slicedToArray(matches, 1), first = _matches[0];
                var last = matches[matches.length - 1];
                var _first = slicedToArray(first, 2), firstPath = _first[1];
                var _last = slicedToArray(last, 2), lastPath = _last[1];
                var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);
                var range = Editor.range(editor, firstPath, lastPath);
                var commonNodeEntry = Editor.node(editor, commonPath);
                var _commonNodeEntry = slicedToArray(commonNodeEntry, 1), commonNode = _commonNodeEntry[0];
                var depth = commonPath.length + 1;
                var wrapperPath = Path.next(lastPath.slice(0, depth));
                var wrapper = _objectSpread$6({}, element, {
                  children: []
                });
                Transforms.insertNodes(editor, wrapper, {
                  at: wrapperPath,
                  voids
                });
                Transforms.moveNodes(editor, {
                  at: range,
                  match: function match2(n) {
                    return commonNode.children.includes(n);
                  },
                  to: wrapperPath.concat(0),
                  voids
                });
              })();
            }
          }
        });
      }
    };
    var deleteRange = function deleteRange2(editor, range) {
      if (Range.isCollapsed(range)) {
        return range.anchor;
      } else {
        var _Range$edges9 = Range.edges(range), _Range$edges10 = slicedToArray(_Range$edges9, 2), end = _Range$edges10[1];
        var pointRef = Editor.pointRef(editor, end);
        Transforms["delete"](editor, {
          at: range
        });
        return pointRef.unref();
      }
    };
    var matchPath = function matchPath2(editor, path) {
      var _Editor$node5 = Editor.node(editor, path), _Editor$node6 = slicedToArray(_Editor$node5, 1), node = _Editor$node6[0];
      return function(n) {
        return n === node;
      };
    };
    function ownKeys$7(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$7(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$7(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$7(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var SelectionTransforms = {
      collapse: function collapse(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _options$edge = options.edge, edge = _options$edge === void 0 ? "anchor" : _options$edge;
        var selection = editor.selection;
        if (!selection) {
          return;
        } else if (edge === "anchor") {
          Transforms.select(editor, selection.anchor);
        } else if (edge === "focus") {
          Transforms.select(editor, selection.focus);
        } else if (edge === "start") {
          var _Range$edges = Range.edges(selection), _Range$edges2 = slicedToArray(_Range$edges, 1), start = _Range$edges2[0];
          Transforms.select(editor, start);
        } else if (edge === "end") {
          var _Range$edges3 = Range.edges(selection), _Range$edges4 = slicedToArray(_Range$edges3, 2), end = _Range$edges4[1];
          Transforms.select(editor, end);
        }
      },
      deselect: function deselect(editor) {
        var selection = editor.selection;
        if (selection) {
          editor.apply({
            type: "set_selection",
            properties: selection,
            newProperties: null
          });
        }
      },
      move: function move(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var selection = editor.selection;
        var _options$distance = options.distance, distance = _options$distance === void 0 ? 1 : _options$distance, _options$unit = options.unit, unit = _options$unit === void 0 ? "character" : _options$unit, _options$reverse = options.reverse, reverse = _options$reverse === void 0 ? false : _options$reverse;
        var _options$edge2 = options.edge, edge = _options$edge2 === void 0 ? null : _options$edge2;
        if (!selection) {
          return;
        }
        if (edge === "start") {
          edge = Range.isBackward(selection) ? "focus" : "anchor";
        }
        if (edge === "end") {
          edge = Range.isBackward(selection) ? "anchor" : "focus";
        }
        var anchor = selection.anchor, focus = selection.focus;
        var opts = {
          distance,
          unit
        };
        var props = {};
        if (edge == null || edge === "anchor") {
          var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);
          if (point) {
            props.anchor = point;
          }
        }
        if (edge == null || edge === "focus") {
          var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);
          if (_point) {
            props.focus = _point;
          }
        }
        Transforms.setSelection(editor, props);
      },
      select: function select(editor, target) {
        var selection = editor.selection;
        target = Editor.range(editor, target);
        if (selection) {
          Transforms.setSelection(editor, target);
          return;
        }
        if (!Range.isRange(target)) {
          throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(JSON.stringify(target)));
        }
        editor.apply({
          type: "set_selection",
          properties: selection,
          newProperties: target
        });
      },
      setPoint: function setPoint(editor, props, options) {
        var selection = editor.selection;
        var _options$edge3 = options.edge, edge = _options$edge3 === void 0 ? "both" : _options$edge3;
        if (!selection) {
          return;
        }
        if (edge === "start") {
          edge = Range.isBackward(selection) ? "focus" : "anchor";
        }
        if (edge === "end") {
          edge = Range.isBackward(selection) ? "anchor" : "focus";
        }
        var anchor = selection.anchor, focus = selection.focus;
        var point = edge === "anchor" ? anchor : focus;
        Transforms.setSelection(editor, defineProperty({}, edge === "anchor" ? "anchor" : "focus", _objectSpread$7({}, point, {}, props)));
      },
      setSelection: function setSelection(editor, props) {
        var selection = editor.selection;
        var oldProps = {};
        var newProps = {};
        if (!selection) {
          return;
        }
        for (var k in props) {
          if (k === "anchor" && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === "focus" && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== "anchor" && k !== "focus" && props[k] !== selection[k]) {
            oldProps[k] = selection[k];
            newProps[k] = props[k];
          }
        }
        if (Object.keys(oldProps).length > 0) {
          editor.apply({
            type: "set_selection",
            properties: oldProps,
            newProperties: newProps
          });
        }
      }
    };
    var TextTransforms = {
      delete: function _delete(editor) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$reverse = options.reverse, reverse = _options$reverse === void 0 ? false : _options$reverse, _options$unit = options.unit, unit = _options$unit === void 0 ? "character" : _options$unit, _options$distance = options.distance, distance = _options$distance === void 0 ? 1 : _options$distance, _options$voids = options.voids, voids = _options$voids === void 0 ? false : _options$voids;
          var _options$at = options.at, at = _options$at === void 0 ? editor.selection : _options$at, _options$hanging = options.hanging, hanging = _options$hanging === void 0 ? false : _options$hanging;
          if (!at) {
            return;
          }
          if (Range.isRange(at) && Range.isCollapsed(at)) {
            at = at.anchor;
          }
          if (Point.isPoint(at)) {
            var furthestVoid = Editor["void"](editor, {
              at,
              mode: "highest"
            });
            if (!voids && furthestVoid) {
              var _furthestVoid = slicedToArray(furthestVoid, 2), voidPath = _furthestVoid[1];
              at = voidPath;
            } else {
              var opts = {
                unit,
                distance
              };
              var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);
              at = {
                anchor: at,
                focus: target
              };
              hanging = true;
            }
          }
          if (Path.isPath(at)) {
            Transforms.removeNodes(editor, {
              at,
              voids
            });
            return;
          }
          if (Range.isCollapsed(at)) {
            return;
          }
          if (!hanging) {
            at = Editor.unhangRange(editor, at, {
              voids
            });
          }
          var _Range$edges = Range.edges(at), _Range$edges2 = slicedToArray(_Range$edges, 2), start = _Range$edges2[0], end = _Range$edges2[1];
          var startBlock = Editor.above(editor, {
            match: function match(n) {
              return Editor.isBlock(editor, n);
            },
            at: start,
            voids
          });
          var endBlock = Editor.above(editor, {
            match: function match(n) {
              return Editor.isBlock(editor, n);
            },
            at: end,
            voids
          });
          var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);
          var isSingleText = Path.equals(start.path, end.path);
          var startVoid = voids ? null : Editor["void"](editor, {
            at: start,
            mode: "highest"
          });
          var endVoid = voids ? null : Editor["void"](editor, {
            at: end,
            mode: "highest"
          });
          if (startVoid) {
            var before = Editor.before(editor, start);
            if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {
              start = before;
            }
          }
          if (endVoid) {
            var after = Editor.after(editor, end);
            if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {
              end = after;
            }
          }
          var matches = [];
          var lastPath;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = Editor.nodes(editor, {
              at,
              voids
            })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var entry = _step.value;
              var _entry = slicedToArray(entry, 2), _node2 = _entry[0], _path2 = _entry[1];
              if (lastPath && Path.compare(_path2, lastPath) === 0) {
                continue;
              }
              if (!voids && Editor.isVoid(editor, _node2) || !Path.isCommon(_path2, start.path) && !Path.isCommon(_path2, end.path)) {
                matches.push(entry);
                lastPath = _path2;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          var pathRefs = Array.from(matches, function(_ref) {
            var _ref2 = slicedToArray(_ref, 2), p = _ref2[1];
            return Editor.pathRef(editor, p);
          });
          var startRef = Editor.pointRef(editor, start);
          var endRef = Editor.pointRef(editor, end);
          if (!isSingleText && !startVoid) {
            var _point = startRef.current;
            var _Editor$leaf = Editor.leaf(editor, _point), _Editor$leaf2 = slicedToArray(_Editor$leaf, 1), node = _Editor$leaf2[0];
            var path = _point.path;
            var _start = start, offset = _start.offset;
            var text = node.text.slice(offset);
            editor.apply({
              type: "remove_text",
              path,
              offset,
              text
            });
          }
          for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {
            var pathRef = _pathRefs[_i];
            var _path3 = pathRef.unref();
            Transforms.removeNodes(editor, {
              at: _path3,
              voids
            });
          }
          if (!endVoid) {
            var _point2 = endRef.current;
            var _Editor$leaf3 = Editor.leaf(editor, _point2), _Editor$leaf4 = slicedToArray(_Editor$leaf3, 1), _node = _Editor$leaf4[0];
            var _path = _point2.path;
            var _offset = isSingleText ? start.offset : 0;
            var _text = _node.text.slice(_offset, end.offset);
            editor.apply({
              type: "remove_text",
              path: _path,
              offset: _offset,
              text: _text
            });
          }
          if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
            Transforms.mergeNodes(editor, {
              at: endRef.current,
              hanging: true,
              voids
            });
          }
          var point = endRef.unref() || startRef.unref();
          if (options.at == null && point) {
            Transforms.select(editor, point);
          }
        });
      },
      insertFragment: function insertFragment(editor, fragment) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$hanging2 = options.hanging, hanging = _options$hanging2 === void 0 ? false : _options$hanging2, _options$voids2 = options.voids, voids = _options$voids2 === void 0 ? false : _options$voids2;
          var _options$at2 = options.at, at = _options$at2 === void 0 ? editor.selection : _options$at2;
          if (!fragment.length) {
            return;
          }
          if (!at) {
            return;
          } else if (Range.isRange(at)) {
            if (!hanging) {
              at = Editor.unhangRange(editor, at);
            }
            if (Range.isCollapsed(at)) {
              at = at.anchor;
            } else {
              var _Range$edges3 = Range.edges(at), _Range$edges4 = slicedToArray(_Range$edges3, 2), end = _Range$edges4[1];
              if (!voids && Editor["void"](editor, {
                at: end
              })) {
                return;
              }
              var pointRef = Editor.pointRef(editor, end);
              Transforms["delete"](editor, {
                at
              });
              at = pointRef.unref();
            }
          } else if (Path.isPath(at)) {
            at = Editor.start(editor, at);
          }
          if (!voids && Editor["void"](editor, {
            at
          })) {
            return;
          }
          var inlineElementMatch = Editor.above(editor, {
            at,
            match: function match(n) {
              return Editor.isInline(editor, n);
            },
            mode: "highest",
            voids
          });
          if (inlineElementMatch) {
            var _inlineElementMatch = slicedToArray(inlineElementMatch, 2), _inlinePath = _inlineElementMatch[1];
            if (Editor.isEnd(editor, at, _inlinePath)) {
              var after = Editor.after(editor, _inlinePath);
              at = after;
            } else if (Editor.isStart(editor, at, _inlinePath)) {
              var before = Editor.before(editor, _inlinePath);
              at = before;
            }
          }
          var blockMatch = Editor.above(editor, {
            match: function match(n) {
              return Editor.isBlock(editor, n);
            },
            at,
            voids
          });
          var _blockMatch = slicedToArray(blockMatch, 2), blockPath = _blockMatch[1];
          var isBlockStart = Editor.isStart(editor, at, blockPath);
          var isBlockEnd = Editor.isEnd(editor, at, blockPath);
          var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;
          var mergeEnd = !isBlockEnd;
          var _Node$first = Node.first({
            children: fragment
          }, []), _Node$first2 = slicedToArray(_Node$first, 2), firstPath = _Node$first2[1];
          var _Node$last = Node.last({
            children: fragment
          }, []), _Node$last2 = slicedToArray(_Node$last, 2), lastPath = _Node$last2[1];
          var matches = [];
          var matcher = function matcher2(_ref3) {
            var _ref4 = slicedToArray(_ref3, 2), n = _ref4[0], p = _ref4[1];
            if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {
              return false;
            }
            if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {
              return false;
            }
            return true;
          };
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = Node.nodes({
              children: fragment
            }, {
              pass: matcher
            })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var entry = _step2.value;
              if (entry[1].length > 0 && matcher(entry)) {
                matches.push(entry);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          var starts = [];
          var middles = [];
          var ends = [];
          var starting = true;
          var hasBlocks = false;
          for (var _i2 = 0, _matches = matches; _i2 < _matches.length; _i2++) {
            var _matches$_i = slicedToArray(_matches[_i2], 1), node = _matches$_i[0];
            if (Element.isElement(node) && !editor.isInline(node)) {
              starting = false;
              hasBlocks = true;
              middles.push(node);
            } else if (starting) {
              starts.push(node);
            } else {
              ends.push(node);
            }
          }
          var _Editor$nodes = Editor.nodes(editor, {
            at,
            match: function match(n) {
              return Text.isText(n) || Editor.isInline(editor, n);
            },
            mode: "highest",
            voids
          }), _Editor$nodes2 = slicedToArray(_Editor$nodes, 1), inlineMatch = _Editor$nodes2[0];
          var _inlineMatch = slicedToArray(inlineMatch, 2), inlinePath = _inlineMatch[1];
          var isInlineStart = Editor.isStart(editor, at, inlinePath);
          var isInlineEnd = Editor.isEnd(editor, at, inlinePath);
          var middleRef = Editor.pathRef(editor, isBlockEnd ? Path.next(blockPath) : blockPath);
          var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);
          Transforms.splitNodes(editor, {
            at,
            match: function match(n) {
              return hasBlocks ? Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n);
            },
            mode: hasBlocks ? "lowest" : "highest",
            voids
          });
          var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);
          Transforms.insertNodes(editor, starts, {
            at: startRef.current,
            match: function match(n) {
              return Text.isText(n) || Editor.isInline(editor, n);
            },
            mode: "highest",
            voids
          });
          Transforms.insertNodes(editor, middles, {
            at: middleRef.current,
            match: function match(n) {
              return Editor.isBlock(editor, n);
            },
            mode: "lowest",
            voids
          });
          Transforms.insertNodes(editor, ends, {
            at: endRef.current,
            match: function match(n) {
              return Text.isText(n) || Editor.isInline(editor, n);
            },
            mode: "highest",
            voids
          });
          if (!options.at) {
            var path;
            if (ends.length > 0) {
              path = Path.previous(endRef.current);
            } else if (middles.length > 0) {
              path = Path.previous(middleRef.current);
            } else {
              path = Path.previous(startRef.current);
            }
            var _end = Editor.end(editor, path);
            Transforms.select(editor, _end);
          }
          startRef.unref();
          middleRef.unref();
          endRef.unref();
        });
      },
      insertText: function insertText(editor, text) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        Editor.withoutNormalizing(editor, function() {
          var _options$voids3 = options.voids, voids = _options$voids3 === void 0 ? false : _options$voids3;
          var _options$at3 = options.at, at = _options$at3 === void 0 ? editor.selection : _options$at3;
          if (!at) {
            return;
          }
          if (Path.isPath(at)) {
            at = Editor.range(editor, at);
          }
          if (Range.isRange(at)) {
            if (Range.isCollapsed(at)) {
              at = at.anchor;
            } else {
              var end = Range.end(at);
              if (!voids && Editor["void"](editor, {
                at: end
              })) {
                return;
              }
              var pointRef = Editor.pointRef(editor, end);
              Transforms["delete"](editor, {
                at,
                voids
              });
              at = pointRef.unref();
              Transforms.setSelection(editor, {
                anchor: at,
                focus: at
              });
            }
          }
          if (!voids && Editor["void"](editor, {
            at
          })) {
            return;
          }
          var _at = at, path = _at.path, offset = _at.offset;
          editor.apply({
            type: "insert_text",
            path,
            offset,
            text
          });
        });
      }
    };
    function ownKeys$8(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$8(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$8(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$8(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var Transforms = _objectSpread$8({}, GeneralTransforms, {}, NodeTransforms, {}, SelectionTransforms, {}, TextTransforms);
    function ownKeys$9(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread$9(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys$9(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys$9(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var createEditor = function createEditor2() {
      var editor = {
        children: [],
        operations: [],
        selection: null,
        marks: null,
        isInline: function isInline() {
          return false;
        },
        isVoid: function isVoid() {
          return false;
        },
        onChange: function onChange() {
        },
        apply: function apply(op) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = Editor.pathRefs(editor)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var ref = _step.value;
              PathRef.transform(ref, op);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (var _iterator2 = Editor.pointRefs(editor)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _ref = _step2.value;
              PointRef.transform(_ref, op);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = Editor.rangeRefs(editor)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _ref2 = _step3.value;
              RangeRef.transform(_ref2, op);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
          var set = new Set();
          var dirtyPaths = [];
          var add = function add2(path2) {
            if (path2) {
              var key = path2.join(",");
              if (!set.has(key)) {
                set.add(key);
                dirtyPaths.push(path2);
              }
            }
          };
          var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];
          var newDirtyPaths = getDirtyPaths(op);
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = void 0;
          try {
            for (var _iterator4 = oldDirtyPaths[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var path = _step4.value;
              var newPath = Path.transform(path, op);
              add(newPath);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = void 0;
          try {
            for (var _iterator5 = newDirtyPaths[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var _path = _step5.value;
              add(_path);
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
          DIRTY_PATHS.set(editor, dirtyPaths);
          Editor.transform(editor, op);
          editor.operations.push(op);
          Editor.normalize(editor);
          if (op.type === "set_selection") {
            editor.marks = null;
          }
          if (!FLUSHING.get(editor)) {
            FLUSHING.set(editor, true);
            Promise.resolve().then(function() {
              FLUSHING.set(editor, false);
              editor.onChange();
              editor.operations = [];
            });
          }
        },
        addMark: function addMark(key, value) {
          var selection = editor.selection;
          if (selection) {
            if (Range.isExpanded(selection)) {
              Transforms.setNodes(editor, defineProperty({}, key, value), {
                match: Text.isText,
                split: true
              });
            } else {
              var marks = _objectSpread$9({}, Editor.marks(editor) || {}, defineProperty({}, key, value));
              editor.marks = marks;
              editor.onChange();
            }
          }
        },
        deleteBackward: function deleteBackward(unit) {
          var selection = editor.selection;
          if (selection && Range.isCollapsed(selection)) {
            Transforms["delete"](editor, {
              unit,
              reverse: true
            });
          }
        },
        deleteForward: function deleteForward(unit) {
          var selection = editor.selection;
          if (selection && Range.isCollapsed(selection)) {
            Transforms["delete"](editor, {
              unit
            });
          }
        },
        deleteFragment: function deleteFragment() {
          var selection = editor.selection;
          if (selection && Range.isExpanded(selection)) {
            Transforms["delete"](editor);
          }
        },
        getFragment: function getFragment() {
          var selection = editor.selection;
          if (selection) {
            return Node.fragment(editor, selection);
          }
          return [];
        },
        insertBreak: function insertBreak() {
          Transforms.splitNodes(editor, {
            always: true
          });
        },
        insertFragment: function insertFragment(fragment) {
          Transforms.insertFragment(editor, fragment);
        },
        insertNode: function insertNode(node) {
          Transforms.insertNodes(editor, node);
        },
        insertText: function insertText(text) {
          var selection = editor.selection, marks = editor.marks;
          if (selection) {
            if (Range.isCollapsed(selection)) {
              var inline = Editor.above(editor, {
                match: function match(n) {
                  return Editor.isInline(editor, n);
                },
                mode: "highest"
              });
              if (inline) {
                var _inline = slicedToArray(inline, 2), inlinePath = _inline[1];
                if (Editor.isEnd(editor, selection.anchor, inlinePath)) {
                  var point = Editor.after(editor, inlinePath);
                  Transforms.setSelection(editor, {
                    anchor: point,
                    focus: point
                  });
                }
              }
            }
            if (marks) {
              var node = _objectSpread$9({
                text
              }, marks);
              Transforms.insertNodes(editor, node);
            } else {
              Transforms.insertText(editor, text);
            }
            editor.marks = null;
          }
        },
        normalizeNode: function normalizeNode(entry) {
          var _entry = slicedToArray(entry, 2), node = _entry[0], path = _entry[1];
          if (Text.isText(node)) {
            return;
          }
          if (Element.isElement(node) && node.children.length === 0) {
            var child = {
              text: ""
            };
            Transforms.insertNodes(editor, child, {
              at: path.concat(0),
              voids: true
            });
            return;
          }
          var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0]));
          var n = 0;
          for (var i = 0; i < node.children.length; i++, n++) {
            var _child = node.children[i];
            var prev = node.children[i - 1];
            var isLast = i === node.children.length - 1;
            var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child);
            if (isInlineOrText !== shouldHaveInlines) {
              Transforms.removeNodes(editor, {
                at: path.concat(n),
                voids: true
              });
              n--;
            } else if (Element.isElement(_child)) {
              if (editor.isInline(_child)) {
                if (prev == null || !Text.isText(prev)) {
                  var newChild = {
                    text: ""
                  };
                  Transforms.insertNodes(editor, newChild, {
                    at: path.concat(n),
                    voids: true
                  });
                  n++;
                } else if (isLast) {
                  var _newChild = {
                    text: ""
                  };
                  Transforms.insertNodes(editor, _newChild, {
                    at: path.concat(n + 1),
                    voids: true
                  });
                  n++;
                }
              }
            } else {
              if (prev != null && Text.isText(prev)) {
                if (Text.equals(_child, prev, {
                  loose: true
                })) {
                  Transforms.mergeNodes(editor, {
                    at: path.concat(n),
                    voids: true
                  });
                  n--;
                } else if (prev.text === "") {
                  Transforms.removeNodes(editor, {
                    at: path.concat(n - 1),
                    voids: true
                  });
                  n--;
                } else if (isLast && _child.text === "") {
                  Transforms.removeNodes(editor, {
                    at: path.concat(n),
                    voids: true
                  });
                  n--;
                }
              }
            }
          }
        },
        removeMark: function removeMark(key) {
          var selection = editor.selection;
          if (selection) {
            if (Range.isExpanded(selection)) {
              Transforms.unsetNodes(editor, key, {
                match: Text.isText,
                split: true
              });
            } else {
              var marks = _objectSpread$9({}, Editor.marks(editor) || {});
              delete marks[key];
              editor.marks = marks;
              editor.onChange();
            }
          }
        }
      };
      return editor;
    };
    var getDirtyPaths = function getDirtyPaths2(op) {
      switch (op.type) {
        case "insert_text":
        case "remove_text":
        case "set_node": {
          var path = op.path;
          return Path.levels(path);
        }
        case "insert_node": {
          var node = op.node, _path2 = op.path;
          var levels = Path.levels(_path2);
          var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), function(_ref3) {
            var _ref4 = slicedToArray(_ref3, 2), p2 = _ref4[1];
            return _path2.concat(p2);
          });
          return [].concat(toConsumableArray(levels), toConsumableArray(descendants));
        }
        case "merge_node": {
          var _path3 = op.path;
          var ancestors = Path.ancestors(_path3);
          var previousPath = Path.previous(_path3);
          return [].concat(toConsumableArray(ancestors), [previousPath]);
        }
        case "move_node": {
          var _path4 = op.path, newPath = op.newPath;
          if (Path.equals(_path4, newPath)) {
            return [];
          }
          var oldAncestors = [];
          var newAncestors = [];
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = void 0;
          try {
            for (var _iterator6 = Path.ancestors(_path4)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var ancestor = _step6.value;
              var p = Path.transform(ancestor, op);
              oldAncestors.push(p);
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = void 0;
          try {
            for (var _iterator7 = Path.ancestors(newPath)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var _ancestor = _step7.value;
              var _p = Path.transform(_ancestor, op);
              newAncestors.push(_p);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
          return [].concat(oldAncestors, newAncestors);
        }
        case "remove_node": {
          var _path5 = op.path;
          var _ancestors = Path.ancestors(_path5);
          return toConsumableArray(_ancestors);
        }
        case "split_node": {
          var _path6 = op.path;
          var _levels = Path.levels(_path6);
          var nextPath = Path.next(_path6);
          return [].concat(toConsumableArray(_levels), [nextPath]);
        }
        default: {
          return [];
        }
      }
    };
    exports.Editor = Editor;
    exports.Element = Element;
    exports.Location = Location;
    exports.Node = Node;
    exports.Operation = Operation;
    exports.Path = Path;
    exports.PathRef = PathRef;
    exports.Point = Point;
    exports.PointRef = PointRef;
    exports.Range = Range;
    exports.RangeRef = RangeRef;
    exports.Span = Span;
    exports.Text = Text;
    exports.Transforms = Transforms;
    exports.createEditor = createEditor;
  },

  51(require, exports, module) {
    // node_modules/lodash/isObject.js
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  },

  46(require, exports, module) {
    // node_modules/lodash/_freeGlobal.js
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  },

  49(require, exports, module) {
    // node_modules/lodash/_root.js
    var freeGlobal = require(46 /* ./_freeGlobal */);
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  },

  55(require, exports, module) {
    // node_modules/lodash/now.js
    var root = require(49 /* ./_root */);
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  },

  44(require, exports, module) {
    // node_modules/lodash/_Symbol.js
    var root = require(49 /* ./_root */);
    var Symbol = root.Symbol;
    module.exports = Symbol;
  },

  47(require, exports, module) {
    // node_modules/lodash/_getRawTag.js
    var Symbol = require(44 /* ./_Symbol */);
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  },

  48(require, exports, module) {
    // node_modules/lodash/_objectToString.js
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  },

  45(require, exports, module) {
    // node_modules/lodash/_baseGetTag.js
    var Symbol = require(44 /* ./_Symbol */), getRawTag = require(47 /* ./_getRawTag */), objectToString = require(48 /* ./_objectToString */);
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  },

  52(require, exports, module) {
    // node_modules/lodash/isObjectLike.js
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  },

  53(require, exports, module) {
    // node_modules/lodash/isSymbol.js
    var baseGetTag = require(45 /* ./_baseGetTag */), isObjectLike = require(52 /* ./isObjectLike */);
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  },

  57(require, exports, module) {
    // node_modules/lodash/toNumber.js
    var isObject = require(51 /* ./isObject */), isSymbol = require(53 /* ./isSymbol */);
    var NAN = 0 / 0;
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  },

  50(require, exports, module) {
    // node_modules/lodash/debounce.js
    var isObject = require(51 /* ./isObject */), now = require(55 /* ./now */), toNumber = require(57 /* ./toNumber */);
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max, nativeMin = Math.min;
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce;
  },

  56(require, exports, module) {
    // node_modules/lodash/throttle.js
    var debounce = require(50 /* ./debounce */), isObject = require(51 /* ./isObject */);
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        leading,
        maxWait: wait,
        trailing
      });
    }
    module.exports = throttle;
  },

  34(require, exports, module) {
    // node_modules/compute-scroll-into-view/index.js
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    function isElement(el) {
      return el != null && typeof el === "object" && el.nodeType === 1;
    }
    function canOverflow(overflow, skipOverflowHiddenElements) {
      if (skipOverflowHiddenElements && overflow === "hidden") {
        return false;
      }
      return overflow !== "visible" && overflow !== "clip";
    }
    function getFrameElement(el) {
      if (!el.ownerDocument || !el.ownerDocument.defaultView) {
        return null;
      }
      try {
        return el.ownerDocument.defaultView.frameElement;
      } catch (e) {
        return null;
      }
    }
    function isHiddenByFrame(el) {
      var frame = getFrameElement(el);
      if (!frame) {
        return false;
      }
      return frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth;
    }
    function isScrollable(el, skipOverflowHiddenElements) {
      if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {
        var style = getComputedStyle(el, null);
        return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements) || isHiddenByFrame(el);
      }
      return false;
    }
    function alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {
      if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {
        return 0;
      }
      if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {
        return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;
      }
      if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {
        return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;
      }
      return 0;
    }
    var _default = function _default2(target, options) {
      var scrollMode = options.scrollMode, block = options.block, inline = options.inline, boundary = options.boundary, skipOverflowHiddenElements = options.skipOverflowHiddenElements;
      var checkBoundary = typeof boundary === "function" ? boundary : function(node) {
        return node !== boundary;
      };
      if (!isElement(target)) {
        throw new TypeError("Invalid target");
      }
      var scrollingElement = document.scrollingElement || document.documentElement;
      var frames = [];
      var cursor = target;
      while (isElement(cursor) && checkBoundary(cursor)) {
        cursor = cursor.parentNode;
        if (cursor === scrollingElement) {
          frames.push(cursor);
          break;
        }
        if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {
          continue;
        }
        if (isScrollable(cursor, skipOverflowHiddenElements)) {
          frames.push(cursor);
        }
      }
      var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;
      var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;
      var viewportX = window.scrollX || pageXOffset;
      var viewportY = window.scrollY || pageYOffset;
      var _target$getBoundingCl = target.getBoundingClientRect(), targetHeight = _target$getBoundingCl.height, targetWidth = _target$getBoundingCl.width, targetTop = _target$getBoundingCl.top, targetRight = _target$getBoundingCl.right, targetBottom = _target$getBoundingCl.bottom, targetLeft = _target$getBoundingCl.left;
      var targetBlock = block === "start" || block === "nearest" ? targetTop : block === "end" ? targetBottom : targetTop + targetHeight / 2;
      var targetInline = inline === "center" ? targetLeft + targetWidth / 2 : inline === "end" ? targetRight : targetLeft;
      var computations = [];
      for (var index = 0; index < frames.length; index++) {
        var frame = frames[index];
        var _frame$getBoundingCli = frame.getBoundingClientRect(), height = _frame$getBoundingCli.height, width = _frame$getBoundingCli.width, top = _frame$getBoundingCli.top, right = _frame$getBoundingCli.right, bottom = _frame$getBoundingCli.bottom, left = _frame$getBoundingCli.left;
        if (scrollMode === "if-needed" && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= top && targetBottom <= bottom && targetLeft >= left && targetRight <= right) {
          return computations;
        }
        var frameStyle = getComputedStyle(frame);
        var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);
        var borderTop = parseInt(frameStyle.borderTopWidth, 10);
        var borderRight = parseInt(frameStyle.borderRightWidth, 10);
        var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);
        var blockScroll = 0;
        var inlineScroll = 0;
        var scrollbarWidth = "offsetWidth" in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;
        var scrollbarHeight = "offsetHeight" in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;
        if (scrollingElement === frame) {
          if (block === "start") {
            blockScroll = targetBlock;
          } else if (block === "end") {
            blockScroll = targetBlock - viewportHeight;
          } else if (block === "nearest") {
            blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);
          } else {
            blockScroll = targetBlock - viewportHeight / 2;
          }
          if (inline === "start") {
            inlineScroll = targetInline;
          } else if (inline === "center") {
            inlineScroll = targetInline - viewportWidth / 2;
          } else if (inline === "end") {
            inlineScroll = targetInline - viewportWidth;
          } else {
            inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);
          }
          blockScroll = Math.max(0, blockScroll + viewportY);
          inlineScroll = Math.max(0, inlineScroll + viewportX);
        } else {
          if (block === "start") {
            blockScroll = targetBlock - top - borderTop;
          } else if (block === "end") {
            blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;
          } else if (block === "nearest") {
            blockScroll = alignNearest(top, bottom, height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);
          } else {
            blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2;
          }
          if (inline === "start") {
            inlineScroll = targetInline - left - borderLeft;
          } else if (inline === "center") {
            inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2;
          } else if (inline === "end") {
            inlineScroll = targetInline - right + borderRight + scrollbarWidth;
          } else {
            inlineScroll = alignNearest(left, right, width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);
          }
          var scrollLeft = frame.scrollLeft, scrollTop = frame.scrollTop;
          blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - height + scrollbarHeight));
          inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - width + scrollbarWidth));
          targetBlock += scrollTop - blockScroll;
          targetInline += scrollLeft - inlineScroll;
        }
        computations.push({
          el: frame,
          top: blockScroll,
          left: inlineScroll
        });
      }
      return computations;
    };
    exports["default"] = _default;
    module.exports = exports.default;
  },

  79(require, exports, module) {
    // node_modules/scroll-into-view-if-needed/index.js
    "use strict";
    exports.__esModule = true;
    exports["default"] = void 0;
    var _computeScrollIntoView = _interopRequireDefault(require(34 /* compute-scroll-into-view */));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function isOptionsObject(options) {
      return options === Object(options) && Object.keys(options).length !== 0;
    }
    function defaultBehavior(actions, behavior) {
      if (behavior === void 0) {
        behavior = "auto";
      }
      var canSmoothScroll = "scrollBehavior" in document.body.style;
      actions.forEach(function(_ref) {
        var el = _ref.el, top = _ref.top, left = _ref.left;
        if (el.scroll && canSmoothScroll) {
          el.scroll({
            top,
            left,
            behavior
          });
        } else {
          el.scrollTop = top;
          el.scrollLeft = left;
        }
      });
    }
    function getOptions(options) {
      if (options === false) {
        return {
          block: "end",
          inline: "nearest"
        };
      }
      if (isOptionsObject(options)) {
        return options;
      }
      return {
        block: "start",
        inline: "nearest"
      };
    }
    function scrollIntoView(target, options) {
      var targetIsDetached = !target.ownerDocument.documentElement.contains(target);
      if (isOptionsObject(options) && typeof options.behavior === "function") {
        return options.behavior(targetIsDetached ? [] : (0, _computeScrollIntoView["default"])(target, options));
      }
      if (targetIsDetached) {
        return;
      }
      var computeOptions = getOptions(options);
      return defaultBehavior((0, _computeScrollIntoView["default"])(target, computeOptions), computeOptions.behavior);
    }
    var _default = scrollIntoView;
    exports["default"] = _default;
    module.exports = exports.default;
  },

  35(require, exports, module) {
    // node_modules/direction/index.js
    "use strict";
    module.exports = direction;
    var RTL = "֑-߿יִ-﷽ﹰ-ﻼ";
    var LTR = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿";
    var rtl = new RegExp("^[^" + LTR + "]*[" + RTL + "]");
    var ltr = new RegExp("^[^" + RTL + "]*[" + LTR + "]");
    function direction(value) {
      value = String(value || "");
      if (rtl.test(value)) {
        return "rtl";
      }
      if (ltr.test(value)) {
        return "ltr";
      }
      return "neutral";
    }
  },

  42(require, exports) {
    // node_modules/is-hotkey/lib/index.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var IS_MAC = typeof window != "undefined" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
    var MODIFIERS = {
      alt: "altKey",
      control: "ctrlKey",
      meta: "metaKey",
      shift: "shiftKey"
    };
    var ALIASES = {
      add: "+",
      break: "pause",
      cmd: "meta",
      command: "meta",
      ctl: "control",
      ctrl: "control",
      del: "delete",
      down: "arrowdown",
      esc: "escape",
      ins: "insert",
      left: "arrowleft",
      mod: IS_MAC ? "meta" : "control",
      opt: "alt",
      option: "alt",
      return: "enter",
      right: "arrowright",
      space: " ",
      spacebar: " ",
      up: "arrowup",
      win: "meta",
      windows: "meta"
    };
    var CODES = {
      backspace: 8,
      tab: 9,
      enter: 13,
      shift: 16,
      control: 17,
      alt: 18,
      pause: 19,
      capslock: 20,
      escape: 27,
      " ": 32,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      arrowleft: 37,
      arrowup: 38,
      arrowright: 39,
      arrowdown: 40,
      insert: 45,
      delete: 46,
      meta: 91,
      numlock: 144,
      scrolllock: 145,
      ";": 186,
      "=": 187,
      ",": 188,
      "-": 189,
      ".": 190,
      "/": 191,
      "`": 192,
      "[": 219,
      "\\": 220,
      "]": 221,
      "'": 222
    };
    for (var f = 1; f < 20; f++) {
      CODES["f" + f] = 111 + f;
    }
    function isHotkey(hotkey, options, event) {
      if (options && !("byKey" in options)) {
        event = options;
        options = null;
      }
      if (!Array.isArray(hotkey)) {
        hotkey = [hotkey];
      }
      var array = hotkey.map(function(string) {
        return parseHotkey(string, options);
      });
      var check = function check2(e) {
        return array.some(function(object) {
          return compareHotkey(object, e);
        });
      };
      var ret = event == null ? check : check(event);
      return ret;
    }
    function isCodeHotkey(hotkey, event) {
      return isHotkey(hotkey, event);
    }
    function isKeyHotkey(hotkey, event) {
      return isHotkey(hotkey, {
        byKey: true
      }, event);
    }
    function parseHotkey(hotkey, options) {
      var byKey = options && options.byKey;
      var ret = {};
      hotkey = hotkey.replace("++", "+add");
      var values = hotkey.split("+");
      var length = values.length;
      for (var k in MODIFIERS) {
        ret[MODIFIERS[k]] = false;
      }
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var value = _step.value;
          var optional = value.endsWith("?") && value.length > 1;
          if (optional) {
            value = value.slice(0, -1);
          }
          var name = toKeyName(value);
          var modifier = MODIFIERS[name];
          if (length === 1 || !modifier) {
            if (byKey) {
              ret.key = name;
            } else {
              ret.which = toKeyCode(value);
            }
          }
          if (modifier) {
            ret[modifier] = optional ? null : true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      return ret;
    }
    function compareHotkey(object, event) {
      for (var key in object) {
        var expected = object[key];
        var actual = void 0;
        if (expected == null) {
          continue;
        }
        if (key === "key" && event.key != null) {
          actual = event.key.toLowerCase();
        } else if (key === "which") {
          actual = expected === 91 && event.which === 93 ? 91 : event.which;
        } else {
          actual = event[key];
        }
        if (actual == null && expected === false) {
          continue;
        }
        if (actual !== expected) {
          return false;
        }
      }
      return true;
    }
    function toKeyCode(name) {
      name = toKeyName(name);
      var code = CODES[name] || name.toUpperCase().charCodeAt(0);
      return code;
    }
    function toKeyName(name) {
      name = name.toLowerCase();
      name = ALIASES[name] || name;
      return name;
    }
    exports.default = isHotkey;
    exports.isHotkey = isHotkey;
    exports.isCodeHotkey = isCodeHotkey;
    exports.isKeyHotkey = isKeyHotkey;
    exports.parseHotkey = parseHotkey;
    exports.compareHotkey = compareHotkey;
    exports.toKeyCode = toKeyCode;
    exports.toKeyName = toKeyName;
  },

  81(require, exports) {
    // node_modules/slate-react/dist/index.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require(73 /* react */);
    var React__default = _interopDefault(React);
    var slate = require(82 /* slate */);
    var throttle = _interopDefault(require(56 /* lodash/throttle */));
    var scrollIntoView = _interopDefault(require(79 /* scroll-into-view-if-needed */));
    var getDirection = _interopDefault(require(35 /* direction */));
    var ReactDOM = _interopDefault(require(65 /* react-dom */));
    var isHotkey = require(42 /* is-hotkey */);
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var defineProperty = _defineProperty;
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var arrayWithHoles = _arrayWithHoles;
    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    var iterableToArrayLimit = _iterableToArrayLimit;
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
    var nonIterableRest = _nonIterableRest;
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
    }
    var slicedToArray = _slicedToArray;
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var objectWithoutProperties = _objectWithoutProperties;
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
    }
    var arrayWithoutHoles = _arrayWithoutHoles;
    function _iterableToArray(iter) {
      if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
        return Array.from(iter);
    }
    var iterableToArray = _iterableToArray;
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }
    var nonIterableSpread = _nonIterableSpread;
    function _toConsumableArray(arr) {
      return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
    }
    var toConsumableArray = _toConsumableArray;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var classCallCheck = _classCallCheck;
    var n = 0;
    var Key = function Key2() {
      classCallCheck(this, Key2);
      this.id = "".concat(n++);
    };
    var NODE_TO_INDEX = new WeakMap();
    var NODE_TO_PARENT = new WeakMap();
    var EDITOR_TO_ELEMENT = new WeakMap();
    var ELEMENT_TO_NODE = new WeakMap();
    var KEY_TO_ELEMENT = new WeakMap();
    var NODE_TO_ELEMENT = new WeakMap();
    var NODE_TO_KEY = new WeakMap();
    var IS_READ_ONLY = new WeakMap();
    var IS_FOCUSED = new WeakMap();
    var EDITOR_TO_ON_CHANGE = new WeakMap();
    var PLACEHOLDER_SYMBOL = Symbol("placeholder");
    var isDOMComment = function isDOMComment2(value) {
      return isDOMNode(value) && value.nodeType === 8;
    };
    var isDOMElement = function isDOMElement2(value) {
      return isDOMNode(value) && value.nodeType === 1;
    };
    var isDOMNode = function isDOMNode2(value) {
      return value instanceof Node;
    };
    var isDOMText = function isDOMText2(value) {
      return isDOMNode(value) && value.nodeType === 3;
    };
    var isPlainTextOnlyPaste = function isPlainTextOnlyPaste2(event) {
      return event.clipboardData && event.clipboardData.getData("text/plain") !== "" && event.clipboardData.types.length === 1;
    };
    var normalizeDOMPoint = function normalizeDOMPoint2(domPoint) {
      var _domPoint = slicedToArray(domPoint, 2), node = _domPoint[0], offset = _domPoint[1];
      if (isDOMElement(node) && node.childNodes.length) {
        var isLast = offset === node.childNodes.length;
        var direction = isLast ? "backward" : "forward";
        var index = isLast ? offset - 1 : offset;
        node = getEditableChild(node, index, direction);
        while (isDOMElement(node) && node.childNodes.length) {
          var i = isLast ? node.childNodes.length - 1 : 0;
          node = getEditableChild(node, i, direction);
        }
        offset = isLast && node.textContent != null ? node.textContent.length : 0;
      }
      return [node, offset];
    };
    var getEditableChild = function getEditableChild2(parent, index, direction) {
      var childNodes = parent.childNodes;
      var child = childNodes[index];
      var i = index;
      var triedForward = false;
      var triedBackward = false;
      while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute("contenteditable") === "false") {
        if (triedForward && triedBackward) {
          break;
        }
        if (i >= childNodes.length) {
          triedForward = true;
          i = index - 1;
          direction = "backward";
          continue;
        }
        if (i < 0) {
          triedBackward = true;
          i = index + 1;
          direction = "forward";
          continue;
        }
        child = childNodes[i];
        i += direction === "forward" ? 1 : -1;
      }
      return child;
    };
    var getPlainText = function getPlainText2(domNode) {
      var text = "";
      if (isDOMText(domNode) && domNode.nodeValue) {
        return domNode.nodeValue;
      }
      if (isDOMElement(domNode)) {
        for (var _i = 0, _Array$from = Array.from(domNode.childNodes); _i < _Array$from.length; _i++) {
          var childNode = _Array$from[_i];
          text += getPlainText2(childNode);
        }
        var display = getComputedStyle(domNode).getPropertyValue("display");
        if (display === "block" || display === "list" || domNode.tagName === "BR") {
          text += "\n";
        }
      }
      return text;
    };
    var ReactEditor = {
      findKey: function findKey(editor, node) {
        var key = NODE_TO_KEY.get(node);
        if (!key) {
          key = new Key();
          NODE_TO_KEY.set(node, key);
        }
        return key;
      },
      findPath: function findPath(editor, node) {
        var path = [];
        var child = node;
        while (true) {
          var parent = NODE_TO_PARENT.get(child);
          if (parent == null) {
            if (slate.Editor.isEditor(child)) {
              return path;
            } else {
              break;
            }
          }
          var i = NODE_TO_INDEX.get(child);
          if (i == null) {
            break;
          }
          path.unshift(i);
          child = parent;
        }
        throw new Error("Unable to find the path for Slate node: ".concat(JSON.stringify(node)));
      },
      isFocused: function isFocused(editor) {
        return !!IS_FOCUSED.get(editor);
      },
      isReadOnly: function isReadOnly(editor) {
        return !!IS_READ_ONLY.get(editor);
      },
      blur: function blur(editor) {
        var el = ReactEditor.toDOMNode(editor, editor);
        IS_FOCUSED.set(editor, false);
        if (window.document.activeElement === el) {
          el.blur();
        }
      },
      focus: function focus(editor) {
        var el = ReactEditor.toDOMNode(editor, editor);
        IS_FOCUSED.set(editor, true);
        if (window.document.activeElement !== el) {
          el.focus({
            preventScroll: true
          });
        }
      },
      deselect: function deselect(editor) {
        var selection = editor.selection;
        var domSelection = window.getSelection();
        if (domSelection && domSelection.rangeCount > 0) {
          domSelection.removeAllRanges();
        }
        if (selection) {
          slate.Transforms.deselect(editor);
        }
      },
      hasDOMNode: function hasDOMNode(editor, target) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var _options$editable = options.editable, editable = _options$editable === void 0 ? false : _options$editable;
        var editorEl = ReactEditor.toDOMNode(editor, editor);
        var targetEl;
        try {
          targetEl = isDOMElement(target) ? target : target.parentElement;
        } catch (err) {
          if (!err.message.includes('Permission denied to access property "nodeType"')) {
            throw err;
          }
        }
        if (!targetEl) {
          return false;
        }
        return targetEl.closest("[data-slate-editor]") === editorEl && (!editable || targetEl.isContentEditable || !!targetEl.getAttribute("data-slate-zero-width"));
      },
      insertData: function insertData(editor, data) {
        editor.insertData(data);
      },
      setFragmentData: function setFragmentData(editor, data) {
        editor.setFragmentData(data);
      },
      toDOMNode: function toDOMNode(editor, node) {
        var domNode = slate.Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));
        if (!domNode) {
          throw new Error("Cannot resolve a DOM node from Slate node: ".concat(JSON.stringify(node)));
        }
        return domNode;
      },
      toDOMPoint: function toDOMPoint(editor, point) {
        var _Editor$node = slate.Editor.node(editor, point.path), _Editor$node2 = slicedToArray(_Editor$node, 1), node = _Editor$node2[0];
        var el = ReactEditor.toDOMNode(editor, node);
        var domPoint;
        if (slate.Editor["void"](editor, {
          at: point
        })) {
          point = {
            path: point.path,
            offset: 0
          };
        }
        var selector = "[data-slate-string], [data-slate-zero-width]";
        var texts = Array.from(el.querySelectorAll(selector));
        var start = 0;
        for (var _i = 0, _texts = texts; _i < _texts.length; _i++) {
          var text = _texts[_i];
          var domNode = text.childNodes[0];
          if (domNode == null || domNode.textContent == null) {
            continue;
          }
          var length = domNode.textContent.length;
          var attr = text.getAttribute("data-slate-length");
          var trueLength = attr == null ? length : parseInt(attr, 10);
          var end = start + trueLength;
          if (point.offset <= end) {
            var offset = Math.min(length, Math.max(0, point.offset - start));
            domPoint = [domNode, offset];
            break;
          }
          start = end;
        }
        if (!domPoint) {
          throw new Error("Cannot resolve a DOM point from Slate point: ".concat(JSON.stringify(point)));
        }
        return domPoint;
      },
      toDOMRange: function toDOMRange(editor, range) {
        var anchor = range.anchor, focus = range.focus;
        var isBackward = slate.Range.isBackward(range);
        var domAnchor = ReactEditor.toDOMPoint(editor, anchor);
        var domFocus = slate.Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);
        var domRange = window.document.createRange();
        var _ref = isBackward ? domFocus : domAnchor, _ref2 = slicedToArray(_ref, 2), startNode = _ref2[0], startOffset = _ref2[1];
        var _ref3 = isBackward ? domAnchor : domFocus, _ref4 = slicedToArray(_ref3, 2), endNode = _ref4[0], endOffset = _ref4[1];
        var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;
        var isStartAtZeroWidth = !!startEl.getAttribute("data-slate-zero-width");
        var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;
        var isEndAtZeroWidth = !!endEl.getAttribute("data-slate-zero-width");
        domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);
        domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);
        return domRange;
      },
      toSlateNode: function toSlateNode(editor, domNode) {
        var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;
        if (domEl && !domEl.hasAttribute("data-slate-node")) {
          domEl = domEl.closest("[data-slate-node]");
        }
        var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;
        if (!node) {
          throw new Error("Cannot resolve a Slate node from DOM node: ".concat(domEl));
        }
        return node;
      },
      findEventRange: function findEventRange(editor, event) {
        if ("nativeEvent" in event) {
          event = event.nativeEvent;
        }
        var _event = event, x = _event.clientX, y = _event.clientY, target = _event.target;
        if (x == null || y == null) {
          throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
        }
        var node = ReactEditor.toSlateNode(editor, event.target);
        var path = ReactEditor.findPath(editor, node);
        if (slate.Editor.isVoid(editor, node)) {
          var rect = target.getBoundingClientRect();
          var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;
          var edge = slate.Editor.point(editor, path, {
            edge: isPrev ? "start" : "end"
          });
          var point = isPrev ? slate.Editor.before(editor, edge) : slate.Editor.after(editor, edge);
          if (point) {
            var _range = slate.Editor.range(editor, point);
            return _range;
          }
        }
        var domRange;
        var _window = window, document2 = _window.document;
        if (document2.caretRangeFromPoint) {
          domRange = document2.caretRangeFromPoint(x, y);
        } else {
          var position = document2.caretPositionFromPoint(x, y);
          if (position) {
            domRange = document2.createRange();
            domRange.setStart(position.offsetNode, position.offset);
            domRange.setEnd(position.offsetNode, position.offset);
          }
        }
        if (!domRange) {
          throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(event));
        }
        var range = ReactEditor.toSlateRange(editor, domRange);
        return range;
      },
      toSlatePoint: function toSlatePoint(editor, domPoint) {
        var _normalizeDOMPoint = normalizeDOMPoint(domPoint), _normalizeDOMPoint2 = slicedToArray(_normalizeDOMPoint, 2), nearestNode = _normalizeDOMPoint2[0], nearestOffset = _normalizeDOMPoint2[1];
        var parentNode = nearestNode.parentNode;
        var textNode = null;
        var offset = 0;
        if (parentNode) {
          var voidNode = parentNode.closest('[data-slate-void="true"]');
          var leafNode = parentNode.closest("[data-slate-leaf]");
          var domNode = null;
          if (leafNode) {
            textNode = leafNode.closest('[data-slate-node="text"]');
            var range = window.document.createRange();
            range.setStart(textNode, 0);
            range.setEnd(nearestNode, nearestOffset);
            var contents = range.cloneContents();
            var removals = [].concat(toConsumableArray(contents.querySelectorAll("[data-slate-zero-width]")), toConsumableArray(contents.querySelectorAll("[contenteditable=false]")));
            removals.forEach(function(el) {
              el.parentNode.removeChild(el);
            });
            offset = contents.textContent.length;
            domNode = textNode;
          } else if (voidNode) {
            leafNode = voidNode.querySelector("[data-slate-leaf]");
            textNode = leafNode.closest('[data-slate-node="text"]');
            domNode = leafNode;
            offset = domNode.textContent.length;
          }
          if (domNode && offset === domNode.textContent.length && parentNode.hasAttribute("data-slate-zero-width")) {
            offset--;
          }
        }
        if (!textNode) {
          throw new Error("Cannot resolve a Slate point from DOM point: ".concat(domPoint));
        }
        var slateNode = ReactEditor.toSlateNode(editor, textNode);
        var path = ReactEditor.findPath(editor, slateNode);
        return {
          path,
          offset
        };
      },
      toSlateRange: function toSlateRange(editor, domRange) {
        var el = domRange instanceof Selection ? domRange.anchorNode : domRange.startContainer;
        var anchorNode;
        var anchorOffset;
        var focusNode;
        var focusOffset;
        var isCollapsed;
        if (el) {
          if (domRange instanceof Selection) {
            anchorNode = domRange.anchorNode;
            anchorOffset = domRange.anchorOffset;
            focusNode = domRange.focusNode;
            focusOffset = domRange.focusOffset;
            isCollapsed = domRange.isCollapsed;
          } else {
            anchorNode = domRange.startContainer;
            anchorOffset = domRange.startOffset;
            focusNode = domRange.endContainer;
            focusOffset = domRange.endOffset;
            isCollapsed = domRange.collapsed;
          }
        }
        if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {
          throw new Error("Cannot resolve a Slate range from DOM range: ".concat(domRange));
        }
        var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset]);
        var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset]);
        return {
          anchor,
          focus
        };
      }
    };
    var FocusedContext = React.createContext(false);
    var useFocused = function useFocused2() {
      return React.useContext(FocusedContext);
    };
    var EditorContext = React.createContext(null);
    var useEditor = function useEditor2() {
      var editor = React.useContext(EditorContext);
      if (!editor) {
        throw new Error("The `useEditor` hook must be used inside the <Slate> component's context.");
      }
      return editor;
    };
    var SlateContext = React.createContext(null);
    var useSlate = function useSlate2() {
      var context = React.useContext(SlateContext);
      if (!context) {
        throw new Error("The `useSlate` hook must be used inside the <SlateProvider> component's context.");
      }
      var _context = slicedToArray(context, 1), editor = _context[0];
      return editor;
    };
    var Slate = function Slate2(props) {
      var editor = props.editor, children = props.children, onChange = props.onChange, value = props.value, rest = objectWithoutProperties(props, ["editor", "children", "onChange", "value"]);
      var _useState = React.useState(0), _useState2 = slicedToArray(_useState, 2), key = _useState2[0], setKey = _useState2[1];
      var context = React.useMemo(function() {
        editor.children = value;
        Object.assign(editor, rest);
        return [editor];
      }, [key, value].concat(toConsumableArray(Object.values(rest))));
      var onContextChange = React.useCallback(function() {
        onChange(editor.children);
        setKey(key + 1);
      }, [key, onChange]);
      EDITOR_TO_ON_CHANGE.set(editor, onContextChange);
      React.useEffect(function() {
        return function() {
          EDITOR_TO_ON_CHANGE.set(editor, function() {
          });
        };
      }, []);
      return React__default.createElement(SlateContext.Provider, {
        value: context
      }, React__default.createElement(EditorContext.Provider, {
        value: editor
      }, React__default.createElement(FocusedContext.Provider, {
        value: ReactEditor.isFocused(editor)
      }, children)));
    };
    var ReadOnlyContext = React.createContext(false);
    var useReadOnly = function useReadOnly2() {
      return React.useContext(ReadOnlyContext);
    };
    var SelectedContext = React.createContext(false);
    var useSelected = function useSelected2() {
      return React.useContext(SelectedContext);
    };
    var withReact = function withReact2(editor) {
      var e = editor;
      var apply = e.apply, onChange = e.onChange;
      e.apply = function(op) {
        var matches = [];
        switch (op.type) {
          case "insert_text":
          case "remove_text":
          case "set_node": {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = void 0;
            try {
              for (var _iterator = slate.Editor.levels(e, {
                at: op.path
              })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = slicedToArray(_step.value, 2), node = _step$value[0], path = _step$value[1];
                var key = ReactEditor.findKey(e, node);
                matches.push([path, key]);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
            break;
          }
          case "insert_node":
          case "remove_node":
          case "merge_node":
          case "split_node": {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = void 0;
            try {
              for (var _iterator2 = slate.Editor.levels(e, {
                at: slate.Path.parent(op.path)
              })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _step2$value = slicedToArray(_step2.value, 2), _node = _step2$value[0], _path = _step2$value[1];
                var _key = ReactEditor.findKey(e, _node);
                matches.push([_path, _key]);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            break;
          }
        }
        apply(op);
        for (var _i = 0, _matches = matches; _i < _matches.length; _i++) {
          var _matches$_i = slicedToArray(_matches[_i], 2), _path2 = _matches$_i[0], _key2 = _matches$_i[1];
          var _Editor$node = slate.Editor.node(e, _path2), _Editor$node2 = slicedToArray(_Editor$node, 1), _node2 = _Editor$node2[0];
          NODE_TO_KEY.set(_node2, _key2);
        }
      };
      e.setFragmentData = function(data) {
        var selection = e.selection;
        if (!selection) {
          return;
        }
        var _Range$edges = slate.Range.edges(selection), _Range$edges2 = slicedToArray(_Range$edges, 2), start = _Range$edges2[0], end = _Range$edges2[1];
        var startVoid = slate.Editor["void"](e, {
          at: start.path
        });
        var endVoid = slate.Editor["void"](e, {
          at: end.path
        });
        if (slate.Range.isCollapsed(selection) && !startVoid) {
          return;
        }
        var domRange = ReactEditor.toDOMRange(e, selection);
        var contents = domRange.cloneContents();
        var attach = contents.childNodes[0];
        contents.childNodes.forEach(function(node) {
          if (node.textContent && node.textContent.trim() !== "") {
            attach = node;
          }
        });
        if (endVoid) {
          var _endVoid = slicedToArray(endVoid, 1), voidNode = _endVoid[0];
          var r = domRange.cloneRange();
          var domNode = ReactEditor.toDOMNode(e, voidNode);
          r.setEndAfter(domNode);
          contents = r.cloneContents();
        }
        if (startVoid) {
          attach = contents.querySelector("[data-slate-spacer]");
        }
        Array.from(contents.querySelectorAll("[data-slate-zero-width]")).forEach(function(zw) {
          var isNewline = zw.getAttribute("data-slate-zero-width") === "n";
          zw.textContent = isNewline ? "\n" : "";
        });
        if (isDOMText(attach)) {
          var span = document.createElement("span");
          span.style.whiteSpace = "pre";
          span.appendChild(attach);
          contents.appendChild(span);
          attach = span;
        }
        var fragment = e.getFragment();
        var string = JSON.stringify(fragment);
        var encoded = window.btoa(encodeURIComponent(string));
        attach.setAttribute("data-slate-fragment", encoded);
        data.setData("application/x-slate-fragment", encoded);
        var div = document.createElement("div");
        div.appendChild(contents);
        div.setAttribute("hidden", "true");
        document.body.appendChild(div);
        data.setData("text/html", div.innerHTML);
        data.setData("text/plain", getPlainText(div));
        document.body.removeChild(div);
      };
      e.insertData = function(data) {
        var fragment = data.getData("application/x-slate-fragment");
        if (fragment) {
          var decoded = decodeURIComponent(window.atob(fragment));
          var parsed = JSON.parse(decoded);
          slate.Transforms.insertFragment(e, parsed);
          return;
        }
        var text = data.getData("text/plain");
        if (text) {
          var lines = text.split(/\r\n|\r|\n/);
          var split = false;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (var _iterator3 = lines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var line = _step3.value;
              if (split) {
                slate.Transforms.splitNodes(e, {
                  always: true
                });
              }
              slate.Transforms.insertText(e, line);
              split = true;
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      };
      e.onChange = function() {
        ReactDOM.unstable_batchedUpdates(function() {
          var onContextChange = EDITOR_TO_ON_CHANGE.get(e);
          if (onContextChange) {
            onContextChange();
          }
          onChange();
        });
      };
      return e;
    };
    var String = function String2(props) {
      var isLast = props.isLast, leaf = props.leaf, parent = props.parent, text = props.text;
      var editor = useEditor();
      var path = ReactEditor.findPath(editor, text);
      var parentPath = slate.Path.parent(path);
      if (editor.isVoid(parent)) {
        return React__default.createElement(ZeroWidthString, {
          length: slate.Node.string(parent).length
        });
      }
      if (leaf.text === "" && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate.Editor.string(editor, parentPath) === "") {
        return React__default.createElement(ZeroWidthString, {
          isLineBreak: true
        });
      }
      if (leaf.text === "") {
        return React__default.createElement(ZeroWidthString, null);
      }
      if (isLast && leaf.text.slice(-1) === "\n") {
        return React__default.createElement(TextString, {
          isTrailing: true,
          text: leaf.text
        });
      }
      return React__default.createElement(TextString, {
        text: leaf.text
      });
    };
    var TextString = function TextString2(props) {
      var text = props.text, _props$isTrailing = props.isTrailing, isTrailing = _props$isTrailing === void 0 ? false : _props$isTrailing;
      return React__default.createElement("span", {
        "data-slate-string": true
      }, text, isTrailing ? "\n" : null);
    };
    var ZeroWidthString = function ZeroWidthString2(props) {
      var _props$length = props.length, length = _props$length === void 0 ? 0 : _props$length, _props$isLineBreak = props.isLineBreak, isLineBreak = _props$isLineBreak === void 0 ? false : _props$isLineBreak;
      return React__default.createElement("span", {
        "data-slate-zero-width": isLineBreak ? "n" : "z",
        "data-slate-length": length
      }, "﻿", isLineBreak ? React__default.createElement("br", null) : null);
    };
    var Leaf = function Leaf2(props) {
      var leaf = props.leaf, isLast = props.isLast, text = props.text, parent = props.parent, _props$renderLeaf = props.renderLeaf, renderLeaf = _props$renderLeaf === void 0 ? function(props2) {
        return React__default.createElement(DefaultLeaf, Object.assign({}, props2));
      } : _props$renderLeaf;
      var children = React__default.createElement(String, {
        isLast,
        leaf,
        parent,
        text
      });
      if (leaf[PLACEHOLDER_SYMBOL]) {
        children = React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
          contentEditable: false,
          style: {
            pointerEvents: "none",
            display: "inline-block",
            verticalAlign: "text-top",
            width: "0",
            maxWidth: "100%",
            whiteSpace: "nowrap",
            opacity: "0.333",
            userSelect: "none",
            fontStyle: "normal",
            fontWeight: "normal",
            textDecoration: "none"
          }
        }, leaf.placeholder), children);
      }
      var attributes = {
        "data-slate-leaf": true
      };
      return renderLeaf({
        attributes,
        children,
        leaf,
        text
      });
    };
    var MemoizedLeaf = React__default.memo(Leaf, function(prev, next) {
      return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && slate.Text.matches(next.leaf, prev.leaf);
    });
    var DefaultLeaf = function DefaultLeaf2(props) {
      var attributes = props.attributes, children = props.children;
      return React__default.createElement("span", Object.assign({}, attributes), children);
    };
    var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React.useLayoutEffect : React.useEffect;
    var Text = function Text2(props) {
      var decorations = props.decorations, isLast = props.isLast, parent = props.parent, renderLeaf = props.renderLeaf, text = props.text;
      var editor = useEditor();
      var ref = React.useRef(null);
      var leaves = slate.Text.decorations(text, decorations);
      var key = ReactEditor.findKey(editor, text);
      var children = [];
      for (var i = 0; i < leaves.length; i++) {
        var leaf = leaves[i];
        children.push(React__default.createElement(MemoizedLeaf, {
          isLast: isLast && i === leaves.length - 1,
          key: "".concat(key.id, "-").concat(i),
          leaf,
          text,
          parent,
          renderLeaf
        }));
      }
      useIsomorphicLayoutEffect(function() {
        if (ref.current) {
          KEY_TO_ELEMENT.set(key, ref.current);
          NODE_TO_ELEMENT.set(text, ref.current);
          ELEMENT_TO_NODE.set(ref.current, text);
        } else {
          KEY_TO_ELEMENT["delete"](key);
          NODE_TO_ELEMENT["delete"](text);
        }
      });
      return React__default.createElement("span", {
        "data-slate-node": "text",
        ref
      }, children);
    };
    var MemoizedText = React__default.memo(Text, function(prev, next) {
      return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text;
    });
    var Element = function Element2(props) {
      var decorate = props.decorate, decorations = props.decorations, element = props.element, _props$renderElement = props.renderElement, renderElement = _props$renderElement === void 0 ? function(p) {
        return React__default.createElement(DefaultElement, Object.assign({}, p));
      } : _props$renderElement, renderLeaf = props.renderLeaf, selection = props.selection;
      var ref = React.useRef(null);
      var editor = useEditor();
      var readOnly = useReadOnly();
      var isInline = editor.isInline(element);
      var key = ReactEditor.findKey(editor, element);
      var children = React__default.createElement(Children, {
        decorate,
        decorations,
        node: element,
        renderElement,
        renderLeaf,
        selection
      });
      var attributes = {
        "data-slate-node": "element",
        ref
      };
      if (isInline) {
        attributes["data-slate-inline"] = true;
      }
      if (!isInline && slate.Editor.hasInlines(editor, element)) {
        var text = slate.Node.string(element);
        var dir = getDirection(text);
        if (dir === "rtl") {
          attributes.dir = dir;
        }
      }
      if (slate.Editor.isVoid(editor, element)) {
        attributes["data-slate-void"] = true;
        if (!readOnly && isInline) {
          attributes.contentEditable = false;
        }
        var Tag = isInline ? "span" : "div";
        var _Node$texts = slate.Node.texts(element), _Node$texts2 = slicedToArray(_Node$texts, 1), _Node$texts2$ = slicedToArray(_Node$texts2[0], 1), _text = _Node$texts2$[0];
        children = readOnly ? null : React__default.createElement(Tag, {
          "data-slate-spacer": true,
          style: {
            height: "0",
            color: "transparent",
            outline: "none",
            position: "absolute"
          }
        }, React__default.createElement(MemoizedText, {
          decorations: [],
          isLast: false,
          parent: element,
          text: _text
        }));
        NODE_TO_INDEX.set(_text, 0);
        NODE_TO_PARENT.set(_text, element);
      }
      useIsomorphicLayoutEffect(function() {
        if (ref.current) {
          KEY_TO_ELEMENT.set(key, ref.current);
          NODE_TO_ELEMENT.set(element, ref.current);
          ELEMENT_TO_NODE.set(ref.current, element);
        } else {
          KEY_TO_ELEMENT["delete"](key);
          NODE_TO_ELEMENT["delete"](element);
        }
      });
      return React__default.createElement(SelectedContext.Provider, {
        value: !!selection
      }, renderElement({
        attributes,
        children,
        element
      }));
    };
    var MemoizedElement = React__default.memo(Element, function(prev, next) {
      return prev.decorate === next.decorate && prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && slate.Range.equals(prev.selection, next.selection));
    });
    var DefaultElement = function DefaultElement2(props) {
      var attributes = props.attributes, children = props.children, element = props.element;
      var editor = useEditor();
      var Tag = editor.isInline(element) ? "span" : "div";
      return React__default.createElement(Tag, Object.assign({}, attributes, {
        style: {
          position: "relative"
        }
      }), children);
    };
    var isRangeListEqual = function isRangeListEqual2(list, another) {
      if (list.length !== another.length) {
        return false;
      }
      for (var i = 0; i < list.length; i++) {
        var range = list[i];
        var other = another[i];
        if (!slate.Range.equals(range, other)) {
          return false;
        }
      }
      return true;
    };
    var Children = function Children2(props) {
      var decorate = props.decorate, decorations = props.decorations, node = props.node, renderElement = props.renderElement, renderLeaf = props.renderLeaf, selection = props.selection;
      var editor = useEditor();
      var path = ReactEditor.findPath(editor, node);
      var children = [];
      var isLeafBlock = slate.Element.isElement(node) && !editor.isInline(node) && slate.Editor.hasInlines(editor, node);
      for (var i = 0; i < node.children.length; i++) {
        var p = path.concat(i);
        var n2 = node.children[i];
        var key = ReactEditor.findKey(editor, n2);
        var range = slate.Editor.range(editor, p);
        var sel = selection && slate.Range.intersection(range, selection);
        var ds = decorate([n2, p]);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = decorations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var dec = _step.value;
            var d = slate.Range.intersection(dec, range);
            if (d) {
              ds.push(d);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        if (slate.Element.isElement(n2)) {
          children.push(React__default.createElement(MemoizedElement, {
            decorate,
            decorations: ds,
            element: n2,
            key: key.id,
            renderElement,
            renderLeaf,
            selection: sel
          }));
        } else {
          children.push(React__default.createElement(MemoizedText, {
            decorations: ds,
            key: key.id,
            isLast: isLeafBlock && i === node.children.length - 1,
            parent: node,
            renderLeaf,
            text: n2
          }));
        }
        NODE_TO_INDEX.set(n2, i);
        NODE_TO_PARENT.set(n2, node);
      }
      return React__default.createElement(React__default.Fragment, null, children);
    };
    var IS_IOS = typeof navigator !== "undefined" && typeof window !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    var IS_APPLE = typeof navigator !== "undefined" && /Mac OS X/.test(navigator.userAgent);
    var IS_FIREFOX = typeof navigator !== "undefined" && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);
    var IS_SAFARI = typeof navigator !== "undefined" && /Version\/[\d\.]+.*Safari/.test(navigator.userAgent);
    var IS_EDGE_LEGACY = typeof navigator !== "undefined" && /Edge?\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent);
    var HOTKEYS = {
      bold: "mod+b",
      compose: ["down", "left", "right", "up", "backspace", "enter"],
      moveBackward: "left",
      moveForward: "right",
      moveWordBackward: "ctrl+left",
      moveWordForward: "ctrl+right",
      deleteBackward: "shift?+backspace",
      deleteForward: "shift?+delete",
      extendBackward: "shift+left",
      extendForward: "shift+right",
      italic: "mod+i",
      splitBlock: "shift?+enter",
      undo: "mod+z"
    };
    var APPLE_HOTKEYS = {
      moveLineBackward: "opt+up",
      moveLineForward: "opt+down",
      moveWordBackward: "opt+left",
      moveWordForward: "opt+right",
      deleteBackward: ["ctrl+backspace", "ctrl+h"],
      deleteForward: ["ctrl+delete", "ctrl+d"],
      deleteLineBackward: "cmd+shift?+backspace",
      deleteLineForward: ["cmd+shift?+delete", "ctrl+k"],
      deleteWordBackward: "opt+shift?+backspace",
      deleteWordForward: "opt+shift?+delete",
      extendLineBackward: "opt+shift+up",
      extendLineForward: "opt+shift+down",
      redo: "cmd+shift+z",
      transposeCharacter: "ctrl+t"
    };
    var WINDOWS_HOTKEYS = {
      deleteWordBackward: "ctrl+shift?+backspace",
      deleteWordForward: "ctrl+shift?+delete",
      redo: ["ctrl+y", "ctrl+shift+z"]
    };
    var create = function create2(key) {
      var generic = HOTKEYS[key];
      var apple = APPLE_HOTKEYS[key];
      var windows = WINDOWS_HOTKEYS[key];
      var isGeneric = generic && isHotkey.isKeyHotkey(generic);
      var isApple = apple && isHotkey.isKeyHotkey(apple);
      var isWindows = windows && isHotkey.isKeyHotkey(windows);
      return function(event) {
        if (isGeneric && isGeneric(event))
          return true;
        if (IS_APPLE && isApple && isApple(event))
          return true;
        if (!IS_APPLE && isWindows && isWindows(event))
          return true;
        return false;
      };
    };
    var Hotkeys = {
      isBold: create("bold"),
      isCompose: create("compose"),
      isMoveBackward: create("moveBackward"),
      isMoveForward: create("moveForward"),
      isDeleteBackward: create("deleteBackward"),
      isDeleteForward: create("deleteForward"),
      isDeleteLineBackward: create("deleteLineBackward"),
      isDeleteLineForward: create("deleteLineForward"),
      isDeleteWordBackward: create("deleteWordBackward"),
      isDeleteWordForward: create("deleteWordForward"),
      isExtendBackward: create("extendBackward"),
      isExtendForward: create("extendForward"),
      isExtendLineBackward: create("extendLineBackward"),
      isExtendLineForward: create("extendLineForward"),
      isItalic: create("italic"),
      isMoveLineBackward: create("moveLineBackward"),
      isMoveLineForward: create("moveLineForward"),
      isMoveWordBackward: create("moveWordBackward"),
      isMoveWordForward: create("moveWordForward"),
      isRedo: create("redo"),
      isSplitBlock: create("splitBlock"),
      isTransposeCharacter: create("transposeCharacter"),
      isUndo: create("undo")
    };
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var HAS_BEFORE_INPUT_SUPPORT = !(IS_FIREFOX || IS_EDGE_LEGACY);
    var Editable = function Editable2(props) {
      var autoFocus = props.autoFocus, _props$decorate = props.decorate, decorate = _props$decorate === void 0 ? defaultDecorate : _props$decorate, propsOnDOMBeforeInput = props.onDOMBeforeInput, placeholder = props.placeholder, _props$readOnly = props.readOnly, readOnly = _props$readOnly === void 0 ? false : _props$readOnly, renderElement = props.renderElement, renderLeaf = props.renderLeaf, _props$style = props.style, style = _props$style === void 0 ? {} : _props$style, _props$as = props.as, Component = _props$as === void 0 ? "div" : _props$as, attributes = objectWithoutProperties(props, ["autoFocus", "decorate", "onDOMBeforeInput", "placeholder", "readOnly", "renderElement", "renderLeaf", "style", "as"]);
      var editor = useSlate();
      var ref = React.useRef(null);
      IS_READ_ONLY.set(editor, readOnly);
      var state = React.useMemo(function() {
        return {
          isComposing: false,
          isUpdatingSelection: false,
          latestElement: null
        };
      }, []);
      useIsomorphicLayoutEffect(function() {
        if (ref.current) {
          EDITOR_TO_ELEMENT.set(editor, ref.current);
          NODE_TO_ELEMENT.set(editor, ref.current);
          ELEMENT_TO_NODE.set(ref.current, editor);
        } else {
          NODE_TO_ELEMENT["delete"](editor);
        }
      });
      useIsomorphicLayoutEffect(function() {
        var selection = editor.selection;
        var domSelection = window.getSelection();
        if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {
          return;
        }
        var hasDomSelection = domSelection.type !== "None";
        if (!selection && !hasDomSelection) {
          return;
        }
        var editorElement = EDITOR_TO_ELEMENT.get(editor);
        var hasDomSelectionInEditor = false;
        if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {
          hasDomSelectionInEditor = true;
        }
        if (hasDomSelection && hasDomSelectionInEditor && selection && slate.Range.equals(ReactEditor.toSlateRange(editor, domSelection), selection)) {
          return;
        }
        var el = ReactEditor.toDOMNode(editor, editor);
        state.isUpdatingSelection = true;
        domSelection.removeAllRanges();
        var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);
        if (newDomRange) {
          domSelection.addRange(newDomRange);
          var leafEl = newDomRange.startContainer.parentElement;
          scrollIntoView(leafEl, {
            scrollMode: "if-needed",
            boundary: el
          });
        }
        setTimeout(function() {
          if (newDomRange && IS_FIREFOX) {
            el.focus();
          }
          state.isUpdatingSelection = false;
        });
      });
      React.useEffect(function() {
        if (ref.current && autoFocus) {
          ref.current.focus();
        }
      }, [autoFocus]);
      var onDOMBeforeInput = React.useCallback(function(event) {
        if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {
          var selection = editor.selection;
          var type = event.inputType;
          var data = event.dataTransfer || event.data || void 0;
          if (type === "insertCompositionText" || type === "deleteCompositionText") {
            return;
          }
          event.preventDefault();
          if (!type.startsWith("delete") || type.startsWith("deleteBy")) {
            var _event$getTargetRange = event.getTargetRanges(), _event$getTargetRange2 = slicedToArray(_event$getTargetRange, 1), targetRange = _event$getTargetRange2[0];
            if (targetRange) {
              var range = ReactEditor.toSlateRange(editor, targetRange);
              if (!selection || !slate.Range.equals(selection, range)) {
                slate.Transforms.select(editor, range);
              }
            }
          }
          if (selection && slate.Range.isExpanded(selection) && type.startsWith("delete")) {
            slate.Editor.deleteFragment(editor);
            return;
          }
          switch (type) {
            case "deleteByComposition":
            case "deleteByCut":
            case "deleteByDrag": {
              slate.Editor.deleteFragment(editor);
              break;
            }
            case "deleteContent":
            case "deleteContentForward": {
              slate.Editor.deleteForward(editor);
              break;
            }
            case "deleteContentBackward": {
              slate.Editor.deleteBackward(editor);
              break;
            }
            case "deleteEntireSoftLine": {
              slate.Editor.deleteBackward(editor, {
                unit: "line"
              });
              slate.Editor.deleteForward(editor, {
                unit: "line"
              });
              break;
            }
            case "deleteHardLineBackward": {
              slate.Editor.deleteBackward(editor, {
                unit: "block"
              });
              break;
            }
            case "deleteSoftLineBackward": {
              slate.Editor.deleteBackward(editor, {
                unit: "line"
              });
              break;
            }
            case "deleteHardLineForward": {
              slate.Editor.deleteForward(editor, {
                unit: "block"
              });
              break;
            }
            case "deleteSoftLineForward": {
              slate.Editor.deleteForward(editor, {
                unit: "line"
              });
              break;
            }
            case "deleteWordBackward": {
              slate.Editor.deleteBackward(editor, {
                unit: "word"
              });
              break;
            }
            case "deleteWordForward": {
              slate.Editor.deleteForward(editor, {
                unit: "word"
              });
              break;
            }
            case "insertLineBreak":
            case "insertParagraph": {
              slate.Editor.insertBreak(editor);
              break;
            }
            case "insertFromComposition":
            case "insertFromDrop":
            case "insertFromPaste":
            case "insertFromYank":
            case "insertReplacementText":
            case "insertText": {
              if (data instanceof DataTransfer) {
                ReactEditor.insertData(editor, data);
              } else if (typeof data === "string") {
                slate.Editor.insertText(editor, data);
              }
              break;
            }
          }
        }
      }, [readOnly]);
      useIsomorphicLayoutEffect(function() {
        if (ref.current) {
          ref.current.addEventListener("beforeinput", onDOMBeforeInput);
        }
        return function() {
          if (ref.current) {
            ref.current.removeEventListener("beforeinput", onDOMBeforeInput);
          }
        };
      }, [onDOMBeforeInput]);
      var onDOMSelectionChange = React.useCallback(throttle(function() {
        if (!readOnly && !state.isComposing && !state.isUpdatingSelection) {
          var activeElement = window.document.activeElement;
          var el = ReactEditor.toDOMNode(editor, editor);
          var domSelection = window.getSelection();
          if (activeElement === el) {
            state.latestElement = activeElement;
            IS_FOCUSED.set(editor, true);
          } else {
            IS_FOCUSED["delete"](editor);
          }
          if (!domSelection) {
            return slate.Transforms.deselect(editor);
          }
          var anchorNode = domSelection.anchorNode, focusNode = domSelection.focusNode;
          var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideVoid(editor, anchorNode);
          var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideVoid(editor, focusNode);
          if (anchorNodeSelectable && focusNodeSelectable) {
            var range = ReactEditor.toSlateRange(editor, domSelection);
            slate.Transforms.select(editor, range);
          } else {
            slate.Transforms.deselect(editor);
          }
        }
      }, 100), [readOnly]);
      useIsomorphicLayoutEffect(function() {
        window.document.addEventListener("selectionchange", onDOMSelectionChange);
        return function() {
          window.document.removeEventListener("selectionchange", onDOMSelectionChange);
        };
      }, [onDOMSelectionChange]);
      var decorations = decorate([editor, []]);
      if (placeholder && editor.children.length === 1 && Array.from(slate.Node.texts(editor)).length === 1 && slate.Node.string(editor) === "") {
        var _decorations$push;
        var start = slate.Editor.start(editor, []);
        decorations.push((_decorations$push = {}, defineProperty(_decorations$push, PLACEHOLDER_SYMBOL, true), defineProperty(_decorations$push, "placeholder", placeholder), defineProperty(_decorations$push, "anchor", start), defineProperty(_decorations$push, "focus", start), _decorations$push));
      }
      return React__default.createElement(ReadOnlyContext.Provider, {
        value: readOnly
      }, React__default.createElement(Component, Object.assign({
        "data-gramm": false,
        role: readOnly ? void 0 : "textbox"
      }, attributes, {
        spellCheck: !HAS_BEFORE_INPUT_SUPPORT ? void 0 : attributes.spellCheck,
        autoCorrect: !HAS_BEFORE_INPUT_SUPPORT ? void 0 : attributes.autoCorrect,
        autoCapitalize: !HAS_BEFORE_INPUT_SUPPORT ? void 0 : attributes.autoCapitalize,
        "data-slate-editor": true,
        "data-slate-node": "value",
        contentEditable: readOnly ? void 0 : true,
        suppressContentEditableWarning: true,
        ref,
        style: _objectSpread({
          outline: "none",
          whiteSpace: "pre-wrap",
          wordWrap: "break-word"
        }, style),
        onBeforeInput: React.useCallback(function(event) {
          if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && hasEditableTarget(editor, event.target)) {
            event.preventDefault();
            var text = event.data;
            slate.Editor.insertText(editor, text);
          }
        }, [readOnly]),
        onBlur: React.useCallback(function(event) {
          if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {
            return;
          }
          if (state.latestElement === window.document.activeElement) {
            return;
          }
          var relatedTarget = event.relatedTarget;
          var el = ReactEditor.toDOMNode(editor, editor);
          if (relatedTarget === el) {
            return;
          }
          if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute("data-slate-spacer")) {
            return;
          }
          if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {
            var node = ReactEditor.toSlateNode(editor, relatedTarget);
            if (slate.Element.isElement(node) && !editor.isVoid(node)) {
              return;
            }
          }
          IS_FOCUSED["delete"](editor);
        }, [readOnly, attributes.onBlur]),
        onClick: React.useCallback(function(event) {
          if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {
            var node = ReactEditor.toSlateNode(editor, event.target);
            var path = ReactEditor.findPath(editor, node);
            var _start = slate.Editor.start(editor, path);
            var end = slate.Editor.end(editor, path);
            var startVoid = slate.Editor["void"](editor, {
              at: _start
            });
            var endVoid = slate.Editor["void"](editor, {
              at: end
            });
            if (startVoid && endVoid && slate.Path.equals(startVoid[1], endVoid[1])) {
              var range = slate.Editor.range(editor, _start);
              slate.Transforms.select(editor, range);
            }
          }
        }, [readOnly, attributes.onClick]),
        onCompositionEnd: React.useCallback(function(event) {
          if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {
            state.isComposing = false;
            if (!IS_SAFARI && !IS_FIREFOX && event.data) {
              slate.Editor.insertText(editor, event.data);
            }
          }
        }, [attributes.onCompositionEnd]),
        onCompositionStart: React.useCallback(function(event) {
          if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {
            state.isComposing = true;
          }
        }, [attributes.onCompositionStart]),
        onCopy: React.useCallback(function(event) {
          if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {
            event.preventDefault();
            ReactEditor.setFragmentData(editor, event.clipboardData);
          }
        }, [attributes.onCopy]),
        onCut: React.useCallback(function(event) {
          if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {
            event.preventDefault();
            ReactEditor.setFragmentData(editor, event.clipboardData);
            var selection = editor.selection;
            if (selection && slate.Range.isExpanded(selection)) {
              slate.Editor.deleteFragment(editor);
            }
          }
        }, [readOnly, attributes.onCut]),
        onDragOver: React.useCallback(function(event) {
          if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {
            var node = ReactEditor.toSlateNode(editor, event.target);
            if (slate.Editor.isVoid(editor, node)) {
              event.preventDefault();
            }
          }
        }, [attributes.onDragOver]),
        onDragStart: React.useCallback(function(event) {
          if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {
            var node = ReactEditor.toSlateNode(editor, event.target);
            var path = ReactEditor.findPath(editor, node);
            var voidMatch = slate.Editor["void"](editor, {
              at: path
            });
            if (voidMatch) {
              var range = slate.Editor.range(editor, path);
              slate.Transforms.select(editor, range);
            }
            ReactEditor.setFragmentData(editor, event.dataTransfer);
          }
        }, [attributes.onDragStart]),
        onDrop: React.useCallback(function(event) {
          if (hasTarget(editor, event.target) && !readOnly && !isEventHandled(event, attributes.onDrop)) {
            if (!HAS_BEFORE_INPUT_SUPPORT || !IS_SAFARI && event.dataTransfer.files.length > 0) {
              event.preventDefault();
              var range = ReactEditor.findEventRange(editor, event);
              var data = event.dataTransfer;
              slate.Transforms.select(editor, range);
              ReactEditor.insertData(editor, data);
            }
          }
        }, [readOnly, attributes.onDrop]),
        onFocus: React.useCallback(function(event) {
          if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {
            var el = ReactEditor.toDOMNode(editor, editor);
            state.latestElement = window.document.activeElement;
            if (IS_FIREFOX && event.target !== el) {
              el.focus();
              return;
            }
            IS_FOCUSED.set(editor, true);
          }
        }, [readOnly, attributes.onFocus]),
        onKeyDown: React.useCallback(function(event) {
          if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onKeyDown)) {
            var nativeEvent = event.nativeEvent;
            var selection = editor.selection;
            if (Hotkeys.isRedo(nativeEvent)) {
              event.preventDefault();
              if (typeof editor.redo === "function") {
                editor.redo();
              }
              return;
            }
            if (Hotkeys.isUndo(nativeEvent)) {
              event.preventDefault();
              if (typeof editor.undo === "function") {
                editor.undo();
              }
              return;
            }
            if (Hotkeys.isMoveLineBackward(nativeEvent)) {
              event.preventDefault();
              slate.Transforms.move(editor, {
                unit: "line",
                reverse: true
              });
              return;
            }
            if (Hotkeys.isMoveLineForward(nativeEvent)) {
              event.preventDefault();
              slate.Transforms.move(editor, {
                unit: "line"
              });
              return;
            }
            if (Hotkeys.isExtendLineBackward(nativeEvent)) {
              event.preventDefault();
              slate.Transforms.move(editor, {
                unit: "line",
                edge: "focus",
                reverse: true
              });
              return;
            }
            if (Hotkeys.isExtendLineForward(nativeEvent)) {
              event.preventDefault();
              slate.Transforms.move(editor, {
                unit: "line",
                edge: "focus"
              });
              return;
            }
            if (Hotkeys.isMoveBackward(nativeEvent)) {
              event.preventDefault();
              if (selection && slate.Range.isCollapsed(selection)) {
                slate.Transforms.move(editor, {
                  reverse: true
                });
              } else {
                slate.Transforms.collapse(editor, {
                  edge: "start"
                });
              }
              return;
            }
            if (Hotkeys.isMoveForward(nativeEvent)) {
              event.preventDefault();
              if (selection && slate.Range.isCollapsed(selection)) {
                slate.Transforms.move(editor);
              } else {
                slate.Transforms.collapse(editor, {
                  edge: "end"
                });
              }
              return;
            }
            if (Hotkeys.isMoveWordBackward(nativeEvent)) {
              event.preventDefault();
              slate.Transforms.move(editor, {
                unit: "word",
                reverse: true
              });
              return;
            }
            if (Hotkeys.isMoveWordForward(nativeEvent)) {
              event.preventDefault();
              slate.Transforms.move(editor, {
                unit: "word"
              });
              return;
            }
            if (!HAS_BEFORE_INPUT_SUPPORT) {
              if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {
                event.preventDefault();
                return;
              }
              if (Hotkeys.isSplitBlock(nativeEvent)) {
                event.preventDefault();
                slate.Editor.insertBreak(editor);
                return;
              }
              if (Hotkeys.isDeleteBackward(nativeEvent)) {
                event.preventDefault();
                if (selection && slate.Range.isExpanded(selection)) {
                  slate.Editor.deleteFragment(editor);
                } else {
                  slate.Editor.deleteBackward(editor);
                }
                return;
              }
              if (Hotkeys.isDeleteForward(nativeEvent)) {
                event.preventDefault();
                if (selection && slate.Range.isExpanded(selection)) {
                  slate.Editor.deleteFragment(editor);
                } else {
                  slate.Editor.deleteForward(editor);
                }
                return;
              }
              if (Hotkeys.isDeleteLineBackward(nativeEvent)) {
                event.preventDefault();
                if (selection && slate.Range.isExpanded(selection)) {
                  slate.Editor.deleteFragment(editor);
                } else {
                  slate.Editor.deleteBackward(editor, {
                    unit: "line"
                  });
                }
                return;
              }
              if (Hotkeys.isDeleteLineForward(nativeEvent)) {
                event.preventDefault();
                if (selection && slate.Range.isExpanded(selection)) {
                  slate.Editor.deleteFragment(editor);
                } else {
                  slate.Editor.deleteForward(editor, {
                    unit: "line"
                  });
                }
                return;
              }
              if (Hotkeys.isDeleteWordBackward(nativeEvent)) {
                event.preventDefault();
                if (selection && slate.Range.isExpanded(selection)) {
                  slate.Editor.deleteFragment(editor);
                } else {
                  slate.Editor.deleteBackward(editor, {
                    unit: "word"
                  });
                }
                return;
              }
              if (Hotkeys.isDeleteWordForward(nativeEvent)) {
                event.preventDefault();
                if (selection && slate.Range.isExpanded(selection)) {
                  slate.Editor.deleteFragment(editor);
                } else {
                  slate.Editor.deleteForward(editor, {
                    unit: "word"
                  });
                }
                return;
              }
            }
          }
        }, [readOnly, attributes.onKeyDown]),
        onPaste: React.useCallback(function(event) {
          if (!isEventHandled(event, attributes.onPaste) && (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) && !readOnly && hasEditableTarget(editor, event.target)) {
            event.preventDefault();
            ReactEditor.insertData(editor, event.clipboardData);
          }
        }, [readOnly, attributes.onPaste])
      }), React__default.createElement(Children, {
        decorate,
        decorations,
        node: editor,
        renderElement,
        renderLeaf,
        selection: editor.selection
      })));
    };
    var defaultDecorate = function defaultDecorate2() {
      return [];
    };
    var hasTarget = function hasTarget2(editor, target) {
      return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);
    };
    var hasEditableTarget = function hasEditableTarget2(editor, target) {
      return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {
        editable: true
      });
    };
    var isTargetInsideVoid = function isTargetInsideVoid2(editor, target) {
      var slateNode = hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);
      return slate.Editor.isVoid(editor, slateNode);
    };
    var isEventHandled = function isEventHandled2(event, handler) {
      if (!handler) {
        return false;
      }
      handler(event);
      return event.isDefaultPrevented() || event.isPropagationStopped();
    };
    var isDOMEventHandled = function isDOMEventHandled2(event, handler) {
      if (!handler) {
        return false;
      }
      handler(event);
      return event.defaultPrevented;
    };
    exports.DefaultElement = DefaultElement;
    exports.DefaultLeaf = DefaultLeaf;
    exports.Editable = Editable;
    exports.ReactEditor = ReactEditor;
    exports.Slate = Slate;
    exports.useEditor = useEditor;
    exports.useFocused = useFocused;
    exports.useReadOnly = useReadOnly;
    exports.useSelected = useSelected;
    exports.useSlate = useSlate;
    exports.withReact = withReact;
  },

  3(require, exports, module) {
    // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    module.exports = _objectWithoutPropertiesLoose;
  },

  1(require, exports, module) {
    // node_modules/@babel/runtime/helpers/extends.js
    function _extends() {
      module.exports = _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    module.exports = _extends;
  },

  0(require, exports, module) {
    // node_modules/@babel/runtime/helpers/assertThisInitialized.js
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    module.exports = _assertThisInitialized;
  },

  2(require, exports, module) {
    // node_modules/@babel/runtime/helpers/inheritsLoose.js
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    module.exports = _inheritsLoose;
  },

  36(require, exports) {
    // node_modules/downshift/dist/downshift.cjs.js
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var _objectWithoutPropertiesLoose = _interopDefault(require(3 /* @babel/runtime/helpers/objectWithoutPropertiesLoose */));
    var _extends = _interopDefault(require(1 /* @babel/runtime/helpers/extends */));
    var _assertThisInitialized = _interopDefault(require(0 /* @babel/runtime/helpers/assertThisInitialized */));
    var _inheritsLoose = _interopDefault(require(2 /* @babel/runtime/helpers/inheritsLoose */));
    var PropTypes = _interopDefault(require(61 /* prop-types */));
    var react = require(73 /* react */);
    var reactIs = require(68 /* react-is */);
    var computeScrollIntoView = _interopDefault(require(34 /* compute-scroll-into-view */));
    var idCounter = 0;
    function cbToCb(cb) {
      return typeof cb === "function" ? cb : noop;
    }
    function noop() {
    }
    function scrollIntoView(node, menuNode) {
      if (!node) {
        return;
      }
      var actions = computeScrollIntoView(node, {
        boundary: menuNode,
        block: "nearest",
        scrollMode: "if-needed"
      });
      actions.forEach(function(_ref) {
        var el = _ref.el, top = _ref.top, left = _ref.left;
        el.scrollTop = top;
        el.scrollLeft = left;
      });
    }
    function isOrContainsNode(parent, child) {
      return parent === child || parent.contains && parent.contains(child);
    }
    function debounce(fn, time) {
      var timeoutId;
      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      }
      function wrapper() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        cancel();
        timeoutId = setTimeout(function() {
          timeoutId = null;
          fn.apply(void 0, args);
        }, time);
      }
      wrapper.cancel = cancel;
      return wrapper;
    }
    function callAllEventHandlers() {
      for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        fns[_key2] = arguments[_key2];
      }
      return function(event) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        return fns.some(function(fn) {
          if (fn) {
            fn.apply(void 0, [event].concat(args));
          }
          return event.preventDownshiftDefault || event.hasOwnProperty("nativeEvent") && event.nativeEvent.preventDownshiftDefault;
        });
      };
    }
    function handleRefs() {
      for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        refs[_key4] = arguments[_key4];
      }
      return function(node) {
        refs.forEach(function(ref) {
          if (typeof ref === "function") {
            ref(node);
          } else if (ref) {
            ref.current = node;
          }
        });
      };
    }
    function generateId() {
      return String(idCounter++);
    }
    function resetIdCounter() {
      idCounter = 0;
    }
    function getA11yStatusMessage(_ref2) {
      var isOpen = _ref2.isOpen, resultCount = _ref2.resultCount, previousResultCount = _ref2.previousResultCount;
      if (!isOpen) {
        return "";
      }
      if (!resultCount) {
        return "No results are available.";
      }
      if (resultCount !== previousResultCount) {
        return resultCount + " result" + (resultCount === 1 ? " is" : "s are") + " available, use up and down arrow keys to navigate. Press Enter key to select.";
      }
      return "";
    }
    function unwrapArray(arg, defaultValue) {
      arg = Array.isArray(arg) ? arg[0] : arg;
      if (!arg && defaultValue) {
        return defaultValue;
      } else {
        return arg;
      }
    }
    function isDOMElement(element) {
      return typeof element.type === "string";
    }
    function getElementProps(element) {
      return element.props;
    }
    function requiredProp(fnName, propName) {
      console.error('The property "' + propName + '" is required in "' + fnName + '"');
    }
    var stateKeys = ["highlightedIndex", "inputValue", "isOpen", "selectedItem", "type"];
    function pickState(state) {
      if (state === void 0) {
        state = {};
      }
      var result = {};
      stateKeys.forEach(function(k) {
        if (state.hasOwnProperty(k)) {
          result[k] = state[k];
        }
      });
      return result;
    }
    function getState(state, props) {
      return Object.keys(state).reduce(function(prevState, key) {
        prevState[key] = isControlledProp(props, key) ? props[key] : state[key];
        return prevState;
      }, {});
    }
    function isControlledProp(props, key) {
      return props[key] !== void 0;
    }
    function normalizeArrowKey(event) {
      var key = event.key, keyCode = event.keyCode;
      if (keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0) {
        return "Arrow" + key;
      }
      return key;
    }
    function isPlainObject(obj) {
      return Object.prototype.toString.call(obj) === "[object Object]";
    }
    function getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
      if (circular === void 0) {
        circular = true;
      }
      if (itemCount === 0) {
        return -1;
      }
      var itemsLastIndex = itemCount - 1;
      if (typeof baseIndex !== "number" || baseIndex < 0 || baseIndex >= itemCount) {
        baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;
      }
      var newIndex = baseIndex + moveAmount;
      if (newIndex < 0) {
        newIndex = circular ? itemsLastIndex : 0;
      } else if (newIndex > itemsLastIndex) {
        newIndex = circular ? 0 : itemsLastIndex;
      }
      var nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);
      if (nonDisabledNewIndex === -1) {
        return baseIndex >= itemCount ? -1 : baseIndex;
      }
      return nonDisabledNewIndex;
    }
    function getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
      var currentElementNode = getItemNodeFromIndex(baseIndex);
      if (!currentElementNode || !currentElementNode.hasAttribute("disabled")) {
        return baseIndex;
      }
      if (moveAmount > 0) {
        for (var index = baseIndex + 1; index < itemCount; index++) {
          if (!getItemNodeFromIndex(index).hasAttribute("disabled")) {
            return index;
          }
        }
      } else {
        for (var _index = baseIndex - 1; _index >= 0; _index--) {
          if (!getItemNodeFromIndex(_index).hasAttribute("disabled")) {
            return _index;
          }
        }
      }
      if (circular) {
        return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);
      }
      return -1;
    }
    function targetWithinDownshift(target, downshiftElements, document2, checkActiveElement) {
      if (checkActiveElement === void 0) {
        checkActiveElement = true;
      }
      return downshiftElements.some(function(contextNode) {
        return contextNode && (isOrContainsNode(contextNode, target) || checkActiveElement && isOrContainsNode(contextNode, document2.activeElement));
      });
    }
    function validateControlledUnchanged(state, prevProps, nextProps) {
      if (false) {
        return;
      }
      var warningDescription = "This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props";
      Object.keys(state).forEach(function(propKey) {
        if (prevProps[propKey] !== void 0 && nextProps[propKey] === void 0) {
          console.error('downshift: A component has changed the controlled prop "' + propKey + '" to be uncontrolled. ' + warningDescription);
        } else if (prevProps[propKey] === void 0 && nextProps[propKey] !== void 0) {
          console.error('downshift: A component has changed the uncontrolled prop "' + propKey + '" to be controlled. ' + warningDescription);
        }
      });
    }
    var cleanupStatus = debounce(function() {
      getStatusDiv().textContent = "";
    }, 500);
    function setStatus(status, documentProp) {
      var div = getStatusDiv(documentProp);
      if (!status) {
        return;
      }
      div.textContent = status;
      cleanupStatus();
    }
    function getStatusDiv(documentProp) {
      if (documentProp === void 0) {
        documentProp = document;
      }
      var statusDiv = documentProp.getElementById("a11y-status-message");
      if (statusDiv) {
        return statusDiv;
      }
      statusDiv = documentProp.createElement("div");
      statusDiv.setAttribute("id", "a11y-status-message");
      statusDiv.setAttribute("role", "status");
      statusDiv.setAttribute("aria-live", "polite");
      statusDiv.setAttribute("aria-relevant", "additions text");
      Object.assign(statusDiv.style, {
        border: "0",
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: "0",
        position: "absolute",
        width: "1px"
      });
      documentProp.body.appendChild(statusDiv);
      return statusDiv;
    }
    var unknown = "__autocomplete_unknown__";
    var mouseUp = "__autocomplete_mouseup__";
    var itemMouseEnter = "__autocomplete_item_mouseenter__";
    var keyDownArrowUp = "__autocomplete_keydown_arrow_up__";
    var keyDownArrowDown = "__autocomplete_keydown_arrow_down__";
    var keyDownEscape = "__autocomplete_keydown_escape__";
    var keyDownEnter = "__autocomplete_keydown_enter__";
    var keyDownHome = "__autocomplete_keydown_home__";
    var keyDownEnd = "__autocomplete_keydown_end__";
    var clickItem = "__autocomplete_click_item__";
    var blurInput = "__autocomplete_blur_input__";
    var changeInput = "__autocomplete_change_input__";
    var keyDownSpaceButton = "__autocomplete_keydown_space_button__";
    var clickButton = "__autocomplete_click_button__";
    var blurButton = "__autocomplete_blur_button__";
    var controlledPropUpdatedSelectedItem = "__autocomplete_controlled_prop_updated_selected_item__";
    var touchEnd = "__autocomplete_touchend__";
    var stateChangeTypes = Object.freeze({
      __proto__: null,
      unknown,
      mouseUp,
      itemMouseEnter,
      keyDownArrowUp,
      keyDownArrowDown,
      keyDownEscape,
      keyDownEnter,
      keyDownHome,
      keyDownEnd,
      clickItem,
      blurInput,
      changeInput,
      keyDownSpaceButton,
      clickButton,
      blurButton,
      controlledPropUpdatedSelectedItem,
      touchEnd
    });
    var Downshift = function() {
      var Downshift2 = function(_Component) {
        _inheritsLoose(Downshift3, _Component);
        function Downshift3(_props) {
          var _this = _Component.call(this, _props) || this;
          _this.id = _this.props.id || "downshift-" + generateId();
          _this.menuId = _this.props.menuId || _this.id + "-menu";
          _this.labelId = _this.props.labelId || _this.id + "-label";
          _this.inputId = _this.props.inputId || _this.id + "-input";
          _this.getItemId = _this.props.getItemId || function(index) {
            return _this.id + "-item-" + index;
          };
          _this.input = null;
          _this.items = [];
          _this.itemCount = null;
          _this.previousResultCount = 0;
          _this.timeoutIds = [];
          _this.internalSetTimeout = function(fn, time) {
            var id = setTimeout(function() {
              _this.timeoutIds = _this.timeoutIds.filter(function(i) {
                return i !== id;
              });
              fn();
            }, time);
            _this.timeoutIds.push(id);
          };
          _this.setItemCount = function(count) {
            _this.itemCount = count;
          };
          _this.unsetItemCount = function() {
            _this.itemCount = null;
          };
          _this.setHighlightedIndex = function(highlightedIndex, otherStateToSet) {
            if (highlightedIndex === void 0) {
              highlightedIndex = _this.props.defaultHighlightedIndex;
            }
            if (otherStateToSet === void 0) {
              otherStateToSet = {};
            }
            otherStateToSet = pickState(otherStateToSet);
            _this.internalSetState(_extends({
              highlightedIndex
            }, otherStateToSet));
          };
          _this.clearSelection = function(cb) {
            _this.internalSetState({
              selectedItem: null,
              inputValue: "",
              highlightedIndex: _this.props.defaultHighlightedIndex,
              isOpen: _this.props.defaultIsOpen
            }, cb);
          };
          _this.selectItem = function(item, otherStateToSet, cb) {
            otherStateToSet = pickState(otherStateToSet);
            _this.internalSetState(_extends({
              isOpen: _this.props.defaultIsOpen,
              highlightedIndex: _this.props.defaultHighlightedIndex,
              selectedItem: item,
              inputValue: _this.props.itemToString(item)
            }, otherStateToSet), cb);
          };
          _this.selectItemAtIndex = function(itemIndex, otherStateToSet, cb) {
            var item = _this.items[itemIndex];
            if (item == null) {
              return;
            }
            _this.selectItem(item, otherStateToSet, cb);
          };
          _this.selectHighlightedItem = function(otherStateToSet, cb) {
            return _this.selectItemAtIndex(_this.getState().highlightedIndex, otherStateToSet, cb);
          };
          _this.internalSetState = function(stateToSet, cb) {
            var isItemSelected, onChangeArg;
            var onStateChangeArg = {};
            var isStateToSetFunction = typeof stateToSet === "function";
            if (!isStateToSetFunction && stateToSet.hasOwnProperty("inputValue")) {
              _this.props.onInputValueChange(stateToSet.inputValue, _extends(_extends({}, _this.getStateAndHelpers()), stateToSet));
            }
            return _this.setState(function(state) {
              state = _this.getState(state);
              var newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;
              newStateToSet = _this.props.stateReducer(state, newStateToSet);
              isItemSelected = newStateToSet.hasOwnProperty("selectedItem");
              var nextState = {};
              var nextFullState = {};
              if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {
                onChangeArg = newStateToSet.selectedItem;
              }
              newStateToSet.type = newStateToSet.type || unknown;
              Object.keys(newStateToSet).forEach(function(key) {
                if (state[key] !== newStateToSet[key]) {
                  onStateChangeArg[key] = newStateToSet[key];
                }
                if (key === "type") {
                  return;
                }
                nextFullState[key] = newStateToSet[key];
                if (!isControlledProp(_this.props, key)) {
                  nextState[key] = newStateToSet[key];
                }
              });
              if (isStateToSetFunction && newStateToSet.hasOwnProperty("inputValue")) {
                _this.props.onInputValueChange(newStateToSet.inputValue, _extends(_extends({}, _this.getStateAndHelpers()), newStateToSet));
              }
              return nextState;
            }, function() {
              cbToCb(cb)();
              var hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;
              if (hasMoreStateThanType) {
                _this.props.onStateChange(onStateChangeArg, _this.getStateAndHelpers());
              }
              if (isItemSelected) {
                _this.props.onSelect(stateToSet.selectedItem, _this.getStateAndHelpers());
              }
              if (onChangeArg !== void 0) {
                _this.props.onChange(onChangeArg, _this.getStateAndHelpers());
              }
              _this.props.onUserAction(onStateChangeArg, _this.getStateAndHelpers());
            });
          };
          _this.rootRef = function(node) {
            return _this._rootNode = node;
          };
          _this.getRootProps = function(_temp, _temp2) {
            var _extends2;
            var _ref = _temp === void 0 ? {} : _temp, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? "ref" : _ref$refKey, ref = _ref.ref, rest = _objectWithoutPropertiesLoose(_ref, ["refKey", "ref"]);
            var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
            _this.getRootProps.called = true;
            _this.getRootProps.refKey = refKey;
            _this.getRootProps.suppressRefError = suppressRefError;
            var _this$getState = _this.getState(), isOpen = _this$getState.isOpen;
            return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, _this.rootRef), _extends2.role = "combobox", _extends2["aria-expanded"] = isOpen, _extends2["aria-haspopup"] = "listbox", _extends2["aria-owns"] = isOpen ? _this.menuId : null, _extends2["aria-labelledby"] = _this.labelId, _extends2), rest);
          };
          _this.keyDownHandlers = {
            ArrowDown: function ArrowDown(event) {
              var _this2 = this;
              event.preventDefault();
              if (this.getState().isOpen) {
                var amount = event.shiftKey ? 5 : 1;
                this.moveHighlightedIndex(amount, {
                  type: keyDownArrowDown
                });
              } else {
                this.internalSetState({
                  isOpen: true,
                  type: keyDownArrowDown
                }, function() {
                  var itemCount = _this2.getItemCount();
                  if (itemCount > 0) {
                    var _this2$getState = _this2.getState(), highlightedIndex = _this2$getState.highlightedIndex;
                    var nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, function(index) {
                      return _this2.getItemNodeFromIndex(index);
                    });
                    _this2.setHighlightedIndex(nextHighlightedIndex, {
                      type: keyDownArrowDown
                    });
                  }
                });
              }
            },
            ArrowUp: function ArrowUp(event) {
              var _this3 = this;
              event.preventDefault();
              if (this.getState().isOpen) {
                var amount = event.shiftKey ? -5 : -1;
                this.moveHighlightedIndex(amount, {
                  type: keyDownArrowUp
                });
              } else {
                this.internalSetState({
                  isOpen: true,
                  type: keyDownArrowUp
                }, function() {
                  var itemCount = _this3.getItemCount();
                  if (itemCount > 0) {
                    var _this3$getState = _this3.getState(), highlightedIndex = _this3$getState.highlightedIndex;
                    var nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, function(index) {
                      return _this3.getItemNodeFromIndex(index);
                    });
                    _this3.setHighlightedIndex(nextHighlightedIndex, {
                      type: keyDownArrowUp
                    });
                  }
                });
              }
            },
            Enter: function Enter(event) {
              if (event.which === 229) {
                return;
              }
              var _this$getState2 = this.getState(), isOpen = _this$getState2.isOpen, highlightedIndex = _this$getState2.highlightedIndex;
              if (isOpen && highlightedIndex != null) {
                event.preventDefault();
                var item = this.items[highlightedIndex];
                var itemNode = this.getItemNodeFromIndex(highlightedIndex);
                if (item == null || itemNode && itemNode.hasAttribute("disabled")) {
                  return;
                }
                this.selectHighlightedItem({
                  type: keyDownEnter
                });
              }
            },
            Escape: function Escape(event) {
              event.preventDefault();
              this.reset({
                type: keyDownEscape,
                selectedItem: null,
                inputValue: ""
              });
            }
          };
          _this.buttonKeyDownHandlers = _extends(_extends({}, _this.keyDownHandlers), {}, {
            " ": function _(event) {
              event.preventDefault();
              this.toggleMenu({
                type: keyDownSpaceButton
              });
            }
          });
          _this.inputKeyDownHandlers = _extends(_extends({}, _this.keyDownHandlers), {}, {
            Home: function Home(event) {
              var _this4 = this;
              event.preventDefault();
              var itemCount = this.getItemCount();
              var _this$getState3 = this.getState(), isOpen = _this$getState3.isOpen;
              if (itemCount <= 0 || !isOpen) {
                return;
              }
              var newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, function(index) {
                return _this4.getItemNodeFromIndex(index);
              }, false);
              this.setHighlightedIndex(newHighlightedIndex, {
                type: keyDownHome
              });
            },
            End: function End(event) {
              var _this5 = this;
              event.preventDefault();
              var itemCount = this.getItemCount();
              var _this$getState4 = this.getState(), isOpen = _this$getState4.isOpen;
              if (itemCount <= 0 || !isOpen) {
                return;
              }
              var newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, function(index) {
                return _this5.getItemNodeFromIndex(index);
              }, false);
              this.setHighlightedIndex(newHighlightedIndex, {
                type: keyDownEnd
              });
            }
          });
          _this.getToggleButtonProps = function(_temp3) {
            var _ref3 = _temp3 === void 0 ? {} : _temp3, onClick = _ref3.onClick, onPress = _ref3.onPress, onKeyDown = _ref3.onKeyDown, onKeyUp = _ref3.onKeyUp, onBlur = _ref3.onBlur, rest = _objectWithoutPropertiesLoose(_ref3, ["onClick", "onPress", "onKeyDown", "onKeyUp", "onBlur"]);
            var _this$getState5 = _this.getState(), isOpen = _this$getState5.isOpen;
            var enabledEventHandlers = {
              onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),
              onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),
              onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),
              onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)
            };
            var eventHandlers = rest.disabled ? {} : enabledEventHandlers;
            return _extends(_extends({
              type: "button",
              role: "button",
              "aria-label": isOpen ? "close menu" : "open menu",
              "aria-haspopup": true,
              "data-toggle": true
            }, eventHandlers), rest);
          };
          _this.buttonHandleKeyUp = function(event) {
            event.preventDefault();
          };
          _this.buttonHandleKeyDown = function(event) {
            var key = normalizeArrowKey(event);
            if (_this.buttonKeyDownHandlers[key]) {
              _this.buttonKeyDownHandlers[key].call(_assertThisInitialized(_this), event);
            }
          };
          _this.buttonHandleClick = function(event) {
            event.preventDefault();
            if (_this.props.environment.document.activeElement === _this.props.environment.document.body) {
              event.target.focus();
            }
            if (false) {
              _this.toggleMenu({
                type: clickButton
              });
            } else {
              _this.internalSetTimeout(function() {
                return _this.toggleMenu({
                  type: clickButton
                });
              });
            }
          };
          _this.buttonHandleBlur = function(event) {
            var blurTarget = event.target;
            _this.internalSetTimeout(function() {
              if (!_this.isMouseDown && (_this.props.environment.document.activeElement == null || _this.props.environment.document.activeElement.id !== _this.inputId) && _this.props.environment.document.activeElement !== blurTarget) {
                _this.reset({
                  type: blurButton
                });
              }
            });
          };
          _this.getLabelProps = function(props) {
            return _extends({
              htmlFor: _this.inputId,
              id: _this.labelId
            }, props);
          };
          _this.getInputProps = function(_temp4) {
            var _ref4 = _temp4 === void 0 ? {} : _temp4, onKeyDown = _ref4.onKeyDown, onBlur = _ref4.onBlur, onChange = _ref4.onChange, onInput = _ref4.onInput, onChangeText = _ref4.onChangeText, rest = _objectWithoutPropertiesLoose(_ref4, ["onKeyDown", "onBlur", "onChange", "onInput", "onChangeText"]);
            var onChangeKey;
            var eventHandlers = {};
            onChangeKey = "onChange";
            var _this$getState6 = _this.getState(), inputValue = _this$getState6.inputValue, isOpen = _this$getState6.isOpen, highlightedIndex = _this$getState6.highlightedIndex;
            if (!rest.disabled) {
              var _eventHandlers;
              eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, _this.inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, _this.inputHandleBlur), _eventHandlers);
            }
            return _extends(_extends({
              "aria-autocomplete": "list",
              "aria-activedescendant": isOpen && typeof highlightedIndex === "number" && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,
              "aria-controls": isOpen ? _this.menuId : null,
              "aria-labelledby": _this.labelId,
              autoComplete: "off",
              value: inputValue,
              id: _this.inputId
            }, eventHandlers), rest);
          };
          _this.inputHandleKeyDown = function(event) {
            var key = normalizeArrowKey(event);
            if (key && _this.inputKeyDownHandlers[key]) {
              _this.inputKeyDownHandlers[key].call(_assertThisInitialized(_this), event);
            }
          };
          _this.inputHandleChange = function(event) {
            _this.internalSetState({
              type: changeInput,
              isOpen: true,
              inputValue: event.target.value,
              highlightedIndex: _this.props.defaultHighlightedIndex
            });
          };
          _this.inputHandleBlur = function() {
            _this.internalSetTimeout(function() {
              var downshiftButtonIsActive = _this.props.environment.document && !!_this.props.environment.document.activeElement && !!_this.props.environment.document.activeElement.dataset && _this.props.environment.document.activeElement.dataset.toggle && _this._rootNode && _this._rootNode.contains(_this.props.environment.document.activeElement);
              if (!_this.isMouseDown && !downshiftButtonIsActive) {
                _this.reset({
                  type: blurInput
                });
              }
            });
          };
          _this.menuRef = function(node) {
            _this._menuNode = node;
          };
          _this.getMenuProps = function(_temp5, _temp6) {
            var _extends3;
            var _ref5 = _temp5 === void 0 ? {} : _temp5, _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? "ref" : _ref5$refKey, ref = _ref5.ref, props = _objectWithoutPropertiesLoose(_ref5, ["refKey", "ref"]);
            var _ref6 = _temp6 === void 0 ? {} : _temp6, _ref6$suppressRefErro = _ref6.suppressRefError, suppressRefError = _ref6$suppressRefErro === void 0 ? false : _ref6$suppressRefErro;
            _this.getMenuProps.called = true;
            _this.getMenuProps.refKey = refKey;
            _this.getMenuProps.suppressRefError = suppressRefError;
            return _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, _this.menuRef), _extends3.role = "listbox", _extends3["aria-labelledby"] = props && props["aria-label"] ? null : _this.labelId, _extends3.id = _this.menuId, _extends3), props);
          };
          _this.getItemProps = function(_temp7) {
            var _enabledEventHandlers;
            var _ref7 = _temp7 === void 0 ? {} : _temp7, onMouseMove = _ref7.onMouseMove, onMouseDown = _ref7.onMouseDown, onClick = _ref7.onClick, onPress = _ref7.onPress, index = _ref7.index, _ref7$item = _ref7.item, item = _ref7$item === void 0 ? requiredProp("getItemProps", "item") : _ref7$item, rest = _objectWithoutPropertiesLoose(_ref7, ["onMouseMove", "onMouseDown", "onClick", "onPress", "index", "item"]);
            if (index === void 0) {
              _this.items.push(item);
              index = _this.items.indexOf(item);
            } else {
              _this.items[index] = item;
            }
            var onSelectKey = "onClick";
            var customClickHandler = onClick;
            var enabledEventHandlers = (_enabledEventHandlers = {
              onMouseMove: callAllEventHandlers(onMouseMove, function() {
                if (index === _this.getState().highlightedIndex) {
                  return;
                }
                _this.setHighlightedIndex(index, {
                  type: itemMouseEnter
                });
                _this.avoidScrolling = true;
                _this.internalSetTimeout(function() {
                  return _this.avoidScrolling = false;
                }, 250);
              }),
              onMouseDown: callAllEventHandlers(onMouseDown, function(event) {
                event.preventDefault();
              })
            }, _enabledEventHandlers[onSelectKey] = callAllEventHandlers(customClickHandler, function() {
              _this.selectItemAtIndex(index, {
                type: clickItem
              });
            }), _enabledEventHandlers);
            var eventHandlers = rest.disabled ? {
              onMouseDown: enabledEventHandlers.onMouseDown
            } : enabledEventHandlers;
            return _extends(_extends({
              id: _this.getItemId(index),
              role: "option",
              "aria-selected": _this.getState().highlightedIndex === index
            }, eventHandlers), rest);
          };
          _this.clearItems = function() {
            _this.items = [];
          };
          _this.reset = function(otherStateToSet, cb) {
            if (otherStateToSet === void 0) {
              otherStateToSet = {};
            }
            otherStateToSet = pickState(otherStateToSet);
            _this.internalSetState(function(_ref8) {
              var selectedItem = _ref8.selectedItem;
              return _extends({
                isOpen: _this.props.defaultIsOpen,
                highlightedIndex: _this.props.defaultHighlightedIndex,
                inputValue: _this.props.itemToString(selectedItem)
              }, otherStateToSet);
            }, cb);
          };
          _this.toggleMenu = function(otherStateToSet, cb) {
            if (otherStateToSet === void 0) {
              otherStateToSet = {};
            }
            otherStateToSet = pickState(otherStateToSet);
            _this.internalSetState(function(_ref9) {
              var isOpen = _ref9.isOpen;
              return _extends(_extends({
                isOpen: !isOpen
              }, isOpen && {
                highlightedIndex: _this.props.defaultHighlightedIndex
              }), otherStateToSet);
            }, function() {
              var _this$getState7 = _this.getState(), isOpen = _this$getState7.isOpen, highlightedIndex = _this$getState7.highlightedIndex;
              if (isOpen) {
                if (_this.getItemCount() > 0 && typeof highlightedIndex === "number") {
                  _this.setHighlightedIndex(highlightedIndex, otherStateToSet);
                }
              }
              cbToCb(cb)();
            });
          };
          _this.openMenu = function(cb) {
            _this.internalSetState({
              isOpen: true
            }, cb);
          };
          _this.closeMenu = function(cb) {
            _this.internalSetState({
              isOpen: false
            }, cb);
          };
          _this.updateStatus = debounce(function() {
            var state = _this.getState();
            var item = _this.items[state.highlightedIndex];
            var resultCount = _this.getItemCount();
            var status = _this.props.getA11yStatusMessage(_extends({
              itemToString: _this.props.itemToString,
              previousResultCount: _this.previousResultCount,
              resultCount,
              highlightedItem: item
            }, state));
            _this.previousResultCount = resultCount;
            setStatus(status, _this.props.environment.document);
          }, 200);
          var _this$props = _this.props, defaultHighlightedIndex = _this$props.defaultHighlightedIndex, _this$props$initialHi = _this$props.initialHighlightedIndex, _highlightedIndex = _this$props$initialHi === void 0 ? defaultHighlightedIndex : _this$props$initialHi, defaultIsOpen = _this$props.defaultIsOpen, _this$props$initialIs = _this$props.initialIsOpen, _isOpen = _this$props$initialIs === void 0 ? defaultIsOpen : _this$props$initialIs, _this$props$initialIn = _this$props.initialInputValue, _inputValue = _this$props$initialIn === void 0 ? "" : _this$props$initialIn, _this$props$initialSe = _this$props.initialSelectedItem, _selectedItem = _this$props$initialSe === void 0 ? null : _this$props$initialSe;
          var _state = _this.getState({
            highlightedIndex: _highlightedIndex,
            isOpen: _isOpen,
            inputValue: _inputValue,
            selectedItem: _selectedItem
          });
          if (_state.selectedItem != null && _this.props.initialInputValue === void 0) {
            _state.inputValue = _this.props.itemToString(_state.selectedItem);
          }
          _this.state = _state;
          return _this;
        }
        var _proto = Downshift3.prototype;
        _proto.internalClearTimeouts = function internalClearTimeouts() {
          this.timeoutIds.forEach(function(id) {
            clearTimeout(id);
          });
          this.timeoutIds = [];
        };
        _proto.getState = function getState$1(stateToMerge) {
          if (stateToMerge === void 0) {
            stateToMerge = this.state;
          }
          return getState(stateToMerge, this.props);
        };
        _proto.getItemCount = function getItemCount() {
          var itemCount = this.items.length;
          if (this.itemCount != null) {
            itemCount = this.itemCount;
          } else if (this.props.itemCount !== void 0) {
            itemCount = this.props.itemCount;
          }
          return itemCount;
        };
        _proto.getItemNodeFromIndex = function getItemNodeFromIndex(index) {
          return this.props.environment.document.getElementById(this.getItemId(index));
        };
        _proto.scrollHighlightedItemIntoView = function scrollHighlightedItemIntoView() {
          {
            var node = this.getItemNodeFromIndex(this.getState().highlightedIndex);
            this.props.scrollIntoView(node, this._menuNode);
          }
        };
        _proto.moveHighlightedIndex = function moveHighlightedIndex(amount, otherStateToSet) {
          var _this6 = this;
          var itemCount = this.getItemCount();
          var _this$getState8 = this.getState(), highlightedIndex = _this$getState8.highlightedIndex;
          if (itemCount > 0) {
            var nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, function(index) {
              return _this6.getItemNodeFromIndex(index);
            });
            this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);
          }
        };
        _proto.getStateAndHelpers = function getStateAndHelpers() {
          var _this$getState9 = this.getState(), highlightedIndex = _this$getState9.highlightedIndex, inputValue = _this$getState9.inputValue, selectedItem = _this$getState9.selectedItem, isOpen = _this$getState9.isOpen;
          var itemToString2 = this.props.itemToString;
          var id = this.id;
          var getRootProps = this.getRootProps, getToggleButtonProps = this.getToggleButtonProps, getLabelProps = this.getLabelProps, getMenuProps = this.getMenuProps, getInputProps = this.getInputProps, getItemProps = this.getItemProps, openMenu = this.openMenu, closeMenu = this.closeMenu, toggleMenu = this.toggleMenu, selectItem = this.selectItem, selectItemAtIndex = this.selectItemAtIndex, selectHighlightedItem = this.selectHighlightedItem, setHighlightedIndex = this.setHighlightedIndex, clearSelection = this.clearSelection, clearItems = this.clearItems, reset = this.reset, setItemCount = this.setItemCount, unsetItemCount = this.unsetItemCount, setState = this.internalSetState;
          return {
            getRootProps,
            getToggleButtonProps,
            getLabelProps,
            getMenuProps,
            getInputProps,
            getItemProps,
            reset,
            openMenu,
            closeMenu,
            toggleMenu,
            selectItem,
            selectItemAtIndex,
            selectHighlightedItem,
            setHighlightedIndex,
            clearSelection,
            clearItems,
            setItemCount,
            unsetItemCount,
            setState,
            itemToString: itemToString2,
            id,
            highlightedIndex,
            inputValue,
            isOpen,
            selectedItem
          };
        };
        _proto.componentDidMount = function componentDidMount() {
          var _this7 = this;
          if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
            validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
          }
          {
            var onMouseDown = function() {
              _this7.isMouseDown = true;
            };
            var onMouseUp = function(event) {
              _this7.isMouseDown = false;
              var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment.document);
              if (!contextWithinDownshift && _this7.getState().isOpen) {
                _this7.reset({
                  type: mouseUp
                }, function() {
                  return _this7.props.onOuterClick(_this7.getStateAndHelpers());
                });
              }
            };
            var onTouchStart = function() {
              _this7.isTouchMove = false;
            };
            var onTouchMove = function() {
              _this7.isTouchMove = true;
            };
            var onTouchEnd = function(event) {
              var contextWithinDownshift = targetWithinDownshift(event.target, [_this7._rootNode, _this7._menuNode], _this7.props.environment.document, false);
              if (!_this7.isTouchMove && !contextWithinDownshift && _this7.getState().isOpen) {
                _this7.reset({
                  type: touchEnd
                }, function() {
                  return _this7.props.onOuterClick(_this7.getStateAndHelpers());
                });
              }
            };
            var environment = this.props.environment;
            environment.addEventListener("mousedown", onMouseDown);
            environment.addEventListener("mouseup", onMouseUp);
            environment.addEventListener("touchstart", onTouchStart);
            environment.addEventListener("touchmove", onTouchMove);
            environment.addEventListener("touchend", onTouchEnd);
            this.cleanup = function() {
              _this7.internalClearTimeouts();
              _this7.updateStatus.cancel();
              environment.removeEventListener("mousedown", onMouseDown);
              environment.removeEventListener("mouseup", onMouseUp);
              environment.removeEventListener("touchstart", onTouchStart);
              environment.removeEventListener("touchmove", onTouchMove);
              environment.removeEventListener("touchend", onTouchEnd);
            };
          }
        };
        _proto.shouldScroll = function shouldScroll(prevState, prevProps) {
          var _ref10 = this.props.highlightedIndex === void 0 ? this.getState() : this.props, currentHighlightedIndex = _ref10.highlightedIndex;
          var _ref11 = prevProps.highlightedIndex === void 0 ? prevState : prevProps, prevHighlightedIndex = _ref11.highlightedIndex;
          var scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;
          return scrollWhenOpen || currentHighlightedIndex !== prevHighlightedIndex;
        };
        _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
          if (true) {
            validateControlledUnchanged(this.state, prevProps, this.props);
            if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
              validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
            }
          }
          if (isControlledProp(this.props, "selectedItem") && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {
            this.internalSetState({
              type: controlledPropUpdatedSelectedItem,
              inputValue: this.props.itemToString(this.props.selectedItem)
            });
          }
          if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {
            this.scrollHighlightedItemIntoView();
          }
          this.updateStatus();
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
          this.cleanup();
        };
        _proto.render = function render() {
          var children = unwrapArray(this.props.children, noop);
          this.clearItems();
          this.getRootProps.called = false;
          this.getRootProps.refKey = void 0;
          this.getRootProps.suppressRefError = void 0;
          this.getMenuProps.called = false;
          this.getMenuProps.refKey = void 0;
          this.getMenuProps.suppressRefError = void 0;
          this.getLabelProps.called = false;
          this.getInputProps.called = false;
          var element = unwrapArray(children(this.getStateAndHelpers()));
          if (!element) {
            return null;
          }
          if (this.getRootProps.called || this.props.suppressRefError) {
            if (!this.getRootProps.suppressRefError && !this.props.suppressRefError) {
              validateGetRootPropsCalledCorrectly(element, this.getRootProps);
            }
            return element;
          } else if (isDOMElement(element)) {
            return react.cloneElement(element, this.getRootProps(getElementProps(element)));
          }
          if (true) {
            throw new Error("downshift: If you return a non-DOM element, you must apply the getRootProps function");
          }
          return void 0;
        };
        return Downshift3;
      }(react.Component);
      Downshift2.defaultProps = {
        defaultHighlightedIndex: null,
        defaultIsOpen: false,
        getA11yStatusMessage,
        itemToString: function itemToString2(i) {
          if (i == null) {
            return "";
          }
          if (isPlainObject(i) && !i.hasOwnProperty("toString")) {
            console.warn("downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.", "The object that was passed:", i);
          }
          return String(i);
        },
        onStateChange: noop,
        onInputValueChange: noop,
        onUserAction: noop,
        onChange: noop,
        onSelect: noop,
        onOuterClick: noop,
        selectedItemChanged: function selectedItemChanged(prevItem, item) {
          return prevItem !== item;
        },
        environment: typeof window === "undefined" ? {} : window,
        stateReducer: function stateReducer2(state, stateToSet) {
          return stateToSet;
        },
        suppressRefError: false,
        scrollIntoView
      };
      Downshift2.stateChangeTypes = stateChangeTypes;
      return Downshift2;
    }();
    Downshift.propTypes = {
      children: PropTypes.func,
      defaultHighlightedIndex: PropTypes.number,
      defaultIsOpen: PropTypes.bool,
      initialHighlightedIndex: PropTypes.number,
      initialSelectedItem: PropTypes.any,
      initialInputValue: PropTypes.string,
      initialIsOpen: PropTypes.bool,
      getA11yStatusMessage: PropTypes.func,
      itemToString: PropTypes.func,
      onChange: PropTypes.func,
      onSelect: PropTypes.func,
      onStateChange: PropTypes.func,
      onInputValueChange: PropTypes.func,
      onUserAction: PropTypes.func,
      onOuterClick: PropTypes.func,
      selectedItemChanged: PropTypes.func,
      stateReducer: PropTypes.func,
      itemCount: PropTypes.number,
      id: PropTypes.string,
      environment: PropTypes.shape({
        addEventListener: PropTypes.func,
        removeEventListener: PropTypes.func,
        document: PropTypes.shape({
          getElementById: PropTypes.func,
          activeElement: PropTypes.any,
          body: PropTypes.any
        })
      }),
      suppressRefError: PropTypes.bool,
      scrollIntoView: PropTypes.func,
      selectedItem: PropTypes.any,
      isOpen: PropTypes.bool,
      inputValue: PropTypes.string,
      highlightedIndex: PropTypes.number,
      labelId: PropTypes.string,
      inputId: PropTypes.string,
      menuId: PropTypes.string,
      getItemId: PropTypes.func
    };
    function validateGetMenuPropsCalledCorrectly(node, _ref12) {
      var refKey = _ref12.refKey;
      if (!node) {
        console.error('downshift: The ref prop "' + refKey + '" from getMenuProps was not applied correctly on your menu element.');
      }
    }
    function validateGetRootPropsCalledCorrectly(element, _ref13) {
      var refKey = _ref13.refKey;
      var refKeySpecified = refKey !== "ref";
      var isComposite = !isDOMElement(element);
      if (isComposite && !refKeySpecified && !reactIs.isForwardRef(element)) {
        console.error("downshift: You returned a non-DOM element. You must specify a refKey in getRootProps");
      } else if (!isComposite && refKeySpecified) {
        console.error('downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified "' + refKey + '"');
      }
      if (!reactIs.isForwardRef(element) && !getElementProps(element)[refKey]) {
        console.error('downshift: You must apply the ref prop "' + refKey + '" from getRootProps onto your root element.');
      }
    }
    var dropdownDefaultStateValues = {
      highlightedIndex: -1,
      isOpen: false,
      selectedItem: null,
      inputValue: ""
    };
    function callOnChangeProps(action, state, newState) {
      var props = action.props, type = action.type;
      var changes = {};
      Object.keys(state).forEach(function(key) {
        invokeOnChangeHandler(key, props, state, newState);
        if (newState[key] !== state[key]) {
          changes[key] = newState[key];
        }
      });
      if (props.onStateChange && Object.keys(changes).length) {
        props.onStateChange(_extends({
          type
        }, changes));
      }
    }
    function invokeOnChangeHandler(key, props, state, newState) {
      var handler = "on" + capitalizeString(key) + "Change";
      if (props[handler] && newState[key] !== void 0 && newState[key] !== state[key]) {
        props[handler](newState);
      }
    }
    function stateReducer(s, a) {
      return a.changes;
    }
    function getA11ySelectionMessage(selectionParameters) {
      var selectedItem = selectionParameters.selectedItem, itemToStringLocal = selectionParameters.itemToString;
      return selectedItem ? itemToStringLocal(selectedItem) + " has been selected." : "";
    }
    var updateA11yStatus = debounce(function(getA11yMessage, document2) {
      setStatus(getA11yMessage(), document2);
    }, 200);
    function getElementIds(_ref) {
      var id = _ref.id, labelId = _ref.labelId, menuId = _ref.menuId, getItemId = _ref.getItemId, toggleButtonId = _ref.toggleButtonId;
      var uniqueId = id === void 0 ? "downshift-" + generateId() : id;
      return {
        labelId: labelId || uniqueId + "-label",
        menuId: menuId || uniqueId + "-menu",
        getItemId: getItemId || function(index) {
          return uniqueId + "-item-" + index;
        },
        toggleButtonId: toggleButtonId || uniqueId + "-toggle-button"
      };
    }
    function getItemIndex(index, item, items) {
      if (index !== void 0) {
        return index;
      }
      if (items.length === 0) {
        return -1;
      }
      return items.indexOf(item);
    }
    function itemToString(item) {
      return item ? String(item) : "";
    }
    function getPropTypesValidator(caller, propTypes2) {
      return function(options) {
        if (options === void 0) {
          options = {};
        }
        Object.keys(propTypes2).forEach(function(key) {
          PropTypes.checkPropTypes(propTypes2, options, key, caller.name);
        });
      };
    }
    function isAcceptedCharacterKey(key) {
      return /^\S{1}$/.test(key);
    }
    function capitalizeString(string) {
      return "" + string.slice(0, 1).toUpperCase() + string.slice(1);
    }
    function useLatestRef(val) {
      var ref = react.useRef(val);
      ref.current = val;
      return ref;
    }
    function useEnhancedReducer(reducer, initialState, props) {
      var prevStateRef = react.useRef();
      var actionRef = react.useRef();
      var enhancedReducer = react.useCallback(function(state2, action2) {
        actionRef.current = action2;
        state2 = getState(state2, action2.props);
        var changes = reducer(state2, action2);
        var newState = action2.props.stateReducer(state2, _extends(_extends({}, action2), {}, {
          changes
        }));
        return newState;
      }, [reducer]);
      var _useReducer = react.useReducer(enhancedReducer, initialState), state = _useReducer[0], dispatch = _useReducer[1];
      var propsRef = useLatestRef(props);
      var dispatchWithProps = react.useCallback(function(action2) {
        return dispatch(_extends({
          props: propsRef.current
        }, action2));
      }, [propsRef]);
      var action = actionRef.current;
      react.useEffect(function() {
        if (action && prevStateRef.current && prevStateRef.current !== state) {
          callOnChangeProps(action, getState(prevStateRef.current, action.props), state);
        }
        prevStateRef.current = state;
      }, [state, props, action]);
      return [state, dispatchWithProps];
    }
    function useControlledReducer(reducer, initialState, props) {
      var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props), state = _useEnhancedReducer[0], dispatch = _useEnhancedReducer[1];
      return [getState(state, props), dispatch];
    }
    var defaultProps = {
      itemToString,
      stateReducer,
      getA11ySelectionMessage,
      scrollIntoView,
      circularNavigation: false,
      environment: typeof window === "undefined" ? {} : window
    };
    function getDefaultValue(props, propKey, defaultStateValues2) {
      if (defaultStateValues2 === void 0) {
        defaultStateValues2 = dropdownDefaultStateValues;
      }
      var defaultPropKey = "default" + capitalizeString(propKey);
      if (defaultPropKey in props) {
        return props[defaultPropKey];
      }
      return defaultStateValues2[propKey];
    }
    function getInitialValue(props, propKey, defaultStateValues2) {
      if (defaultStateValues2 === void 0) {
        defaultStateValues2 = dropdownDefaultStateValues;
      }
      if (propKey in props) {
        return props[propKey];
      }
      var initialPropKey = "initial" + capitalizeString(propKey);
      if (initialPropKey in props) {
        return props[initialPropKey];
      }
      return getDefaultValue(props, propKey, defaultStateValues2);
    }
    function getInitialState(props) {
      var selectedItem = getInitialValue(props, "selectedItem");
      var isOpen = getInitialValue(props, "isOpen");
      var highlightedIndex = getInitialValue(props, "highlightedIndex");
      var inputValue = getInitialValue(props, "inputValue");
      return {
        highlightedIndex: highlightedIndex < 0 && selectedItem ? props.items.indexOf(selectedItem) : highlightedIndex,
        isOpen,
        selectedItem,
        inputValue
      };
    }
    function getHighlightedIndexOnOpen(props, state, offset, getItemNodeFromIndex) {
      var items = props.items, initialHighlightedIndex = props.initialHighlightedIndex, defaultHighlightedIndex = props.defaultHighlightedIndex;
      var selectedItem = state.selectedItem, highlightedIndex = state.highlightedIndex;
      if (items.length === 0) {
        return -1;
      }
      if (initialHighlightedIndex !== void 0 && highlightedIndex === initialHighlightedIndex) {
        return initialHighlightedIndex;
      }
      if (defaultHighlightedIndex !== void 0) {
        return defaultHighlightedIndex;
      }
      if (selectedItem) {
        if (offset === 0) {
          return items.indexOf(selectedItem);
        }
        return getNextWrappingIndex(offset, items.indexOf(selectedItem), items.length, getItemNodeFromIndex, false);
      }
      if (offset === 0) {
        return -1;
      }
      return offset < 0 ? items.length - 1 : 0;
    }
    function useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {
      var mouseAndTouchTrackersRef = react.useRef({
        isMouseDown: false,
        isTouchMove: false
      });
      react.useEffect(function() {
        var onMouseDown = function() {
          mouseAndTouchTrackersRef.current.isMouseDown = true;
        };
        var onMouseUp = function(event) {
          mouseAndTouchTrackersRef.current.isMouseDown = false;
          if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(function(ref) {
            return ref.current;
          }), environment.document)) {
            handleBlur();
          }
        };
        var onTouchStart = function() {
          mouseAndTouchTrackersRef.current.isTouchMove = false;
        };
        var onTouchMove = function() {
          mouseAndTouchTrackersRef.current.isTouchMove = true;
        };
        var onTouchEnd = function(event) {
          if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(function(ref) {
            return ref.current;
          }), environment.document, false)) {
            handleBlur();
          }
        };
        environment.addEventListener("mousedown", onMouseDown);
        environment.addEventListener("mouseup", onMouseUp);
        environment.addEventListener("touchstart", onTouchStart);
        environment.addEventListener("touchmove", onTouchMove);
        environment.addEventListener("touchend", onTouchEnd);
        return function() {
          environment.removeEventListener("mousedown", onMouseDown);
          environment.removeEventListener("mouseup", onMouseUp);
          environment.removeEventListener("touchstart", onTouchStart);
          environment.removeEventListener("touchmove", onTouchMove);
          environment.removeEventListener("touchend", onTouchEnd);
        };
      }, [isOpen, environment]);
      return mouseAndTouchTrackersRef;
    }
    function useGetterPropsCalledChecker() {
      for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {
        propKeys[_key] = arguments[_key];
      }
      var getterPropsCalledRef = react.useRef(propKeys.reduce(function(acc, propKey) {
        acc[propKey] = {};
        return acc;
      }, {}));
      if (true) {
        Object.keys(getterPropsCalledRef.current).forEach(function(propKey) {
          getterPropsCalledRef.current[propKey] = null;
        });
      }
      react.useEffect(function() {
        if (true) {
          Object.keys(getterPropsCalledRef.current).forEach(function(propKey) {
            if (!getterPropsCalledRef.current[propKey]) {
              console.error("downshift: You forgot to call the " + propKey + " getter function on your component / element.");
              return;
            }
            var _getterPropsCalledRef = getterPropsCalledRef.current[propKey], suppressRefError = _getterPropsCalledRef.suppressRefError, refKey = _getterPropsCalledRef.refKey, elementRef = _getterPropsCalledRef.elementRef;
            if ((!elementRef || !elementRef.current) && !suppressRefError) {
              console.error('downshift: The ref prop "' + refKey + '" from ' + propKey + " was not applied correctly on your element.");
            }
          });
        }
      });
      var setGetterPropCallInfo = react.useCallback(function(propKey, suppressRefError, refKey, elementRef) {
        if (true) {
          getterPropsCalledRef.current[propKey] = {
            suppressRefError,
            refKey,
            elementRef
          };
        }
      }, []);
      return setGetterPropCallInfo;
    }
    function getItemIndexByCharacterKey(keysSoFar, highlightedIndex, items, itemToStringParam, getItemNodeFromIndex) {
      var lowerCasedItemStrings = items.map(function(item) {
        return itemToStringParam(item).toLowerCase();
      });
      var lowerCasedKeysSoFar = keysSoFar.toLowerCase();
      var isValid = function(itemString2, index2) {
        var element = getItemNodeFromIndex(index2);
        return itemString2.startsWith(lowerCasedKeysSoFar) && !(element && element.hasAttribute("disabled"));
      };
      for (var index = highlightedIndex + 1; index < lowerCasedItemStrings.length; index++) {
        var itemString = lowerCasedItemStrings[index];
        if (isValid(itemString, index)) {
          return index;
        }
      }
      for (var _index = 0; _index < highlightedIndex; _index++) {
        var _itemString = lowerCasedItemStrings[_index];
        if (isValid(_itemString, _index)) {
          return _index;
        }
      }
      return highlightedIndex;
    }
    var propTypes = {
      items: PropTypes.array.isRequired,
      itemToString: PropTypes.func,
      getA11yStatusMessage: PropTypes.func,
      getA11ySelectionMessage: PropTypes.func,
      circularNavigation: PropTypes.bool,
      highlightedIndex: PropTypes.number,
      defaultHighlightedIndex: PropTypes.number,
      initialHighlightedIndex: PropTypes.number,
      isOpen: PropTypes.bool,
      defaultIsOpen: PropTypes.bool,
      initialIsOpen: PropTypes.bool,
      selectedItem: PropTypes.any,
      initialSelectedItem: PropTypes.any,
      defaultSelectedItem: PropTypes.any,
      id: PropTypes.string,
      labelId: PropTypes.string,
      menuId: PropTypes.string,
      getItemId: PropTypes.func,
      toggleButtonId: PropTypes.string,
      stateReducer: PropTypes.func,
      onSelectedItemChange: PropTypes.func,
      onHighlightedIndexChange: PropTypes.func,
      onStateChange: PropTypes.func,
      onIsOpenChange: PropTypes.func,
      environment: PropTypes.shape({
        addEventListener: PropTypes.func,
        removeEventListener: PropTypes.func,
        document: PropTypes.shape({
          getElementById: PropTypes.func,
          activeElement: PropTypes.any,
          body: PropTypes.any
        })
      })
    };
    function getA11yStatusMessage$1(_ref) {
      var isOpen = _ref.isOpen, resultCount = _ref.resultCount, previousResultCount = _ref.previousResultCount;
      if (!isOpen) {
        return "";
      }
      if (!resultCount) {
        return "No results are available.";
      }
      if (resultCount !== previousResultCount) {
        return resultCount + " result" + (resultCount === 1 ? " is" : "s are") + " available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.";
      }
      return "";
    }
    var defaultProps$1 = _extends(_extends({}, defaultProps), {}, {
      getA11yStatusMessage: getA11yStatusMessage$1
    });
    var MenuKeyDownArrowDown = "__menu_keydown_arrow_down__";
    var MenuKeyDownArrowUp = "__menu_keydown_arrow_up__";
    var MenuKeyDownEscape = "__menu_keydown_escape__";
    var MenuKeyDownHome = "__menu_keydown_home__";
    var MenuKeyDownEnd = "__menu_keydown_end__";
    var MenuKeyDownEnter = "__menu_keydown_enter__";
    var MenuKeyDownSpaceButton = "__menu_keydown_space_button__";
    var MenuKeyDownCharacter = "__menu_keydown_character__";
    var MenuBlur = "__menu_blur__";
    var MenuMouseLeave = "__menu_mouse_leave__";
    var ItemMouseMove = "__item_mouse_move__";
    var ItemClick = "__item_click__";
    var ToggleButtonClick = "__togglebutton_click__";
    var ToggleButtonKeyDownArrowDown = "__togglebutton_keydown_arrow_down__";
    var ToggleButtonKeyDownArrowUp = "__togglebutton_keydown_arrow_up__";
    var ToggleButtonKeyDownCharacter = "__togglebutton_keydown_character__";
    var FunctionToggleMenu = "__function_toggle_menu__";
    var FunctionOpenMenu = "__function_open_menu__";
    var FunctionCloseMenu = "__function_close_menu__";
    var FunctionSetHighlightedIndex = "__function_set_highlighted_index__";
    var FunctionSelectItem = "__function_select_item__";
    var FunctionSetInputValue = "__function_set_input_value__";
    var FunctionReset = "__function_reset__";
    var stateChangeTypes$1 = Object.freeze({
      __proto__: null,
      MenuKeyDownArrowDown,
      MenuKeyDownArrowUp,
      MenuKeyDownEscape,
      MenuKeyDownHome,
      MenuKeyDownEnd,
      MenuKeyDownEnter,
      MenuKeyDownSpaceButton,
      MenuKeyDownCharacter,
      MenuBlur,
      MenuMouseLeave,
      ItemMouseMove,
      ItemClick,
      ToggleButtonClick,
      ToggleButtonKeyDownArrowDown,
      ToggleButtonKeyDownArrowUp,
      ToggleButtonKeyDownCharacter,
      FunctionToggleMenu,
      FunctionOpenMenu,
      FunctionCloseMenu,
      FunctionSetHighlightedIndex,
      FunctionSelectItem,
      FunctionSetInputValue,
      FunctionReset
    });
    function downshiftSelectReducer(state, action) {
      var type = action.type, props = action.props, shiftKey = action.shiftKey;
      var changes;
      switch (type) {
        case ItemMouseMove:
          changes = {
            highlightedIndex: action.index
          };
          break;
        case ItemClick:
          changes = {
            isOpen: getDefaultValue(props, "isOpen"),
            highlightedIndex: getDefaultValue(props, "highlightedIndex"),
            selectedItem: props.items[action.index]
          };
          break;
        case ToggleButtonKeyDownCharacter:
          {
            var lowercasedKey = action.key;
            var inputValue = "" + state.inputValue + lowercasedKey;
            var itemIndex = getItemIndexByCharacterKey(inputValue, state.selectedItem ? props.items.indexOf(state.selectedItem) : -1, props.items, props.itemToString, action.getItemNodeFromIndex);
            changes = _extends({
              inputValue
            }, itemIndex >= 0 && {
              selectedItem: props.items[itemIndex]
            });
          }
          break;
        case ToggleButtonKeyDownArrowDown:
          changes = {
            highlightedIndex: getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),
            isOpen: true
          };
          break;
        case ToggleButtonKeyDownArrowUp:
          changes = {
            highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),
            isOpen: true
          };
          break;
        case MenuKeyDownEnter:
        case MenuKeyDownSpaceButton:
          changes = _extends({
            isOpen: getDefaultValue(props, "isOpen"),
            highlightedIndex: getDefaultValue(props, "highlightedIndex")
          }, state.highlightedIndex >= 0 && {
            selectedItem: props.items[state.highlightedIndex]
          });
          break;
        case MenuKeyDownHome:
          changes = {
            highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)
          };
          break;
        case MenuKeyDownEnd:
          changes = {
            highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)
          };
          break;
        case MenuKeyDownEscape:
          changes = {
            isOpen: false,
            highlightedIndex: -1
          };
          break;
        case MenuBlur:
          changes = {
            isOpen: false,
            highlightedIndex: -1
          };
          break;
        case MenuKeyDownCharacter:
          {
            var _lowercasedKey = action.key;
            var _inputValue = "" + state.inputValue + _lowercasedKey;
            var highlightedIndex = getItemIndexByCharacterKey(_inputValue, state.highlightedIndex, props.items, props.itemToString, action.getItemNodeFromIndex);
            changes = _extends({
              inputValue: _inputValue
            }, highlightedIndex >= 0 && {
              highlightedIndex
            });
          }
          break;
        case MenuKeyDownArrowDown:
          changes = {
            highlightedIndex: getNextWrappingIndex(shiftKey ? 5 : 1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
          };
          break;
        case MenuKeyDownArrowUp:
          changes = {
            highlightedIndex: getNextWrappingIndex(shiftKey ? -5 : -1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
          };
          break;
        case MenuMouseLeave:
          changes = {
            highlightedIndex: -1
          };
          break;
        case ToggleButtonClick:
        case FunctionToggleMenu:
          changes = {
            isOpen: !state.isOpen,
            highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)
          };
          break;
        case FunctionOpenMenu:
          changes = {
            isOpen: true,
            highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)
          };
          break;
        case FunctionCloseMenu:
          changes = {
            isOpen: false
          };
          break;
        case FunctionSetHighlightedIndex:
          changes = {
            highlightedIndex: action.highlightedIndex
          };
          break;
        case FunctionSelectItem:
          changes = {
            selectedItem: action.selectedItem
          };
          break;
        case FunctionSetInputValue:
          changes = {
            inputValue: action.inputValue
          };
          break;
        case FunctionReset:
          changes = {
            highlightedIndex: getDefaultValue(props, "highlightedIndex"),
            isOpen: getDefaultValue(props, "isOpen"),
            selectedItem: getDefaultValue(props, "selectedItem"),
            inputValue: getDefaultValue(props, "inputValue")
          };
          break;
        default:
          throw new Error("Reducer called without proper action type.");
      }
      return _extends(_extends({}, state), changes);
    }
    var validatePropTypes = getPropTypesValidator(useSelect, propTypes);
    useSelect.stateChangeTypes = stateChangeTypes$1;
    function useSelect(userProps) {
      if (userProps === void 0) {
        userProps = {};
      }
      if (true) {
        validatePropTypes(userProps);
      }
      var props = _extends(_extends({}, defaultProps$1), userProps);
      var items = props.items, scrollIntoView2 = props.scrollIntoView, environment = props.environment, initialIsOpen = props.initialIsOpen, defaultIsOpen = props.defaultIsOpen, itemToString2 = props.itemToString, getA11ySelectionMessage2 = props.getA11ySelectionMessage, getA11yStatusMessage2 = props.getA11yStatusMessage;
      var initialState = getInitialState(props);
      var _useControlledReducer = useControlledReducer(downshiftSelectReducer, initialState, props), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];
      var isOpen = state.isOpen, highlightedIndex = state.highlightedIndex, selectedItem = state.selectedItem, inputValue = state.inputValue;
      var toggleButtonRef = react.useRef(null);
      var menuRef = react.useRef(null);
      var itemRefs = react.useRef();
      itemRefs.current = {};
      var shouldScrollRef = react.useRef(true);
      var shouldBlurRef = react.useRef(true);
      var clearTimeoutRef = react.useRef(null);
      var elementIdsRef = react.useRef(getElementIds(props));
      var previousResultCountRef = react.useRef();
      var isInitialMountRef = react.useRef(true);
      var prevPropsRef = react.useRef(props);
      var latest = useLatestRef({
        state,
        props
      });
      var getItemNodeFromIndex = function(index) {
        return itemRefs.current[elementIdsRef.current.getItemId(index)];
      };
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        var previousResultCount = previousResultCountRef.current;
        updateA11yStatus(function() {
          return getA11yStatusMessage2({
            isOpen,
            highlightedIndex,
            selectedItem,
            inputValue,
            highlightedItem: items[highlightedIndex],
            resultCount: items.length,
            itemToString: itemToString2,
            previousResultCount
          });
        }, environment.document);
      }, [isOpen, highlightedIndex, inputValue, items]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        var previousResultCount = previousResultCountRef.current;
        updateA11yStatus(function() {
          return getA11ySelectionMessage2({
            isOpen,
            highlightedIndex,
            selectedItem,
            inputValue,
            highlightedItem: items[highlightedIndex],
            resultCount: items.length,
            itemToString: itemToString2,
            previousResultCount
          });
        }, environment.document);
      }, [selectedItem]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          clearTimeoutRef.current = debounce(function(outerDispatch) {
            outerDispatch({
              type: FunctionSetInputValue,
              inputValue: ""
            });
          }, 500);
        }
        if (!inputValue) {
          return;
        }
        clearTimeoutRef.current(dispatch);
      }, [inputValue]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          if ((initialIsOpen || defaultIsOpen || isOpen) && menuRef.current) {
            menuRef.current.focus();
          }
          return;
        }
        if (isOpen) {
          if (menuRef.current) {
            menuRef.current.focus();
          }
          return;
        }
        if (environment.document.activeElement === menuRef.current) {
          if (toggleButtonRef.current) {
            shouldBlurRef.current = false;
            toggleButtonRef.current.focus();
          }
        }
      }, [isOpen]);
      react.useEffect(function() {
        if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {
          return;
        }
        if (shouldScrollRef.current === false) {
          shouldScrollRef.current = true;
        } else {
          scrollIntoView2(getItemNodeFromIndex(highlightedIndex), menuRef.current);
        }
      }, [highlightedIndex]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        previousResultCountRef.current = items.length;
      });
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        validateControlledUnchanged(state, prevPropsRef.current, props);
        prevPropsRef.current = props;
      }, [state, props]);
      var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, function() {
        dispatch({
          type: MenuBlur
        });
      });
      var setGetterPropCallInfo = useGetterPropsCalledChecker("getMenuProps", "getToggleButtonProps");
      react.useEffect(function() {
        isInitialMountRef.current = false;
      }, []);
      var toggleButtonKeyDownHandlers = react.useMemo(function() {
        return {
          ArrowDown: function ArrowDown(event) {
            event.preventDefault();
            dispatch({
              type: ToggleButtonKeyDownArrowDown,
              getItemNodeFromIndex,
              shiftKey: event.shiftKey
            });
          },
          ArrowUp: function ArrowUp(event) {
            event.preventDefault();
            dispatch({
              type: ToggleButtonKeyDownArrowUp,
              getItemNodeFromIndex,
              shiftKey: event.shiftKey
            });
          }
        };
      }, [dispatch]);
      var menuKeyDownHandlers = react.useMemo(function() {
        return {
          ArrowDown: function ArrowDown(event) {
            event.preventDefault();
            dispatch({
              type: MenuKeyDownArrowDown,
              getItemNodeFromIndex,
              shiftKey: event.shiftKey
            });
          },
          ArrowUp: function ArrowUp(event) {
            event.preventDefault();
            dispatch({
              type: MenuKeyDownArrowUp,
              getItemNodeFromIndex,
              shiftKey: event.shiftKey
            });
          },
          Home: function Home(event) {
            event.preventDefault();
            dispatch({
              type: MenuKeyDownHome,
              getItemNodeFromIndex
            });
          },
          End: function End(event) {
            event.preventDefault();
            dispatch({
              type: MenuKeyDownEnd,
              getItemNodeFromIndex
            });
          },
          Escape: function Escape() {
            dispatch({
              type: MenuKeyDownEscape
            });
          },
          Enter: function Enter(event) {
            event.preventDefault();
            dispatch({
              type: MenuKeyDownEnter
            });
          },
          " ": function _(event) {
            event.preventDefault();
            dispatch({
              type: MenuKeyDownSpaceButton
            });
          }
        };
      }, [dispatch]);
      var toggleMenu = react.useCallback(function() {
        dispatch({
          type: FunctionToggleMenu
        });
      }, [dispatch]);
      var closeMenu = react.useCallback(function() {
        dispatch({
          type: FunctionCloseMenu
        });
      }, [dispatch]);
      var openMenu = react.useCallback(function() {
        dispatch({
          type: FunctionOpenMenu
        });
      }, [dispatch]);
      var setHighlightedIndex = react.useCallback(function(newHighlightedIndex) {
        dispatch({
          type: FunctionSetHighlightedIndex,
          highlightedIndex: newHighlightedIndex
        });
      }, [dispatch]);
      var selectItem = react.useCallback(function(newSelectedItem) {
        dispatch({
          type: FunctionSelectItem,
          selectedItem: newSelectedItem
        });
      }, [dispatch]);
      var reset = react.useCallback(function() {
        dispatch({
          type: FunctionReset
        });
      }, [dispatch]);
      var setInputValue = react.useCallback(function(newInputValue) {
        dispatch({
          type: FunctionSetInputValue,
          inputValue: newInputValue
        });
      }, [dispatch]);
      var getLabelProps = react.useCallback(function(labelProps) {
        return _extends({
          id: elementIdsRef.current.labelId,
          htmlFor: elementIdsRef.current.toggleButtonId
        }, labelProps);
      }, []);
      var getMenuProps = react.useCallback(function(_temp, _temp2) {
        var _extends2;
        var _ref = _temp === void 0 ? {} : _temp, onMouseLeave = _ref.onMouseLeave, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? "ref" : _ref$refKey, onKeyDown = _ref.onKeyDown, onBlur = _ref.onBlur, ref = _ref.ref, rest = _objectWithoutPropertiesLoose(_ref, ["onMouseLeave", "refKey", "onKeyDown", "onBlur", "ref"]);
        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
        var latestState = latest.current.state;
        setGetterPropCallInfo("getMenuProps", suppressRefError, refKey, menuRef);
        return _extends(_extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function(menuNode) {
          menuRef.current = menuNode;
        }), _extends2.id = elementIdsRef.current.menuId, _extends2.role = "listbox", _extends2["aria-labelledby"] = elementIdsRef.current.labelId, _extends2.tabIndex = -1, _extends2), latestState.isOpen && latestState.highlightedIndex > -1 && {
          "aria-activedescendant": elementIdsRef.current.getItemId(latestState.highlightedIndex)
        }), {}, {
          onMouseLeave: callAllEventHandlers(onMouseLeave, function menuHandleMouseLeave() {
            dispatch({
              type: MenuMouseLeave
            });
          }),
          onKeyDown: callAllEventHandlers(onKeyDown, function menuHandleKeyDown(event) {
            var key = normalizeArrowKey(event);
            if (key && menuKeyDownHandlers[key]) {
              menuKeyDownHandlers[key](event);
            } else if (isAcceptedCharacterKey(key)) {
              dispatch({
                type: MenuKeyDownCharacter,
                key,
                getItemNodeFromIndex
              });
            }
          }),
          onBlur: callAllEventHandlers(onBlur, function menuHandleBlur() {
            if (shouldBlurRef.current === false) {
              shouldBlurRef.current = true;
              return;
            }
            var shouldBlur = !mouseAndTouchTrackersRef.current.isMouseDown;
            if (shouldBlur) {
              dispatch({
                type: MenuBlur
              });
            }
          })
        }, rest);
      }, [dispatch, latest, menuKeyDownHandlers, mouseAndTouchTrackersRef, setGetterPropCallInfo]);
      var getToggleButtonProps = react.useCallback(function(_temp3, _temp4) {
        var _extends3;
        var _ref3 = _temp3 === void 0 ? {} : _temp3, onClick = _ref3.onClick, onKeyDown = _ref3.onKeyDown, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, ref = _ref3.ref, rest = _objectWithoutPropertiesLoose(_ref3, ["onClick", "onKeyDown", "refKey", "ref"]);
        var _ref4 = _temp4 === void 0 ? {} : _temp4, _ref4$suppressRefErro = _ref4.suppressRefError, suppressRefError = _ref4$suppressRefErro === void 0 ? false : _ref4$suppressRefErro;
        var toggleButtonHandleClick = function() {
          dispatch({
            type: ToggleButtonClick
          });
        };
        var toggleButtonHandleKeyDown = function(event) {
          var key = normalizeArrowKey(event);
          if (key && toggleButtonKeyDownHandlers[key]) {
            toggleButtonKeyDownHandlers[key](event);
          } else if (isAcceptedCharacterKey(key)) {
            dispatch({
              type: ToggleButtonKeyDownCharacter,
              key,
              getItemNodeFromIndex
            });
          }
        };
        var toggleProps = _extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function(toggleButtonNode) {
          toggleButtonRef.current = toggleButtonNode;
        }), _extends3.id = elementIdsRef.current.toggleButtonId, _extends3["aria-haspopup"] = "listbox", _extends3["aria-expanded"] = latest.current.state.isOpen, _extends3["aria-labelledby"] = elementIdsRef.current.labelId + " " + elementIdsRef.current.toggleButtonId, _extends3), rest);
        if (!rest.disabled) {
          toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);
          toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);
        }
        setGetterPropCallInfo("getToggleButtonProps", suppressRefError, refKey, toggleButtonRef);
        return toggleProps;
      }, [dispatch, latest, toggleButtonKeyDownHandlers, setGetterPropCallInfo]);
      var getItemProps = react.useCallback(function(_temp5) {
        var _extends4;
        var _ref5 = _temp5 === void 0 ? {} : _temp5, item = _ref5.item, index = _ref5.index, onMouseMove = _ref5.onMouseMove, onClick = _ref5.onClick, _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? "ref" : _ref5$refKey, ref = _ref5.ref, rest = _objectWithoutPropertiesLoose(_ref5, ["item", "index", "onMouseMove", "onClick", "refKey", "ref"]);
        var _latest$current = latest.current, latestState = _latest$current.state, latestProps = _latest$current.props;
        var itemHandleMouseMove = function() {
          if (index === latestState.highlightedIndex) {
            return;
          }
          shouldScrollRef.current = false;
          dispatch({
            type: ItemMouseMove,
            index
          });
        };
        var itemHandleClick = function() {
          dispatch({
            type: ItemClick,
            index
          });
        };
        var itemIndex = getItemIndex(index, item, latestProps.items);
        if (itemIndex < 0) {
          throw new Error("Pass either item or item index in getItemProps!");
        }
        var itemProps = _extends((_extends4 = {
          role: "option",
          "aria-selected": "" + (itemIndex === latestState.highlightedIndex),
          id: elementIdsRef.current.getItemId(itemIndex)
        }, _extends4[refKey] = handleRefs(ref, function(itemNode) {
          if (itemNode) {
            itemRefs.current[elementIdsRef.current.getItemId(itemIndex)] = itemNode;
          }
        }), _extends4), rest);
        if (!rest.disabled) {
          itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);
          itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);
        }
        return itemProps;
      }, [dispatch, latest]);
      return {
        getToggleButtonProps,
        getLabelProps,
        getMenuProps,
        getItemProps,
        toggleMenu,
        openMenu,
        closeMenu,
        setHighlightedIndex,
        selectItem,
        reset,
        setInputValue,
        highlightedIndex,
        isOpen,
        selectedItem,
        inputValue
      };
    }
    var InputKeyDownArrowDown = "__input_keydown_arrow_down__";
    var InputKeyDownArrowUp = "__input_keydown_arrow_up__";
    var InputKeyDownEscape = "__input_keydown_escape__";
    var InputKeyDownHome = "__input_keydown_home__";
    var InputKeyDownEnd = "__input_keydown_end__";
    var InputKeyDownEnter = "__input_keydown_enter__";
    var InputChange = "__input_change__";
    var InputBlur = "__input_blur__";
    var MenuMouseLeave$1 = "__menu_mouse_leave__";
    var ItemMouseMove$1 = "__item_mouse_move__";
    var ItemClick$1 = "__item_click__";
    var ToggleButtonClick$1 = "__togglebutton_click__";
    var FunctionToggleMenu$1 = "__function_toggle_menu__";
    var FunctionOpenMenu$1 = "__function_open_menu__";
    var FunctionCloseMenu$1 = "__function_close_menu__";
    var FunctionSetHighlightedIndex$1 = "__function_set_highlighted_index__";
    var FunctionSelectItem$1 = "__function_select_item__";
    var FunctionSetInputValue$1 = "__function_set_input_value__";
    var FunctionReset$1 = "__function_reset__";
    var ControlledPropUpdatedSelectedItem = "__controlled_prop_updated_selected_item__";
    var stateChangeTypes$2 = Object.freeze({
      __proto__: null,
      InputKeyDownArrowDown,
      InputKeyDownArrowUp,
      InputKeyDownEscape,
      InputKeyDownHome,
      InputKeyDownEnd,
      InputKeyDownEnter,
      InputChange,
      InputBlur,
      MenuMouseLeave: MenuMouseLeave$1,
      ItemMouseMove: ItemMouseMove$1,
      ItemClick: ItemClick$1,
      ToggleButtonClick: ToggleButtonClick$1,
      FunctionToggleMenu: FunctionToggleMenu$1,
      FunctionOpenMenu: FunctionOpenMenu$1,
      FunctionCloseMenu: FunctionCloseMenu$1,
      FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,
      FunctionSelectItem: FunctionSelectItem$1,
      FunctionSetInputValue: FunctionSetInputValue$1,
      FunctionReset: FunctionReset$1,
      ControlledPropUpdatedSelectedItem
    });
    function getElementIds$1(_ref) {
      var id = _ref.id, inputId = _ref.inputId, rest = _objectWithoutPropertiesLoose(_ref, ["id", "inputId"]);
      var uniqueId = id === void 0 ? "downshift-" + generateId() : id;
      return _extends({
        inputId: inputId || uniqueId + "-input"
      }, getElementIds(_extends({
        id
      }, rest)));
    }
    function getInitialState$1(props) {
      var initialState = getInitialState(props);
      var selectedItem = initialState.selectedItem;
      var inputValue = initialState.inputValue;
      if (inputValue === "" && selectedItem && props.defaultInputValue === void 0 && props.initialInputValue === void 0 && props.inputValue === void 0) {
        inputValue = props.itemToString(selectedItem);
      }
      return _extends(_extends({}, initialState), {}, {
        inputValue
      });
    }
    var propTypes$1 = {
      items: PropTypes.array.isRequired,
      itemToString: PropTypes.func,
      getA11yStatusMessage: PropTypes.func,
      getA11ySelectionMessage: PropTypes.func,
      circularNavigation: PropTypes.bool,
      highlightedIndex: PropTypes.number,
      defaultHighlightedIndex: PropTypes.number,
      initialHighlightedIndex: PropTypes.number,
      isOpen: PropTypes.bool,
      defaultIsOpen: PropTypes.bool,
      initialIsOpen: PropTypes.bool,
      selectedItem: PropTypes.any,
      initialSelectedItem: PropTypes.any,
      defaultSelectedItem: PropTypes.any,
      inputValue: PropTypes.string,
      defaultInputValue: PropTypes.string,
      initialInputValue: PropTypes.string,
      id: PropTypes.string,
      labelId: PropTypes.string,
      menuId: PropTypes.string,
      getItemId: PropTypes.func,
      inputId: PropTypes.string,
      toggleButtonId: PropTypes.string,
      stateReducer: PropTypes.func,
      onSelectedItemChange: PropTypes.func,
      onHighlightedIndexChange: PropTypes.func,
      onStateChange: PropTypes.func,
      onIsOpenChange: PropTypes.func,
      onInputValueChange: PropTypes.func,
      environment: PropTypes.shape({
        addEventListener: PropTypes.func,
        removeEventListener: PropTypes.func,
        document: PropTypes.shape({
          getElementById: PropTypes.func,
          activeElement: PropTypes.any,
          body: PropTypes.any
        })
      })
    };
    function useControlledReducer$1(reducer, initialState, props) {
      var previousSelectedItemRef = react.useRef();
      var _useEnhancedReducer = useEnhancedReducer(reducer, initialState, props), state = _useEnhancedReducer[0], dispatch = _useEnhancedReducer[1];
      if (isControlledProp(props, "selectedItem")) {
        if (previousSelectedItemRef.current !== props.selectedItem) {
          dispatch({
            type: ControlledPropUpdatedSelectedItem,
            inputValue: props.itemToString(props.selectedItem)
          });
        }
        previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;
      }
      return [getState(state, props), dispatch];
    }
    var defaultProps$2 = _extends(_extends({}, defaultProps), {}, {
      getA11yStatusMessage,
      circularNavigation: true
    });
    function downshiftUseComboboxReducer(state, action) {
      var type = action.type, props = action.props, shiftKey = action.shiftKey;
      var changes;
      switch (type) {
        case ItemMouseMove$1:
          changes = {
            highlightedIndex: action.index
          };
          break;
        case ItemClick$1:
          changes = {
            isOpen: getDefaultValue(props, "isOpen"),
            highlightedIndex: getDefaultValue(props, "highlightedIndex"),
            selectedItem: props.items[action.index],
            inputValue: props.itemToString(props.items[action.index])
          };
          break;
        case InputKeyDownArrowDown:
          if (state.isOpen) {
            changes = {
              highlightedIndex: getNextWrappingIndex(shiftKey ? 5 : 1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
            };
          } else {
            changes = {
              highlightedIndex: getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),
              isOpen: true
            };
          }
          break;
        case InputKeyDownArrowUp:
          if (state.isOpen) {
            changes = {
              highlightedIndex: getNextWrappingIndex(shiftKey ? -5 : -1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
            };
          } else {
            changes = {
              highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),
              isOpen: true
            };
          }
          break;
        case InputKeyDownEnter:
          changes = _extends({}, state.highlightedIndex >= 0 && {
            selectedItem: props.items[state.highlightedIndex],
            isOpen: getDefaultValue(props, "isOpen"),
            highlightedIndex: getDefaultValue(props, "highlightedIndex"),
            inputValue: props.itemToString(props.items[state.highlightedIndex])
          });
          break;
        case InputKeyDownEscape:
          changes = {
            isOpen: false,
            selectedItem: null,
            highlightedIndex: -1,
            inputValue: ""
          };
          break;
        case InputKeyDownHome:
          changes = {
            highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)
          };
          break;
        case InputKeyDownEnd:
          changes = {
            highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)
          };
          break;
        case InputBlur:
          changes = _extends({
            isOpen: false
          }, state.highlightedIndex >= 0 && {
            selectedItem: props.items[state.highlightedIndex],
            inputValue: props.itemToString(props.items[state.highlightedIndex]),
            highlightedIndex: -1
          });
          break;
        case InputChange:
          changes = {
            isOpen: true,
            highlightedIndex: getDefaultValue(props, "highlightedIndex"),
            inputValue: action.inputValue
          };
          break;
        case MenuMouseLeave$1:
          changes = {
            highlightedIndex: -1
          };
          break;
        case ToggleButtonClick$1:
        case FunctionToggleMenu$1:
          changes = {
            isOpen: !state.isOpen,
            highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)
          };
          break;
        case FunctionOpenMenu$1:
          changes = {
            isOpen: true,
            highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)
          };
          break;
        case FunctionCloseMenu$1:
          changes = {
            isOpen: false
          };
          break;
        case FunctionSetHighlightedIndex$1:
          changes = {
            highlightedIndex: action.highlightedIndex
          };
          break;
        case FunctionSelectItem$1:
          changes = {
            selectedItem: action.selectedItem,
            inputValue: props.itemToString(action.selectedItem)
          };
          break;
        case ControlledPropUpdatedSelectedItem:
        case FunctionSetInputValue$1:
          changes = {
            inputValue: action.inputValue
          };
          break;
        case FunctionReset$1:
          changes = {
            highlightedIndex: getDefaultValue(props, "highlightedIndex"),
            isOpen: getDefaultValue(props, "isOpen"),
            selectedItem: getDefaultValue(props, "selectedItem"),
            inputValue: getDefaultValue(props, "inputValue")
          };
          break;
        default:
          throw new Error("Reducer called without proper action type.");
      }
      return _extends(_extends({}, state), changes);
    }
    var validatePropTypes$1 = getPropTypesValidator(useCombobox, propTypes$1);
    useCombobox.stateChangeTypes = stateChangeTypes$2;
    function useCombobox(userProps) {
      if (userProps === void 0) {
        userProps = {};
      }
      if (true) {
        validatePropTypes$1(userProps);
      }
      var props = _extends(_extends({}, defaultProps$2), userProps);
      var initialIsOpen = props.initialIsOpen, defaultIsOpen = props.defaultIsOpen, items = props.items, scrollIntoView2 = props.scrollIntoView, environment = props.environment, getA11yStatusMessage2 = props.getA11yStatusMessage, getA11ySelectionMessage2 = props.getA11ySelectionMessage, itemToString2 = props.itemToString;
      var initialState = getInitialState$1(props);
      var _useControlledReducer = useControlledReducer$1(downshiftUseComboboxReducer, initialState, props), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];
      var isOpen = state.isOpen, highlightedIndex = state.highlightedIndex, selectedItem = state.selectedItem, inputValue = state.inputValue;
      var menuRef = react.useRef(null);
      var itemRefs = react.useRef();
      var inputRef = react.useRef(null);
      var toggleButtonRef = react.useRef(null);
      var comboboxRef = react.useRef(null);
      itemRefs.current = {};
      var shouldScrollRef = react.useRef(true);
      var isInitialMountRef = react.useRef(true);
      var elementIdsRef = react.useRef(getElementIds$1(props));
      var previousResultCountRef = react.useRef();
      var prevPropsRef = react.useRef(props);
      var latest = useLatestRef({
        state,
        props
      });
      var getItemNodeFromIndex = function(index) {
        return itemRefs.current[elementIdsRef.current.getItemId(index)];
      };
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        var previousResultCount = previousResultCountRef.current;
        updateA11yStatus(function() {
          return getA11yStatusMessage2({
            isOpen,
            highlightedIndex,
            selectedItem,
            inputValue,
            highlightedItem: items[highlightedIndex],
            resultCount: items.length,
            itemToString: itemToString2,
            previousResultCount
          });
        }, environment.document);
      }, [isOpen, highlightedIndex, inputValue, items]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        var previousResultCount = previousResultCountRef.current;
        updateA11yStatus(function() {
          return getA11ySelectionMessage2({
            isOpen,
            highlightedIndex,
            selectedItem,
            inputValue,
            highlightedItem: items[highlightedIndex],
            resultCount: items.length,
            itemToString: itemToString2,
            previousResultCount
          });
        }, environment.document);
      }, [selectedItem]);
      react.useEffect(function() {
        if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {
          return;
        }
        if (shouldScrollRef.current === false) {
          shouldScrollRef.current = true;
        } else {
          scrollIntoView2(getItemNodeFromIndex(highlightedIndex), menuRef.current);
        }
      }, [highlightedIndex]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          if (initialIsOpen || defaultIsOpen || isOpen) {
            if (inputRef.current) {
              inputRef.current.focus();
            }
          }
        }
      }, [isOpen]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        previousResultCountRef.current = items.length;
      });
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        validateControlledUnchanged(state, prevPropsRef.current, props);
        prevPropsRef.current = props;
      }, [state, props]);
      var mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [comboboxRef, menuRef, toggleButtonRef], environment, function() {
        dispatch({
          type: InputBlur
        });
      });
      var setGetterPropCallInfo = useGetterPropsCalledChecker("getInputProps", "getComboboxProps", "getMenuProps");
      react.useEffect(function() {
        isInitialMountRef.current = false;
      }, []);
      var inputKeyDownHandlers = react.useMemo(function() {
        return {
          ArrowDown: function ArrowDown(event) {
            event.preventDefault();
            dispatch({
              type: InputKeyDownArrowDown,
              shiftKey: event.shiftKey,
              getItemNodeFromIndex
            });
          },
          ArrowUp: function ArrowUp(event) {
            event.preventDefault();
            dispatch({
              type: InputKeyDownArrowUp,
              shiftKey: event.shiftKey,
              getItemNodeFromIndex
            });
          },
          Home: function Home(event) {
            event.preventDefault();
            dispatch({
              type: InputKeyDownHome,
              getItemNodeFromIndex
            });
          },
          End: function End(event) {
            event.preventDefault();
            dispatch({
              type: InputKeyDownEnd,
              getItemNodeFromIndex
            });
          },
          Escape: function Escape() {
            dispatch({
              type: InputKeyDownEscape
            });
          },
          Enter: function Enter(event) {
            if (event.which === 229) {
              return;
            }
            var latestState = latest.current.state;
            if (latestState.isOpen && latestState.highlightedIndex > -1) {
              event.preventDefault();
              dispatch({
                type: InputKeyDownEnter,
                getItemNodeFromIndex
              });
            }
          }
        };
      }, [dispatch, latest]);
      var getLabelProps = react.useCallback(function(labelProps) {
        return _extends({
          id: elementIdsRef.current.labelId,
          htmlFor: elementIdsRef.current.inputId
        }, labelProps);
      }, []);
      var getMenuProps = react.useCallback(function(_temp, _temp2) {
        var _extends2;
        var _ref = _temp === void 0 ? {} : _temp, onMouseLeave = _ref.onMouseLeave, _ref$refKey = _ref.refKey, refKey = _ref$refKey === void 0 ? "ref" : _ref$refKey, ref = _ref.ref, rest = _objectWithoutPropertiesLoose(_ref, ["onMouseLeave", "refKey", "ref"]);
        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$suppressRefErro = _ref2.suppressRefError, suppressRefError = _ref2$suppressRefErro === void 0 ? false : _ref2$suppressRefErro;
        setGetterPropCallInfo("getMenuProps", suppressRefError, refKey, menuRef);
        return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function(menuNode) {
          menuRef.current = menuNode;
        }), _extends2.id = elementIdsRef.current.menuId, _extends2.role = "listbox", _extends2["aria-labelledby"] = elementIdsRef.current.labelId, _extends2.onMouseLeave = callAllEventHandlers(onMouseLeave, function() {
          dispatch({
            type: MenuMouseLeave$1
          });
        }), _extends2), rest);
      }, [dispatch, setGetterPropCallInfo]);
      var getItemProps = react.useCallback(function(_temp3) {
        var _extends3, _ref4;
        var _ref3 = _temp3 === void 0 ? {} : _temp3, item = _ref3.item, index = _ref3.index, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, ref = _ref3.ref, onMouseMove = _ref3.onMouseMove, onClick = _ref3.onClick, onPress = _ref3.onPress, rest = _objectWithoutPropertiesLoose(_ref3, ["item", "index", "refKey", "ref", "onMouseMove", "onClick", "onPress"]);
        var _latest$current = latest.current, latestProps = _latest$current.props, latestState = _latest$current.state;
        var itemIndex = getItemIndex(index, item, latestProps.items);
        if (itemIndex < 0) {
          throw new Error("Pass either item or item index in getItemProps!");
        }
        var onSelectKey = "onClick";
        var customClickHandler = onClick;
        return _extends(_extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function(itemNode) {
          if (itemNode) {
            itemRefs.current[elementIdsRef.current.getItemId(itemIndex)] = itemNode;
          }
        }), _extends3.role = "option", _extends3["aria-selected"] = "" + (itemIndex === latestState.highlightedIndex), _extends3.id = elementIdsRef.current.getItemId(itemIndex), _extends3), !rest.disabled && (_ref4 = {
          onMouseMove: callAllEventHandlers(onMouseMove, function itemHandleMouseMove() {
            if (index === latestState.highlightedIndex) {
              return;
            }
            shouldScrollRef.current = false;
            dispatch({
              type: ItemMouseMove$1,
              index
            });
          })
        }, _ref4[onSelectKey] = callAllEventHandlers(customClickHandler, function itemHandleClick() {
          dispatch({
            type: ItemClick$1,
            index
          });
          if (inputRef.current) {
            inputRef.current.focus();
          }
        }), _ref4)), rest);
      }, [dispatch, latest]);
      var getToggleButtonProps = react.useCallback(function(_temp4) {
        var _extends4;
        var _ref5 = _temp4 === void 0 ? {} : _temp4, onClick = _ref5.onClick, onPress = _ref5.onPress, _ref5$refKey = _ref5.refKey, refKey = _ref5$refKey === void 0 ? "ref" : _ref5$refKey, ref = _ref5.ref, rest = _objectWithoutPropertiesLoose(_ref5, ["onClick", "onPress", "refKey", "ref"]);
        var toggleButtonHandleClick = function() {
          dispatch({
            type: ToggleButtonClick$1
          });
          if (!latest.current.state.isOpen && inputRef.current) {
            inputRef.current.focus();
          }
        };
        return _extends(_extends((_extends4 = {}, _extends4[refKey] = handleRefs(ref, function(toggleButtonNode) {
          toggleButtonRef.current = toggleButtonNode;
        }), _extends4.id = elementIdsRef.current.toggleButtonId, _extends4.tabIndex = -1, _extends4), !rest.disabled && _extends({}, {
          onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)
        })), rest);
      }, [dispatch, latest]);
      var getInputProps = react.useCallback(function(_temp5, _temp6) {
        var _extends5;
        var _ref6 = _temp5 === void 0 ? {} : _temp5, onKeyDown = _ref6.onKeyDown, onChange = _ref6.onChange, onInput = _ref6.onInput, onBlur = _ref6.onBlur, onChangeText = _ref6.onChangeText, _ref6$refKey = _ref6.refKey, refKey = _ref6$refKey === void 0 ? "ref" : _ref6$refKey, ref = _ref6.ref, rest = _objectWithoutPropertiesLoose(_ref6, ["onKeyDown", "onChange", "onInput", "onBlur", "onChangeText", "refKey", "ref"]);
        var _ref7 = _temp6 === void 0 ? {} : _temp6, _ref7$suppressRefErro = _ref7.suppressRefError, suppressRefError = _ref7$suppressRefErro === void 0 ? false : _ref7$suppressRefErro;
        setGetterPropCallInfo("getInputProps", suppressRefError, refKey, inputRef);
        var latestState = latest.current.state;
        var inputHandleKeyDown = function(event) {
          var key = normalizeArrowKey(event);
          if (key && inputKeyDownHandlers[key]) {
            inputKeyDownHandlers[key](event);
          }
        };
        var inputHandleChange = function(event) {
          dispatch({
            type: InputChange,
            inputValue: event.target.value
          });
        };
        var inputHandleBlur = function() {
          if (!mouseAndTouchTrackersRef.current.isMouseDown) {
            dispatch({
              type: InputBlur
            });
          }
        };
        var onChangeKey = "onChange";
        var eventHandlers = {};
        if (!rest.disabled) {
          var _eventHandlers;
          eventHandlers = (_eventHandlers = {}, _eventHandlers[onChangeKey] = callAllEventHandlers(onChange, onInput, inputHandleChange), _eventHandlers.onKeyDown = callAllEventHandlers(onKeyDown, inputHandleKeyDown), _eventHandlers.onBlur = callAllEventHandlers(onBlur, inputHandleBlur), _eventHandlers);
        }
        return _extends(_extends(_extends((_extends5 = {}, _extends5[refKey] = handleRefs(ref, function(inputNode) {
          inputRef.current = inputNode;
        }), _extends5.id = elementIdsRef.current.inputId, _extends5["aria-autocomplete"] = "list", _extends5["aria-controls"] = elementIdsRef.current.menuId, _extends5), latestState.isOpen && latestState.highlightedIndex > -1 && {
          "aria-activedescendant": elementIdsRef.current.getItemId(latestState.highlightedIndex)
        }), {}, {
          "aria-labelledby": elementIdsRef.current.labelId,
          autoComplete: "off",
          value: latestState.inputValue
        }, eventHandlers), rest);
      }, [dispatch, inputKeyDownHandlers, latest, mouseAndTouchTrackersRef, setGetterPropCallInfo]);
      var getComboboxProps = react.useCallback(function(_temp7, _temp8) {
        var _extends6;
        var _ref8 = _temp7 === void 0 ? {} : _temp7, _ref8$refKey = _ref8.refKey, refKey = _ref8$refKey === void 0 ? "ref" : _ref8$refKey, ref = _ref8.ref, rest = _objectWithoutPropertiesLoose(_ref8, ["refKey", "ref"]);
        var _ref9 = _temp8 === void 0 ? {} : _temp8, _ref9$suppressRefErro = _ref9.suppressRefError, suppressRefError = _ref9$suppressRefErro === void 0 ? false : _ref9$suppressRefErro;
        setGetterPropCallInfo("getComboboxProps", suppressRefError, refKey, comboboxRef);
        return _extends((_extends6 = {}, _extends6[refKey] = handleRefs(ref, function(comboboxNode) {
          comboboxRef.current = comboboxNode;
        }), _extends6.role = "combobox", _extends6["aria-haspopup"] = "listbox", _extends6["aria-owns"] = elementIdsRef.current.menuId, _extends6["aria-expanded"] = latest.current.state.isOpen, _extends6), rest);
      }, [latest, setGetterPropCallInfo]);
      var toggleMenu = react.useCallback(function() {
        dispatch({
          type: FunctionToggleMenu$1
        });
      }, [dispatch]);
      var closeMenu = react.useCallback(function() {
        dispatch({
          type: FunctionCloseMenu$1
        });
      }, [dispatch]);
      var openMenu = react.useCallback(function() {
        dispatch({
          type: FunctionOpenMenu$1
        });
      }, [dispatch]);
      var setHighlightedIndex = react.useCallback(function(newHighlightedIndex) {
        dispatch({
          type: FunctionSetHighlightedIndex$1,
          highlightedIndex: newHighlightedIndex
        });
      }, [dispatch]);
      var selectItem = react.useCallback(function(newSelectedItem) {
        dispatch({
          type: FunctionSelectItem$1,
          selectedItem: newSelectedItem
        });
      }, [dispatch]);
      var setInputValue = react.useCallback(function(newInputValue) {
        dispatch({
          type: FunctionSetInputValue$1,
          inputValue: newInputValue
        });
      }, [dispatch]);
      var reset = react.useCallback(function() {
        dispatch({
          type: FunctionReset$1
        });
      }, [dispatch]);
      return {
        getItemProps,
        getLabelProps,
        getMenuProps,
        getInputProps,
        getComboboxProps,
        getToggleButtonProps,
        toggleMenu,
        openMenu,
        closeMenu,
        setHighlightedIndex,
        setInputValue,
        selectItem,
        reset,
        highlightedIndex,
        isOpen,
        selectedItem,
        inputValue
      };
    }
    var defaultStateValues = {
      activeIndex: -1,
      selectedItems: []
    };
    function getInitialValue$1(props, propKey) {
      return getInitialValue(props, propKey, defaultStateValues);
    }
    function getDefaultValue$1(props, propKey) {
      return getDefaultValue(props, propKey, defaultStateValues);
    }
    function getInitialState$2(props) {
      var activeIndex = getInitialValue$1(props, "activeIndex");
      var selectedItems = getInitialValue$1(props, "selectedItems");
      return {
        activeIndex,
        selectedItems
      };
    }
    function isKeyDownOperationPermitted(event) {
      if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
        return false;
      }
      var element = event.target;
      if (element instanceof HTMLInputElement && element.value !== "" && (element.selectionStart !== 0 || element.selectionEnd !== 0)) {
        return false;
      }
      return true;
    }
    function getA11yRemovalMessage(selectionParameters) {
      var removedSelectedItem = selectionParameters.removedSelectedItem, itemToStringLocal = selectionParameters.itemToString;
      return itemToStringLocal(removedSelectedItem) + " has been removed.";
    }
    var propTypes$2 = {
      selectedItems: PropTypes.array,
      initialSelectedItems: PropTypes.array,
      defaultSelectedItems: PropTypes.array,
      itemToString: PropTypes.func,
      getA11yRemovalMessage: PropTypes.func,
      stateReducer: PropTypes.func,
      activeIndex: PropTypes.number,
      initialActiveIndex: PropTypes.number,
      defaultActiveIndex: PropTypes.number,
      onActiveIndexChange: PropTypes.func,
      onSelectedItemsChange: PropTypes.func,
      keyNavigationNext: PropTypes.string,
      keyNavigationPrevious: PropTypes.string,
      environment: PropTypes.shape({
        addEventListener: PropTypes.func,
        removeEventListener: PropTypes.func,
        document: PropTypes.shape({
          getElementById: PropTypes.func,
          activeElement: PropTypes.any,
          body: PropTypes.any
        })
      })
    };
    var defaultProps$3 = {
      itemToString: defaultProps.itemToString,
      stateReducer: defaultProps.stateReducer,
      environment: defaultProps.environment,
      getA11yRemovalMessage,
      keyNavigationNext: "ArrowRight",
      keyNavigationPrevious: "ArrowLeft"
    };
    var SelectedItemClick = "__selected_item_click__";
    var SelectedItemKeyDownDelete = "__selected_item_keydown_delete__";
    var SelectedItemKeyDownBackspace = "__selected_item_keydown_backspace__";
    var SelectedItemKeyDownNavigationNext = "__selected_item_keydown_navigation_next__";
    var SelectedItemKeyDownNavigationPrevious = "__selected_item_keydown_navigation_previous__";
    var DropdownKeyDownNavigationPrevious = "__dropdown_keydown_navigation_previous__";
    var DropdownKeyDownBackspace = "__dropdown_keydown_backspace__";
    var DropdownClick = "__dropdown_click__";
    var FunctionAddSelectedItem = "__function_add_selected_item__";
    var FunctionRemoveSelectedItem = "__function_remove_selected_item__";
    var FunctionSetSelectedItems = "__function_set_selected_items__";
    var FunctionSetActiveIndex = "__function_set_active_index__";
    var FunctionReset$2 = "__function_reset__";
    var stateChangeTypes$3 = Object.freeze({
      __proto__: null,
      SelectedItemClick,
      SelectedItemKeyDownDelete,
      SelectedItemKeyDownBackspace,
      SelectedItemKeyDownNavigationNext,
      SelectedItemKeyDownNavigationPrevious,
      DropdownKeyDownNavigationPrevious,
      DropdownKeyDownBackspace,
      DropdownClick,
      FunctionAddSelectedItem,
      FunctionRemoveSelectedItem,
      FunctionSetSelectedItems,
      FunctionSetActiveIndex,
      FunctionReset: FunctionReset$2
    });
    function downshiftMultipleSelectionReducer(state, action) {
      var type = action.type, index = action.index, props = action.props, selectedItem = action.selectedItem;
      var activeIndex = state.activeIndex, selectedItems = state.selectedItems;
      var changes;
      switch (type) {
        case SelectedItemClick:
          changes = {
            activeIndex: index
          };
          break;
        case SelectedItemKeyDownNavigationPrevious:
          changes = {
            activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1
          };
          break;
        case SelectedItemKeyDownNavigationNext:
          changes = {
            activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1
          };
          break;
        case SelectedItemKeyDownBackspace:
        case SelectedItemKeyDownDelete: {
          var newActiveIndex = activeIndex;
          if (selectedItems.length === 1) {
            newActiveIndex = -1;
          } else if (activeIndex === selectedItems.length - 1) {
            newActiveIndex = selectedItems.length - 2;
          }
          changes = _extends({
            selectedItems: [].concat(selectedItems.slice(0, activeIndex), selectedItems.slice(activeIndex + 1))
          }, {
            activeIndex: newActiveIndex
          });
          break;
        }
        case DropdownKeyDownNavigationPrevious:
          changes = {
            activeIndex: selectedItems.length - 1
          };
          break;
        case DropdownKeyDownBackspace:
          changes = {
            selectedItems: selectedItems.slice(0, selectedItems.length - 1)
          };
          break;
        case FunctionAddSelectedItem:
          changes = {
            selectedItems: [].concat(selectedItems, [selectedItem])
          };
          break;
        case DropdownClick:
          changes = {
            activeIndex: -1
          };
          break;
        case FunctionRemoveSelectedItem: {
          var _newActiveIndex = activeIndex;
          var selectedItemIndex = selectedItems.indexOf(selectedItem);
          if (selectedItems.length === 1) {
            _newActiveIndex = -1;
          } else if (selectedItemIndex === selectedItems.length - 1) {
            _newActiveIndex = selectedItems.length - 2;
          }
          changes = _extends({
            selectedItems: [].concat(selectedItems.slice(0, selectedItemIndex), selectedItems.slice(selectedItemIndex + 1))
          }, {
            activeIndex: _newActiveIndex
          });
          break;
        }
        case FunctionSetSelectedItems: {
          var newSelectedItems = action.selectedItems;
          changes = {
            selectedItems: newSelectedItems
          };
          break;
        }
        case FunctionSetActiveIndex: {
          var _newActiveIndex2 = action.activeIndex;
          changes = {
            activeIndex: _newActiveIndex2
          };
          break;
        }
        case FunctionReset$2:
          changes = {
            activeIndex: getDefaultValue$1(props, "activeIndex"),
            selectedItems: getDefaultValue$1(props, "selectedItems")
          };
          break;
        default:
          throw new Error("Reducer called without proper action type.");
      }
      return _extends(_extends({}, state), changes);
    }
    useMultipleSelection.stateChangeTypes = stateChangeTypes$3;
    function useMultipleSelection(userProps) {
      if (userProps === void 0) {
        userProps = {};
      }
      var props = _extends(_extends({}, defaultProps$3), userProps);
      var getA11yRemovalMessage2 = props.getA11yRemovalMessage, itemToString2 = props.itemToString, environment = props.environment, keyNavigationNext = props.keyNavigationNext, keyNavigationPrevious = props.keyNavigationPrevious;
      var _useControlledReducer = useControlledReducer(downshiftMultipleSelectionReducer, getInitialState$2(props), props), state = _useControlledReducer[0], dispatch = _useControlledReducer[1];
      var activeIndex = state.activeIndex, selectedItems = state.selectedItems;
      var isInitialMountRef = react.useRef(true);
      var dropdownRef = react.useRef(null);
      var previousSelectedItemsRef = react.useRef(selectedItems);
      var selectedItemRefs = react.useRef();
      selectedItemRefs.current = [];
      var prevPropsRef = react.useRef(props);
      var latest = useLatestRef({
        state,
        props
      });
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        if (selectedItems.length < previousSelectedItemsRef.current.length) {
          var removedSelectedItem = previousSelectedItemsRef.current.find(function(item) {
            return selectedItems.indexOf(item) < 0;
          });
          setStatus(getA11yRemovalMessage2({
            itemToString: itemToString2,
            resultCount: selectedItems.length,
            removedSelectedItem,
            activeIndex,
            activeSelectedItem: selectedItems[activeIndex]
          }), environment.document);
        }
        previousSelectedItemsRef.current = selectedItems;
      }, [selectedItems.length]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        if (activeIndex === -1 && dropdownRef.current) {
          dropdownRef.current.focus();
        } else if (selectedItemRefs.current[activeIndex]) {
          selectedItemRefs.current[activeIndex].focus();
        }
      }, [activeIndex]);
      react.useEffect(function() {
        if (isInitialMountRef.current) {
          return;
        }
        validateControlledUnchanged(state, prevPropsRef.current, props);
        prevPropsRef.current = props;
      }, [state, props]);
      var setGetterPropCallInfo = useGetterPropsCalledChecker("getDropdownProps");
      react.useEffect(function() {
        isInitialMountRef.current = false;
      }, []);
      var selectedItemKeyDownHandlers = react.useMemo(function() {
        var _ref;
        return _ref = {}, _ref[keyNavigationPrevious] = function() {
          dispatch({
            type: SelectedItemKeyDownNavigationPrevious
          });
        }, _ref[keyNavigationNext] = function() {
          dispatch({
            type: SelectedItemKeyDownNavigationNext
          });
        }, _ref.Delete = function Delete() {
          dispatch({
            type: SelectedItemKeyDownDelete
          });
        }, _ref.Backspace = function Backspace() {
          dispatch({
            type: SelectedItemKeyDownBackspace
          });
        }, _ref;
      }, [dispatch, keyNavigationNext, keyNavigationPrevious]);
      var dropdownKeyDownHandlers = react.useMemo(function() {
        var _ref2;
        return _ref2 = {}, _ref2[keyNavigationPrevious] = function(event) {
          if (isKeyDownOperationPermitted(event)) {
            dispatch({
              type: DropdownKeyDownNavigationPrevious
            });
          }
        }, _ref2.Backspace = function Backspace(event) {
          if (isKeyDownOperationPermitted(event)) {
            dispatch({
              type: DropdownKeyDownBackspace
            });
          }
        }, _ref2;
      }, [dispatch, keyNavigationPrevious]);
      var getSelectedItemProps = react.useCallback(function(_temp) {
        var _extends2;
        var _ref3 = _temp === void 0 ? {} : _temp, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, ref = _ref3.ref, onClick = _ref3.onClick, onKeyDown = _ref3.onKeyDown, selectedItem = _ref3.selectedItem, index = _ref3.index, rest = _objectWithoutPropertiesLoose(_ref3, ["refKey", "ref", "onClick", "onKeyDown", "selectedItem", "index"]);
        var latestState = latest.current.state;
        var itemIndex = getItemIndex(index, selectedItem, latestState.selectedItems);
        if (itemIndex < 0) {
          throw new Error("Pass either selectedItem or index in getSelectedItemProps!");
        }
        return _extends((_extends2 = {}, _extends2[refKey] = handleRefs(ref, function(selectedItemNode) {
          if (selectedItemNode) {
            selectedItemRefs.current.push(selectedItemNode);
          }
        }), _extends2.tabIndex = index === latestState.activeIndex ? 0 : -1, _extends2.onClick = callAllEventHandlers(onClick, function selectedItemHandleClick() {
          dispatch({
            type: SelectedItemClick,
            index
          });
        }), _extends2.onKeyDown = callAllEventHandlers(onKeyDown, function selectedItemHandleKeyDown(event) {
          var key = normalizeArrowKey(event);
          if (key && selectedItemKeyDownHandlers[key]) {
            selectedItemKeyDownHandlers[key](event);
          }
        }), _extends2), rest);
      }, [dispatch, latest, selectedItemKeyDownHandlers]);
      var getDropdownProps = react.useCallback(function(_temp2, _temp3) {
        var _extends3;
        var _ref4 = _temp2 === void 0 ? {} : _temp2, _ref4$refKey = _ref4.refKey, refKey = _ref4$refKey === void 0 ? "ref" : _ref4$refKey, ref = _ref4.ref, onKeyDown = _ref4.onKeyDown, onClick = _ref4.onClick, _ref4$preventKeyActio = _ref4.preventKeyAction, preventKeyAction = _ref4$preventKeyActio === void 0 ? false : _ref4$preventKeyActio, rest = _objectWithoutPropertiesLoose(_ref4, ["refKey", "ref", "onKeyDown", "onClick", "preventKeyAction"]);
        var _ref5 = _temp3 === void 0 ? {} : _temp3, _ref5$suppressRefErro = _ref5.suppressRefError, suppressRefError = _ref5$suppressRefErro === void 0 ? false : _ref5$suppressRefErro;
        setGetterPropCallInfo("getDropdownProps", suppressRefError, refKey, dropdownRef);
        return _extends(_extends((_extends3 = {}, _extends3[refKey] = handleRefs(ref, function(dropdownNode) {
          if (dropdownNode) {
            dropdownRef.current = dropdownNode;
          }
        }), _extends3), !preventKeyAction && {
          onKeyDown: callAllEventHandlers(onKeyDown, function dropdownHandleKeyDown(event) {
            var key = normalizeArrowKey(event);
            if (key && dropdownKeyDownHandlers[key]) {
              dropdownKeyDownHandlers[key](event);
            }
          }),
          onClick: callAllEventHandlers(onClick, function dropdownHandleClick() {
            dispatch({
              type: DropdownClick
            });
          })
        }), rest);
      }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]);
      var addSelectedItem = react.useCallback(function(selectedItem) {
        dispatch({
          type: FunctionAddSelectedItem,
          selectedItem
        });
      }, [dispatch]);
      var removeSelectedItem = react.useCallback(function(selectedItem) {
        dispatch({
          type: FunctionRemoveSelectedItem,
          selectedItem
        });
      }, [dispatch]);
      var setSelectedItems = react.useCallback(function(newSelectedItems) {
        dispatch({
          type: FunctionSetSelectedItems,
          selectedItems: newSelectedItems
        });
      }, [dispatch]);
      var setActiveIndex = react.useCallback(function(newActiveIndex) {
        dispatch({
          type: FunctionSetActiveIndex,
          activeIndex: newActiveIndex
        });
      }, [dispatch]);
      var reset = react.useCallback(function() {
        dispatch({
          type: FunctionReset$2
        });
      }, [dispatch]);
      return {
        getSelectedItemProps,
        getDropdownProps,
        addSelectedItem,
        removeSelectedItem,
        setSelectedItems,
        setActiveIndex,
        reset,
        selectedItems,
        activeIndex
      };
    }
    exports.default = Downshift;
    exports.resetIdCounter = resetIdCounter;
    exports.useCombobox = useCombobox;
    exports.useMultipleSelection = useMultipleSelection;
    exports.useSelect = useSelect;
  },

  54(require, exports, module) {
    // node_modules/lodash/lodash.js
    ;
    (function() {
      var undefined;
      var VERSION = "4.17.15";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9.007199254740991e+15, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [["ary", WRAP_ARY_FLAG], ["bind", WRAP_BIND_FLAG], ["bindKey", WRAP_BIND_KEY_FLAG], ["curry", WRAP_CURRY_FLAG], ["curryRight", WRAP_CURRY_RIGHT_FLAG], ["flip", WRAP_FLIP_FLAG], ["partial", WRAP_PARTIAL_FLAG], ["partialRight", WRAP_PARTIAL_RIGHT_FLAG], ["rearg", WRAP_REARG_FLAG]];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")", rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")", rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower, rsUpper + "+" + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        À: "A",
        Á: "A",
        Â: "A",
        Ã: "A",
        Ä: "A",
        Å: "A",
        à: "a",
        á: "a",
        â: "a",
        ã: "a",
        ä: "a",
        å: "a",
        Ç: "C",
        ç: "c",
        Ð: "D",
        ð: "d",
        È: "E",
        É: "E",
        Ê: "E",
        Ë: "E",
        è: "e",
        é: "e",
        ê: "e",
        ë: "e",
        Ì: "I",
        Í: "I",
        Î: "I",
        Ï: "I",
        ì: "i",
        í: "i",
        î: "i",
        ï: "i",
        Ñ: "N",
        ñ: "n",
        Ò: "O",
        Ó: "O",
        Ô: "O",
        Õ: "O",
        Ö: "O",
        Ø: "O",
        ò: "o",
        ó: "o",
        ô: "o",
        õ: "o",
        ö: "o",
        ø: "o",
        Ù: "U",
        Ú: "U",
        Û: "U",
        Ü: "U",
        ù: "u",
        ú: "u",
        û: "u",
        ü: "u",
        Ý: "Y",
        ý: "y",
        ÿ: "y",
        Æ: "Ae",
        æ: "ae",
        Þ: "Th",
        þ: "th",
        ß: "ss",
        Ā: "A",
        Ă: "A",
        Ą: "A",
        ā: "a",
        ă: "a",
        ą: "a",
        Ć: "C",
        Ĉ: "C",
        Ċ: "C",
        Č: "C",
        ć: "c",
        ĉ: "c",
        ċ: "c",
        č: "c",
        Ď: "D",
        Đ: "D",
        ď: "d",
        đ: "d",
        Ē: "E",
        Ĕ: "E",
        Ė: "E",
        Ę: "E",
        Ě: "E",
        ē: "e",
        ĕ: "e",
        ė: "e",
        ę: "e",
        ě: "e",
        Ĝ: "G",
        Ğ: "G",
        Ġ: "G",
        Ģ: "G",
        ĝ: "g",
        ğ: "g",
        ġ: "g",
        ģ: "g",
        Ĥ: "H",
        Ħ: "H",
        ĥ: "h",
        ħ: "h",
        Ĩ: "I",
        Ī: "I",
        Ĭ: "I",
        Į: "I",
        İ: "I",
        ĩ: "i",
        ī: "i",
        ĭ: "i",
        į: "i",
        ı: "i",
        Ĵ: "J",
        ĵ: "j",
        Ķ: "K",
        ķ: "k",
        ĸ: "k",
        Ĺ: "L",
        Ļ: "L",
        Ľ: "L",
        Ŀ: "L",
        Ł: "L",
        ĺ: "l",
        ļ: "l",
        ľ: "l",
        ŀ: "l",
        ł: "l",
        Ń: "N",
        Ņ: "N",
        Ň: "N",
        Ŋ: "N",
        ń: "n",
        ņ: "n",
        ň: "n",
        ŋ: "n",
        Ō: "O",
        Ŏ: "O",
        Ő: "O",
        ō: "o",
        ŏ: "o",
        ő: "o",
        Ŕ: "R",
        Ŗ: "R",
        Ř: "R",
        ŕ: "r",
        ŗ: "r",
        ř: "r",
        Ś: "S",
        Ŝ: "S",
        Ş: "S",
        Š: "S",
        ś: "s",
        ŝ: "s",
        ş: "s",
        š: "s",
        Ţ: "T",
        Ť: "T",
        Ŧ: "T",
        ţ: "t",
        ť: "t",
        ŧ: "t",
        Ũ: "U",
        Ū: "U",
        Ŭ: "U",
        Ů: "U",
        Ű: "U",
        Ų: "U",
        ũ: "u",
        ū: "u",
        ŭ: "u",
        ů: "u",
        ű: "u",
        ų: "u",
        Ŵ: "W",
        ŵ: "w",
        Ŷ: "Y",
        ŷ: "y",
        Ÿ: "Y",
        Ź: "Z",
        Ż: "Z",
        Ž: "Z",
        ź: "z",
        ż: "z",
        ž: "z",
        Ĳ: "IJ",
        ĳ: "ij",
        Œ: "Oe",
        œ: "oe",
        ŉ: "'n",
        ſ: "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined) {
            result = result === undefined ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date = context.Date, Error = context.Error, Function2 = context.Function, Math = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String = context.String, TypeError = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map = getNative(context, "Map"), Promise = getNative(context, "Promise"), Set = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined;
        }
        lodash.templateSettings = {
          escape: reEscape,
          evaluate: reEvaluate,
          interpolate: reInterpolate,
          variable: "",
          imports: {
            _: lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map || ListCache)(),
            string: new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() {
            func.apply(undefined, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
              if (newValue === undefined) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
          var isCommon = newValue === undefined;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined;
        }
        function baseOrderBy(collection, iteratees, orders) {
          var index = -1;
          iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return {
              criteria,
              index: ++index,
              value
            };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined;
              if (newValue === undefined) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            configurable: true,
            enumerable: false,
            value: constant(string),
            writable: true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          value = iteratee2(value);
          var low = 0, high = array == null ? 0 : array.length, valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
            if (newValue === undefined) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined && other === undefined) {
              return defaultValue;
            }
            if (value !== undefined) {
              result2 = value;
            }
            if (other !== undefined) {
              if (result2 === undefined) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined;
            }
            start = toFinite(start);
            if (end === undefined) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary2, arity];
          var result2 = wrapFunc.apply(undefined, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined;
          }
          ary2 = ary2 === undefined ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined;
          }
          var data = isBindKey ? undefined : getData(func);
          var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var stacked = stack.get(array);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var stacked = stack.get(object);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return {
            start,
            end
          };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined;
          return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            func: thru,
            args: [interceptor],
            thisArg: undefined
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
          return {
            done,
            value
          };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              func: thru,
              args: [reverse],
              thisArg: undefined
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined;
          }
          function flush() {
            return timerId === undefined ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start === undefined ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            leading,
            maxWait: wait,
            trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined;
          var result2 = customizer ? customizer(value, other) : undefined;
          return result2 === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined, customDefaultsMerge);
          return apply(mergeWith, undefined, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined : baseGet(object, path);
          return result2 === undefined ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined;
          }
          while (++index < length) {
            var value = object == null ? undefined : object[toKey(path[index])];
            if (value === undefined) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined) {
            upper = lower;
            lower = undefined;
          }
          if (upper !== undefined) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined;
          }
          if (floating === undefined) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined;
            }
          }
          if (lower === undefined && upper === undefined) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined;
          }
          limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/[\r\n]/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrim, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimEnd, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined : pattern;
          if (pattern === undefined) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined, args);
          } catch (e) {
            return isError(e) ? e : new Error(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({
                    func,
                    args: arguments,
                    thisArg: object
                  });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), {
          chain: false
        });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                size: nativeMin(n, MAX_ARRAY_LENGTH),
                type: methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              iteratee: getIteratee(iteratee2, 3),
              type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined
              });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({
              name: methodName,
              func: lodashFunc
            });
          }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
          name: "wrapper",
          func: undefined
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(this);
  },

  24(require, exports, module) {
    // node_modules/axios/lib/helpers/bind.js
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  },

  33(require, exports, module) {
    // node_modules/axios/lib/utils.js
    "use strict";
    var bind = require(24 /* ./helpers/bind */);
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.replace(/^\s*/, "").replace(/\s*$/, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") {
          result[key] = merge(result[key], val);
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function deepMerge() {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") {
          result[key] = deepMerge(result[key], val);
        } else if (typeof val === "object") {
          result[key] = deepMerge({}, val);
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      deepMerge,
      extend,
      trim
    };
  },

  25(require, exports, module) {
    // node_modules/axios/lib/helpers/buildURL.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    function encode(val) {
      return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  },

  15(require, exports, module) {
    // node_modules/axios/lib/core/InterceptorManager.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  },

  22(require, exports, module) {
    // node_modules/axios/lib/core/transformData.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    module.exports = function transformData(data, headers, fns) {
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };
  },

  13(require, exports, module) {
    // node_modules/axios/lib/cancel/isCancel.js
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  },

  30(require, exports, module) {
    // node_modules/axios/lib/helpers/normalizeHeaderName.js
    "use strict";
    var utils = require(33 /* ../utils */);
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  },

  19(require, exports, module) {
    // node_modules/axios/lib/core/enhanceError.js
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  },

  17(require, exports, module) {
    // node_modules/axios/lib/core/createError.js
    "use strict";
    var enhanceError = require(19 /* ./enhanceError */);
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  },

  21(require, exports, module) {
    // node_modules/axios/lib/core/settle.js
    "use strict";
    var createError = require(17 /* ./createError */);
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  },

  28(require, exports, module) {
    // node_modules/axios/lib/helpers/isAbsoluteURL.js
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  },

  26(require, exports, module) {
    // node_modules/axios/lib/helpers/combineURLs.js
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  },

  16(require, exports, module) {
    // node_modules/axios/lib/core/buildFullPath.js
    "use strict";
    var isAbsoluteURL = require(28 /* ../helpers/isAbsoluteURL */);
    var combineURLs = require(26 /* ../helpers/combineURLs */);
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  },

  31(require, exports, module) {
    // node_modules/axios/lib/helpers/parseHeaders.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    var ignoreDuplicateOf = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  },

  29(require, exports, module) {
    // node_modules/axios/lib/helpers/isURLSameOrigin.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  },

  27(require, exports, module) {
    // node_modules/axios/lib/helpers/cookies.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 86400000);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  },

  9(require, exports, module) {
    // node_modules/axios/lib/adapters/xhr.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    var settle = require(21 /* ./../core/settle */);
    var buildURL = require(25 /* ./../helpers/buildURL */);
    var buildFullPath = require(16 /* ../core/buildFullPath */);
    var parseHeaders = require(31 /* ./../helpers/parseHeaders */);
    var isURLSameOrigin = require(29 /* ./../helpers/isURLSameOrigin */);
    var createError = require(17 /* ../core/createError */);
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password || "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        };
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var cookies = require(27 /* ./../helpers/cookies */);
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            if (config.responseType !== "json") {
              throw e;
            }
          }
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (requestData === void 0) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  },

  23(require, exports, module) {
    // node_modules/axios/lib/defaults.js
    "use strict";
    var utils = require(33 /* ./utils */);
    var normalizeHeaderName = require(30 /* ./helpers/normalizeHeaderName */);
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require(9 /* ./adapters/xhr */);
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require(9 /* ./adapters/http */);
      }
      return adapter;
    }
    var defaults = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, "application/json;charset=utf-8");
          return JSON.stringify(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        if (typeof data === "string") {
          try {
            data = JSON.parse(data);
          } catch (e) {
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        Accept: "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  },

  18(require, exports, module) {
    // node_modules/axios/lib/core/dispatchRequest.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    var transformData = require(22 /* ./transformData */);
    var isCancel = require(13 /* ../cancel/isCancel */);
    var defaults = require(23 /* ../defaults */);
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData(config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  },

  20(require, exports, module) {
    // node_modules/axios/lib/core/mergeConfig.js
    "use strict";
    var utils = require(33 /* ../utils */);
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "params", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy"];
      var defaultToConfig2Keys = ["baseURL", "url", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "maxContentLength", "validateStatus", "maxRedirects", "httpAgent", "httpsAgent", "cancelToken", "socketPath"];
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (typeof config2[prop] !== "undefined") {
          config[prop] = config2[prop];
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
        if (utils.isObject(config2[prop])) {
          config[prop] = utils.deepMerge(config1[prop], config2[prop]);
        } else if (typeof config2[prop] !== "undefined") {
          config[prop] = config2[prop];
        } else if (utils.isObject(config1[prop])) {
          config[prop] = utils.deepMerge(config1[prop]);
        } else if (typeof config1[prop] !== "undefined") {
          config[prop] = config1[prop];
        }
      });
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (typeof config2[prop] !== "undefined") {
          config[prop] = config2[prop];
        } else if (typeof config1[prop] !== "undefined") {
          config[prop] = config1[prop];
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys);
      var otherKeys = Object.keys(config2).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
        if (typeof config2[prop] !== "undefined") {
          config[prop] = config2[prop];
        } else if (typeof config1[prop] !== "undefined") {
          config[prop] = config1[prop];
        }
      });
      return config;
    };
  },

  14(require, exports, module) {
    // node_modules/axios/lib/core/Axios.js
    "use strict";
    var utils = require(33 /* ./../utils */);
    var buildURL = require(25 /* ../helpers/buildURL */);
    var InterceptorManager = require(15 /* ./InterceptorManager */);
    var dispatchRequest = require(18 /* ./dispatchRequest */);
    var mergeConfig = require(20 /* ./mergeConfig */);
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var chain = [dispatchRequest, void 0];
      var promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(utils.merge(config || {}, {
          method,
          url
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(utils.merge(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  },

  11(require, exports, module) {
    // node_modules/axios/lib/cancel/Cancel.js
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  },

  12(require, exports, module) {
    // node_modules/axios/lib/cancel/CancelToken.js
    "use strict";
    var Cancel = require(11 /* ./Cancel */);
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  },

  32(require, exports, module) {
    // node_modules/axios/lib/helpers/spread.js
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  },

  10(require, exports, module) {
    // node_modules/axios/lib/axios.js
    "use strict";
    var utils = require(33 /* ./utils */);
    var bind = require(24 /* ./helpers/bind */);
    var Axios = require(14 /* ./core/Axios */);
    var mergeConfig = require(20 /* ./core/mergeConfig */);
    var defaults = require(23 /* ./defaults */);
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios.defaults, instanceConfig));
    };
    axios.Cancel = require(11 /* ./cancel/Cancel */);
    axios.CancelToken = require(12 /* ./cancel/CancelToken */);
    axios.isCancel = require(13 /* ./cancel/isCancel */);
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require(32 /* ./helpers/spread */);
    module.exports = axios;
    module.exports.default = axios;
  },

  8(require, exports, module) {
    // node_modules/axios/index.js
    module.exports = require(10 /* ./lib/axios */);
  },

  39(require, exports, module) {
    // node_modules/fuse.js/dist/fuse.common.js
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function isArray(value) {
      return !Array.isArray ? Object.prototype.toString.call(value) === "[object Array]" : Array.isArray(value);
    }
    var INFINITY = 1 / 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function isString(value) {
      return typeof value === "string";
    }
    function isNumber(value) {
      return typeof value === "number";
    }
    function isObject(value) {
      return _typeof(value) === "object";
    }
    function isDefined(value) {
      return value !== void 0 && value !== null;
    }
    function isBlank(value) {
      return !value.trim().length;
    }
    var EXTENDED_SEARCH_UNAVAILABLE = "Extended search is not available";
    var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
    var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = function LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY2(key) {
      return "Invalid value for key ".concat(key);
    };
    var PATTERN_LENGTH_TOO_LARGE = function PATTERN_LENGTH_TOO_LARGE2(max) {
      return "Pattern length exceeds max of ".concat(max, ".");
    };
    var MISSING_KEY_PROPERTY = function MISSING_KEY_PROPERTY2(name) {
      return "Missing ".concat(name, " property in key");
    };
    var INVALID_KEY_WEIGHT_VALUE = function INVALID_KEY_WEIGHT_VALUE2(key) {
      return "Property 'weight' in key '".concat(key, "' must be a positive integer");
    };
    var hasOwn = Object.prototype.hasOwnProperty;
    var KeyStore = function() {
      function KeyStore2(keys) {
        var _this = this;
        _classCallCheck(this, KeyStore2);
        this._keys = {};
        this._keyNames = [];
        var totalWeight = 0;
        keys.forEach(function(key) {
          var keyName;
          var weight = 1;
          if (isString(key)) {
            keyName = key;
          } else {
            if (!hasOwn.call(key, "name")) {
              throw new Error(MISSING_KEY_PROPERTY("name"));
            }
            keyName = key.name;
            if (hasOwn.call(key, "weight")) {
              weight = key.weight;
              if (weight <= 0) {
                throw new Error(INVALID_KEY_WEIGHT_VALUE(keyName));
              }
            }
          }
          _this._keyNames.push(keyName);
          _this._keys[keyName] = {
            weight
          };
          totalWeight += weight;
        });
        this._keyNames.forEach(function(key) {
          _this._keys[key].weight /= totalWeight;
        });
      }
      _createClass(KeyStore2, [{
        key: "get",
        value: function get2(key, name) {
          return this._keys[key] && this._keys[key][name];
        }
      }, {
        key: "keys",
        value: function keys() {
          return this._keyNames;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return JSON.stringify(this._keys);
        }
      }]);
      return KeyStore2;
    }();
    function get(obj, path) {
      var list = [];
      var arr = false;
      var deepGet = function deepGet2(obj2, path2) {
        if (!path2) {
          list.push(obj2);
        } else {
          var dotIndex = path2.indexOf(".");
          var key = path2;
          var remaining = null;
          if (dotIndex !== -1) {
            key = path2.slice(0, dotIndex);
            remaining = path2.slice(dotIndex + 1);
          }
          var value = obj2[key];
          if (!isDefined(value)) {
            return;
          }
          if (!remaining && (isString(value) || isNumber(value))) {
            list.push(toString(value));
          } else if (isArray(value)) {
            arr = true;
            for (var i = 0, len = value.length; i < len; i += 1) {
              deepGet2(value[i], remaining);
            }
          } else if (remaining) {
            deepGet2(value, remaining);
          }
        }
      };
      deepGet(obj, path);
      return arr ? list : list[0];
    }
    var MatchOptions = {
      includeMatches: false,
      findAllMatches: false,
      minMatchCharLength: 1
    };
    var BasicOptions = {
      isCaseSensitive: false,
      includeScore: false,
      keys: [],
      shouldSort: true,
      sortFn: function sortFn(a, b) {
        return a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1;
      }
    };
    var FuzzyOptions = {
      location: 0,
      threshold: 0.6,
      distance: 100
    };
    var AdvancedOptions = {
      useExtendedSearch: false,
      getFn: get,
      ignoreLocation: false,
      ignoreFieldNorm: false
    };
    var Config = _objectSpread2({}, BasicOptions, {}, MatchOptions, {}, FuzzyOptions, {}, AdvancedOptions);
    var SPACE = /[^ ]+/g;
    function norm() {
      var mantissa = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;
      var cache = new Map();
      return {
        get: function get2(value) {
          var numTokens = value.match(SPACE).length;
          if (cache.has(numTokens)) {
            return cache.get(numTokens);
          }
          var n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));
          cache.set(numTokens, n);
          return n;
        },
        clear: function clear() {
          cache.clear();
        }
      };
    }
    var FuseIndex = function() {
      function FuseIndex2() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$getFn = _ref.getFn, getFn = _ref$getFn === void 0 ? Config.getFn : _ref$getFn;
        _classCallCheck(this, FuseIndex2);
        this.norm = norm(3);
        this.getFn = getFn;
        this.isCreated = false;
        this.setIndexRecords();
      }
      _createClass(FuseIndex2, [{
        key: "setSources",
        value: function setSources() {
          var docs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          this.docs = docs;
        }
      }, {
        key: "setIndexRecords",
        value: function setIndexRecords() {
          var records = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          this.records = records;
        }
      }, {
        key: "setKeys",
        value: function setKeys() {
          var keys = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          this.keys = keys;
        }
      }, {
        key: "create",
        value: function create() {
          var _this = this;
          if (this.isCreated || !this.docs.length) {
            return;
          }
          this.isCreated = true;
          if (isString(this.docs[0])) {
            this.docs.forEach(function(doc, docIndex) {
              _this._addString(doc, docIndex);
            });
          } else {
            this.docs.forEach(function(doc, docIndex) {
              _this._addObject(doc, docIndex);
            });
          }
          this.norm.clear();
        }
      }, {
        key: "add",
        value: function add(doc) {
          var idx = this.size();
          if (isString(doc)) {
            this._addString(doc, idx);
          } else {
            this._addObject(doc, idx);
          }
        }
      }, {
        key: "removeAt",
        value: function removeAt(idx) {
          this.records.splice(idx, 1);
          for (var i = idx, len = this.size(); i < len; i += 1) {
            this.records[i].i -= 1;
          }
        }
      }, {
        key: "size",
        value: function size() {
          return this.records.length;
        }
      }, {
        key: "_addString",
        value: function _addString(doc, docIndex) {
          if (!isDefined(doc) || isBlank(doc)) {
            return;
          }
          var record = {
            v: doc,
            i: docIndex,
            n: this.norm.get(doc)
          };
          this.records.push(record);
        }
      }, {
        key: "_addObject",
        value: function _addObject(doc, docIndex) {
          var _this2 = this;
          var record = {
            i: docIndex,
            $: {}
          };
          this.keys.forEach(function(key, keyIndex) {
            var value = _this2.getFn(doc, key);
            if (!isDefined(value)) {
              return;
            }
            if (isArray(value)) {
              (function() {
                var subRecords = [];
                var stack = [{
                  nestedArrIndex: -1,
                  value
                }];
                while (stack.length) {
                  var _stack$pop = stack.pop(), nestedArrIndex = _stack$pop.nestedArrIndex, _value = _stack$pop.value;
                  if (!isDefined(_value)) {
                    continue;
                  }
                  if (isString(_value) && !isBlank(_value)) {
                    var subRecord2 = {
                      v: _value,
                      i: nestedArrIndex,
                      n: _this2.norm.get(_value)
                    };
                    subRecords.push(subRecord2);
                  } else if (isArray(_value)) {
                    _value.forEach(function(item, k) {
                      stack.push({
                        nestedArrIndex: k,
                        value: item
                      });
                    });
                  }
                }
                record.$[keyIndex] = subRecords;
              })();
            } else if (!isBlank(value)) {
              var subRecord = {
                v: value,
                n: _this2.norm.get(value)
              };
              record.$[keyIndex] = subRecord;
            }
          });
          this.records.push(record);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return {
            keys: this.keys,
            records: this.records
          };
        }
      }]);
      return FuseIndex2;
    }();
    function createIndex(keys, docs) {
      var _ref2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref2$getFn = _ref2.getFn, getFn = _ref2$getFn === void 0 ? Config.getFn : _ref2$getFn;
      var myIndex = new FuseIndex({
        getFn
      });
      var keyStore = new KeyStore(keys);
      myIndex.setKeys(keyStore.keys());
      myIndex.setSources(docs);
      myIndex.create();
      return myIndex;
    }
    function parseIndex(data) {
      var _ref3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref3$getFn = _ref3.getFn, getFn = _ref3$getFn === void 0 ? Config.getFn : _ref3$getFn;
      var keys = data.keys, records = data.records;
      var myIndex = new FuseIndex({
        getFn
      });
      myIndex.setKeys(keys);
      myIndex.setIndexRecords(records);
      return myIndex;
    }
    function transformMatches(result, data) {
      var matches = result.matches;
      data.matches = [];
      if (!isDefined(matches)) {
        return;
      }
      matches.forEach(function(match) {
        if (!isDefined(match.indices) || !match.indices.length) {
          return;
        }
        var indices = match.indices, value = match.value;
        var obj = {
          indices,
          value
        };
        if (match.key) {
          obj.key = match.key;
        }
        if (match.idx > -1) {
          obj.refIndex = match.idx;
        }
        data.matches.push(obj);
      });
    }
    function transformScore(result, data) {
      data.score = result.score;
    }
    function computeScore(pattern) {
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$errors = _ref.errors, errors = _ref$errors === void 0 ? 0 : _ref$errors, _ref$currentLocation = _ref.currentLocation, currentLocation = _ref$currentLocation === void 0 ? 0 : _ref$currentLocation, _ref$expectedLocation = _ref.expectedLocation, expectedLocation = _ref$expectedLocation === void 0 ? 0 : _ref$expectedLocation, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? Config.distance : _ref$distance, _ref$ignoreLocation = _ref.ignoreLocation, ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;
      var accuracy = errors / pattern.length;
      if (ignoreLocation) {
        return accuracy;
      }
      var proximity = Math.abs(expectedLocation - currentLocation);
      if (!distance) {
        return proximity ? 1 : accuracy;
      }
      return accuracy + proximity / distance;
    }
    function convertMaskToIndices() {
      var matchmask = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var minMatchCharLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Config.minMatchCharLength;
      var indices = [];
      var start = -1;
      var end = -1;
      var i = 0;
      for (var len = matchmask.length; i < len; i += 1) {
        var match = matchmask[i];
        if (match && start === -1) {
          start = i;
        } else if (!match && start !== -1) {
          end = i - 1;
          if (end - start + 1 >= minMatchCharLength) {
            indices.push([start, end]);
          }
          start = -1;
        }
      }
      if (matchmask[i - 1] && i - start >= minMatchCharLength) {
        indices.push([start, i - 1]);
      }
      return indices;
    }
    var MAX_BITS = 32;
    function search(text, pattern, patternAlphabet) {
      var _ref = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, _ref$location = _ref.location, location = _ref$location === void 0 ? Config.location : _ref$location, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? Config.distance : _ref$distance, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold, _ref$findAllMatches = _ref.findAllMatches, findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches, _ref$minMatchCharLeng = _ref.minMatchCharLength, minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng, _ref$includeMatches = _ref.includeMatches, includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches, _ref$ignoreLocation = _ref.ignoreLocation, ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;
      if (pattern.length > MAX_BITS) {
        throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
      }
      var patternLen = pattern.length;
      var textLen = text.length;
      var expectedLocation = Math.max(0, Math.min(location, textLen));
      var currentThreshold = threshold;
      var bestLocation = expectedLocation;
      var computeMatches = minMatchCharLength > 1 || includeMatches;
      var matchMask = computeMatches ? Array(textLen) : [];
      var index;
      while ((index = text.indexOf(pattern, bestLocation)) > -1) {
        var score = computeScore(pattern, {
          currentLocation: index,
          expectedLocation,
          distance,
          ignoreLocation
        });
        currentThreshold = Math.min(score, currentThreshold);
        bestLocation = index + patternLen;
        if (computeMatches) {
          var i = 0;
          while (i < patternLen) {
            matchMask[index + i] = 1;
            i += 1;
          }
        }
      }
      bestLocation = -1;
      var lastBitArr = [];
      var finalScore = 1;
      var binMax = patternLen + textLen;
      var mask = 1 << patternLen - 1;
      for (var _i = 0; _i < patternLen; _i += 1) {
        var binMin = 0;
        var binMid = binMax;
        while (binMin < binMid) {
          var _score2 = computeScore(pattern, {
            errors: _i,
            currentLocation: expectedLocation + binMid,
            expectedLocation,
            distance,
            ignoreLocation
          });
          if (_score2 <= currentThreshold) {
            binMin = binMid;
          } else {
            binMax = binMid;
          }
          binMid = Math.floor((binMax - binMin) / 2 + binMin);
        }
        binMax = binMid;
        var start = Math.max(1, expectedLocation - binMid + 1);
        var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;
        var bitArr = Array(finish + 2);
        bitArr[finish + 1] = (1 << _i) - 1;
        for (var j = finish; j >= start; j -= 1) {
          var currentLocation = j - 1;
          var charMatch = patternAlphabet[text.charAt(currentLocation)];
          if (computeMatches) {
            matchMask[currentLocation] = +!!charMatch;
          }
          bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;
          if (_i) {
            bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
          }
          if (bitArr[j] & mask) {
            finalScore = computeScore(pattern, {
              errors: _i,
              currentLocation,
              expectedLocation,
              distance,
              ignoreLocation
            });
            if (finalScore <= currentThreshold) {
              currentThreshold = finalScore;
              bestLocation = currentLocation;
              if (bestLocation <= expectedLocation) {
                break;
              }
              start = Math.max(1, 2 * expectedLocation - bestLocation);
            }
          }
        }
        var _score = computeScore(pattern, {
          errors: _i + 1,
          currentLocation: expectedLocation,
          expectedLocation,
          distance,
          ignoreLocation
        });
        if (_score > currentThreshold) {
          break;
        }
        lastBitArr = bitArr;
      }
      var result = {
        isMatch: bestLocation >= 0,
        score: Math.max(0.001, finalScore)
      };
      if (computeMatches) {
        var indices = convertMaskToIndices(matchMask, minMatchCharLength);
        if (!indices.length) {
          result.isMatch = false;
        } else if (includeMatches) {
          result.indices = indices;
        }
      }
      return result;
    }
    function createPatternAlphabet(pattern) {
      var mask = {};
      for (var i = 0, len = pattern.length; i < len; i += 1) {
        var char = pattern.charAt(i);
        mask[char] = (mask[char] || 0) | 1 << len - i - 1;
      }
      return mask;
    }
    var BitapSearch = function() {
      function BitapSearch2(pattern) {
        var _this = this;
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$location = _ref.location, location = _ref$location === void 0 ? Config.location : _ref$location, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? Config.distance : _ref$distance, _ref$includeMatches = _ref.includeMatches, includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches, _ref$findAllMatches = _ref.findAllMatches, findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches, _ref$minMatchCharLeng = _ref.minMatchCharLength, minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng, _ref$isCaseSensitive = _ref.isCaseSensitive, isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive, _ref$ignoreLocation = _ref.ignoreLocation, ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;
        _classCallCheck(this, BitapSearch2);
        this.options = {
          location,
          threshold,
          distance,
          includeMatches,
          findAllMatches,
          minMatchCharLength,
          isCaseSensitive,
          ignoreLocation
        };
        this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
        this.chunks = [];
        if (!this.pattern.length) {
          return;
        }
        var addChunk = function addChunk2(pattern2, startIndex2) {
          _this.chunks.push({
            pattern: pattern2,
            alphabet: createPatternAlphabet(pattern2),
            startIndex: startIndex2
          });
        };
        var len = this.pattern.length;
        if (len > MAX_BITS) {
          var i = 0;
          var remainder = len % MAX_BITS;
          var end = len - remainder;
          while (i < end) {
            addChunk(this.pattern.substr(i, MAX_BITS), i);
            i += MAX_BITS;
          }
          if (remainder) {
            var startIndex = len - MAX_BITS;
            addChunk(this.pattern.substr(startIndex), startIndex);
          }
        } else {
          addChunk(this.pattern, 0);
        }
      }
      _createClass(BitapSearch2, [{
        key: "searchIn",
        value: function searchIn(text) {
          var _this$options = this.options, isCaseSensitive = _this$options.isCaseSensitive, includeMatches = _this$options.includeMatches;
          if (!isCaseSensitive) {
            text = text.toLowerCase();
          }
          if (this.pattern === text) {
            var _result = {
              isMatch: true,
              score: 0
            };
            if (includeMatches) {
              _result.indices = [[0, text.length - 1]];
            }
            return _result;
          }
          var _this$options2 = this.options, location = _this$options2.location, distance = _this$options2.distance, threshold = _this$options2.threshold, findAllMatches = _this$options2.findAllMatches, minMatchCharLength = _this$options2.minMatchCharLength, ignoreLocation = _this$options2.ignoreLocation;
          var allIndices = [];
          var totalScore = 0;
          var hasMatches = false;
          this.chunks.forEach(function(_ref2) {
            var pattern = _ref2.pattern, alphabet = _ref2.alphabet, startIndex = _ref2.startIndex;
            var _search = search(text, pattern, alphabet, {
              location: location + startIndex,
              distance,
              threshold,
              findAllMatches,
              minMatchCharLength,
              includeMatches,
              ignoreLocation
            }), isMatch = _search.isMatch, score = _search.score, indices = _search.indices;
            if (isMatch) {
              hasMatches = true;
            }
            totalScore += score;
            if (isMatch && indices) {
              allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));
            }
          });
          var result = {
            isMatch: hasMatches,
            score: hasMatches ? totalScore / this.chunks.length : 1
          };
          if (hasMatches && includeMatches) {
            result.indices = allIndices;
          }
          return result;
        }
      }]);
      return BitapSearch2;
    }();
    var BaseMatch = function() {
      function BaseMatch2(pattern) {
        _classCallCheck(this, BaseMatch2);
        this.pattern = pattern;
      }
      _createClass(BaseMatch2, [{
        key: "search",
        value: function search2() {
        }
      }], [{
        key: "isMultiMatch",
        value: function isMultiMatch(pattern) {
          return getMatch(pattern, this.multiRegex);
        }
      }, {
        key: "isSingleMatch",
        value: function isSingleMatch(pattern) {
          return getMatch(pattern, this.singleRegex);
        }
      }]);
      return BaseMatch2;
    }();
    function getMatch(pattern, exp) {
      var matches = pattern.match(exp);
      return matches ? matches[1] : null;
    }
    var ExactMatch = function(_BaseMatch) {
      _inherits(ExactMatch2, _BaseMatch);
      var _super = _createSuper(ExactMatch2);
      function ExactMatch2(pattern) {
        _classCallCheck(this, ExactMatch2);
        return _super.call(this, pattern);
      }
      _createClass(ExactMatch2, [{
        key: "search",
        value: function search2(text) {
          var location = 0;
          var index;
          var indices = [];
          var patternLen = this.pattern.length;
          while ((index = text.indexOf(this.pattern, location)) > -1) {
            location = index + patternLen;
            indices.push([index, location - 1]);
          }
          var isMatch = !!indices.length;
          return {
            isMatch,
            score: isMatch ? 1 : 0,
            indices
          };
        }
      }], [{
        key: "type",
        get: function get2() {
          return "exact";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^'"(.*)"$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^'(.*)$/;
        }
      }]);
      return ExactMatch2;
    }(BaseMatch);
    var InverseExactMatch = function(_BaseMatch) {
      _inherits(InverseExactMatch2, _BaseMatch);
      var _super = _createSuper(InverseExactMatch2);
      function InverseExactMatch2(pattern) {
        _classCallCheck(this, InverseExactMatch2);
        return _super.call(this, pattern);
      }
      _createClass(InverseExactMatch2, [{
        key: "search",
        value: function search2(text) {
          var index = text.indexOf(this.pattern);
          var isMatch = index === -1;
          return {
            isMatch,
            score: isMatch ? 0 : 1,
            indices: [0, text.length - 1]
          };
        }
      }], [{
        key: "type",
        get: function get2() {
          return "inverse-exact";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^!"(.*)"$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^!(.*)$/;
        }
      }]);
      return InverseExactMatch2;
    }(BaseMatch);
    var PrefixExactMatch = function(_BaseMatch) {
      _inherits(PrefixExactMatch2, _BaseMatch);
      var _super = _createSuper(PrefixExactMatch2);
      function PrefixExactMatch2(pattern) {
        _classCallCheck(this, PrefixExactMatch2);
        return _super.call(this, pattern);
      }
      _createClass(PrefixExactMatch2, [{
        key: "search",
        value: function search2(text) {
          var isMatch = text.startsWith(this.pattern);
          return {
            isMatch,
            score: isMatch ? 0 : 1,
            indices: [0, this.pattern.length - 1]
          };
        }
      }], [{
        key: "type",
        get: function get2() {
          return "prefix-exact";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^\^"(.*)"$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^\^(.*)$/;
        }
      }]);
      return PrefixExactMatch2;
    }(BaseMatch);
    var InversePrefixExactMatch = function(_BaseMatch) {
      _inherits(InversePrefixExactMatch2, _BaseMatch);
      var _super = _createSuper(InversePrefixExactMatch2);
      function InversePrefixExactMatch2(pattern) {
        _classCallCheck(this, InversePrefixExactMatch2);
        return _super.call(this, pattern);
      }
      _createClass(InversePrefixExactMatch2, [{
        key: "search",
        value: function search2(text) {
          var isMatch = !text.startsWith(this.pattern);
          return {
            isMatch,
            score: isMatch ? 0 : 1,
            indices: [0, text.length - 1]
          };
        }
      }], [{
        key: "type",
        get: function get2() {
          return "inverse-prefix-exact";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^!\^"(.*)"$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^!\^(.*)$/;
        }
      }]);
      return InversePrefixExactMatch2;
    }(BaseMatch);
    var SuffixExactMatch = function(_BaseMatch) {
      _inherits(SuffixExactMatch2, _BaseMatch);
      var _super = _createSuper(SuffixExactMatch2);
      function SuffixExactMatch2(pattern) {
        _classCallCheck(this, SuffixExactMatch2);
        return _super.call(this, pattern);
      }
      _createClass(SuffixExactMatch2, [{
        key: "search",
        value: function search2(text) {
          var isMatch = text.endsWith(this.pattern);
          return {
            isMatch,
            score: isMatch ? 0 : 1,
            indices: [text.length - this.pattern.length, text.length - 1]
          };
        }
      }], [{
        key: "type",
        get: function get2() {
          return "suffix-exact";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^"(.*)"\$$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^(.*)\$$/;
        }
      }]);
      return SuffixExactMatch2;
    }(BaseMatch);
    var InverseSuffixExactMatch = function(_BaseMatch) {
      _inherits(InverseSuffixExactMatch2, _BaseMatch);
      var _super = _createSuper(InverseSuffixExactMatch2);
      function InverseSuffixExactMatch2(pattern) {
        _classCallCheck(this, InverseSuffixExactMatch2);
        return _super.call(this, pattern);
      }
      _createClass(InverseSuffixExactMatch2, [{
        key: "search",
        value: function search2(text) {
          var isMatch = !text.endsWith(this.pattern);
          return {
            isMatch,
            score: isMatch ? 0 : 1,
            indices: [0, text.length - 1]
          };
        }
      }], [{
        key: "type",
        get: function get2() {
          return "inverse-suffix-exact";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^!"(.*)"\$$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^!(.*)\$$/;
        }
      }]);
      return InverseSuffixExactMatch2;
    }(BaseMatch);
    var FuzzyMatch = function(_BaseMatch) {
      _inherits(FuzzyMatch2, _BaseMatch);
      var _super = _createSuper(FuzzyMatch2);
      function FuzzyMatch2(pattern) {
        var _this;
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$location = _ref.location, location = _ref$location === void 0 ? Config.location : _ref$location, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? Config.distance : _ref$distance, _ref$includeMatches = _ref.includeMatches, includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches, _ref$findAllMatches = _ref.findAllMatches, findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches, _ref$minMatchCharLeng = _ref.minMatchCharLength, minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng, _ref$isCaseSensitive = _ref.isCaseSensitive, isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive;
        _classCallCheck(this, FuzzyMatch2);
        _this = _super.call(this, pattern);
        _this._bitapSearch = new BitapSearch(pattern, {
          location,
          threshold,
          distance,
          includeMatches,
          findAllMatches,
          minMatchCharLength,
          isCaseSensitive
        });
        return _this;
      }
      _createClass(FuzzyMatch2, [{
        key: "search",
        value: function search2(text) {
          return this._bitapSearch.searchIn(text);
        }
      }], [{
        key: "type",
        get: function get2() {
          return "fuzzy";
        }
      }, {
        key: "multiRegex",
        get: function get2() {
          return /^"(.*)"$/;
        }
      }, {
        key: "singleRegex",
        get: function get2() {
          return /^(.*)$/;
        }
      }]);
      return FuzzyMatch2;
    }(BaseMatch);
    var searchers = [ExactMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];
    var searchersLen = searchers.length;
    var SPACE_RE = / +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;
    var OR_TOKEN = "|";
    function parseQuery(pattern) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return pattern.split(OR_TOKEN).map(function(item) {
        var query = item.trim().split(SPACE_RE).filter(function(item2) {
          return item2 && !!item2.trim();
        });
        var results = [];
        for (var i = 0, len = query.length; i < len; i += 1) {
          var queryItem = query[i];
          var found = false;
          var idx = -1;
          while (!found && ++idx < searchersLen) {
            var searcher = searchers[idx];
            var token = searcher.isMultiMatch(queryItem);
            if (token) {
              results.push(new searcher(token, options));
              found = true;
            }
          }
          if (found) {
            continue;
          }
          idx = -1;
          while (++idx < searchersLen) {
            var _searcher = searchers[idx];
            var _token = _searcher.isSingleMatch(queryItem);
            if (_token) {
              results.push(new _searcher(_token, options));
              break;
            }
          }
        }
        return results;
      });
    }
    var MultiMatchSet = new Set([FuzzyMatch.type, ExactMatch.type]);
    var ExtendedSearch = function() {
      function ExtendedSearch2(pattern) {
        var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$isCaseSensitive = _ref.isCaseSensitive, isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive, _ref$includeMatches = _ref.includeMatches, includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches, _ref$minMatchCharLeng = _ref.minMatchCharLength, minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng, _ref$findAllMatches = _ref.findAllMatches, findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches, _ref$location = _ref.location, location = _ref$location === void 0 ? Config.location : _ref$location, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? Config.distance : _ref$distance;
        _classCallCheck(this, ExtendedSearch2);
        this.query = null;
        this.options = {
          isCaseSensitive,
          includeMatches,
          minMatchCharLength,
          findAllMatches,
          location,
          threshold,
          distance
        };
        this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
        this.query = parseQuery(this.pattern, this.options);
      }
      _createClass(ExtendedSearch2, [{
        key: "searchIn",
        value: function searchIn(text) {
          var query = this.query;
          if (!query) {
            return {
              isMatch: false,
              score: 1
            };
          }
          var _this$options = this.options, includeMatches = _this$options.includeMatches, isCaseSensitive = _this$options.isCaseSensitive;
          text = isCaseSensitive ? text : text.toLowerCase();
          var numMatches = 0;
          var allIndices = [];
          var totalScore = 0;
          for (var i = 0, qLen = query.length; i < qLen; i += 1) {
            var searchers2 = query[i];
            allIndices.length = 0;
            numMatches = 0;
            for (var j = 0, pLen = searchers2.length; j < pLen; j += 1) {
              var searcher = searchers2[j];
              var _searcher$search = searcher.search(text), isMatch = _searcher$search.isMatch, indices = _searcher$search.indices, score = _searcher$search.score;
              if (isMatch) {
                numMatches += 1;
                totalScore += score;
                if (includeMatches) {
                  var type = searcher.constructor.type;
                  if (MultiMatchSet.has(type)) {
                    allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));
                  } else {
                    allIndices.push(indices);
                  }
                }
              } else {
                totalScore = 0;
                numMatches = 0;
                allIndices.length = 0;
                break;
              }
            }
            if (numMatches) {
              var result = {
                isMatch: true,
                score: totalScore / numMatches
              };
              if (includeMatches) {
                result.indices = allIndices;
              }
              return result;
            }
          }
          return {
            isMatch: false,
            score: 1
          };
        }
      }], [{
        key: "condition",
        value: function condition(_, options) {
          return options.useExtendedSearch;
        }
      }]);
      return ExtendedSearch2;
    }();
    var registeredSearchers = [];
    function register() {
      registeredSearchers.push.apply(registeredSearchers, arguments);
    }
    function createSearcher(pattern, options) {
      for (var i = 0, len = registeredSearchers.length; i < len; i += 1) {
        var searcherClass = registeredSearchers[i];
        if (searcherClass.condition(pattern, options)) {
          return new searcherClass(pattern, options);
        }
      }
      return new BitapSearch(pattern, options);
    }
    var LogicalOperator = {
      AND: "$and",
      OR: "$or"
    };
    var isExpression = function isExpression2(query) {
      return !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
    };
    var isLeaf = function isLeaf2(query) {
      return !isArray(query) && isObject(query) && !isExpression(query);
    };
    var convertToExplicit = function convertToExplicit2(query) {
      return _defineProperty({}, LogicalOperator.AND, Object.keys(query).map(function(key) {
        return _defineProperty({}, key, query[key]);
      }));
    };
    function parse(query, options) {
      var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$auto = _ref3.auto, auto = _ref3$auto === void 0 ? true : _ref3$auto;
      var next = function next2(query2) {
        var keys = Object.keys(query2);
        if (keys.length > 1 && !isExpression(query2)) {
          return next2(convertToExplicit(query2));
        }
        var key = keys[0];
        if (isLeaf(query2)) {
          var pattern = query2[key];
          if (!isString(pattern)) {
            throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
          }
          var obj = {
            key,
            pattern
          };
          if (auto) {
            obj.searcher = createSearcher(pattern, options);
          }
          return obj;
        }
        var node = {
          children: [],
          operator: key
        };
        keys.forEach(function(key2) {
          var value = query2[key2];
          if (isArray(value)) {
            value.forEach(function(item) {
              node.children.push(next2(item));
            });
          }
        });
        return node;
      };
      if (!isExpression(query)) {
        query = convertToExplicit(query);
      }
      return next(query);
    }
    var Fuse = function() {
      function Fuse2(docs) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var index = arguments.length > 2 ? arguments[2] : void 0;
        _classCallCheck(this, Fuse2);
        this.options = _objectSpread2({}, Config, {}, options);
        if (this.options.useExtendedSearch && false) {
          throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
        }
        this._keyStore = new KeyStore(this.options.keys);
        this.setCollection(docs, index);
      }
      _createClass(Fuse2, [{
        key: "setCollection",
        value: function setCollection(docs, index) {
          this._docs = docs;
          if (index && !(index instanceof FuseIndex)) {
            throw new Error(INCORRECT_INDEX_TYPE);
          }
          this._myIndex = index || createIndex(this._keyStore.keys(), this._docs, {
            getFn: this.options.getFn
          });
        }
      }, {
        key: "add",
        value: function add(doc) {
          if (!isDefined(doc)) {
            return;
          }
          this._docs.push(doc);
          this._myIndex.add(doc);
        }
      }, {
        key: "remove",
        value: function remove() {
          var predicate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function() {
            return false;
          };
          var results = [];
          for (var i = 0, len = this._docs.length; i < len; i += 1) {
            var doc = this._docs[i];
            if (predicate(doc, i)) {
              this.removeAt(i);
              i -= 1;
              results.push(doc);
            }
          }
          return results;
        }
      }, {
        key: "removeAt",
        value: function removeAt(idx) {
          this._docs.splice(idx, 1);
          this._myIndex.removeAt(idx);
        }
      }, {
        key: "getIndex",
        value: function getIndex() {
          return this._myIndex;
        }
      }, {
        key: "search",
        value: function search2(query) {
          var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? -1 : _ref$limit;
          var _this$options = this.options, includeMatches = _this$options.includeMatches, includeScore = _this$options.includeScore, shouldSort = _this$options.shouldSort, sortFn = _this$options.sortFn, ignoreFieldNorm = _this$options.ignoreFieldNorm;
          var results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
          computeScore$1(results, this._keyStore, {
            ignoreFieldNorm
          });
          if (shouldSort) {
            results.sort(sortFn);
          }
          if (isNumber(limit) && limit > -1) {
            results = results.slice(0, limit);
          }
          return format(results, this._docs, {
            includeMatches,
            includeScore
          });
        }
      }, {
        key: "_searchStringList",
        value: function _searchStringList(query) {
          var searcher = createSearcher(query, this.options);
          var records = this._myIndex.records;
          var results = [];
          records.forEach(function(_ref2) {
            var text = _ref2.v, idx = _ref2.i, norm2 = _ref2.n;
            if (!isDefined(text)) {
              return;
            }
            var _searcher$searchIn = searcher.searchIn(text), isMatch = _searcher$searchIn.isMatch, score = _searcher$searchIn.score, indices = _searcher$searchIn.indices;
            if (isMatch) {
              results.push({
                item: text,
                idx,
                matches: [{
                  score,
                  value: text,
                  norm: norm2,
                  indices
                }]
              });
            }
          });
          return results;
        }
      }, {
        key: "_searchLogical",
        value: function _searchLogical(query) {
          var _this = this;
          var expression = parse(query, this.options);
          var _this$_myIndex = this._myIndex, keys = _this$_myIndex.keys, records = _this$_myIndex.records;
          var resultMap = {};
          var results = [];
          var evaluateExpression = function evaluateExpression2(node, item, idx) {
            if (node.children) {
              var operator = node.operator;
              var res = [];
              for (var k = 0; k < node.children.length; k += 1) {
                var child = node.children[k];
                var matches = evaluateExpression2(child, item, idx);
                if (matches && matches.length) {
                  res.push({
                    idx,
                    item,
                    matches
                  });
                  if (operator === LogicalOperator.OR) {
                    break;
                  }
                } else if (operator === LogicalOperator.AND) {
                  res.length = 0;
                  break;
                }
              }
              if (res.length) {
                if (!resultMap[idx]) {
                  resultMap[idx] = {
                    idx,
                    item,
                    matches: []
                  };
                  results.push(resultMap[idx]);
                }
                res.forEach(function(_ref3) {
                  var _resultMap$idx$matche;
                  var matches2 = _ref3.matches;
                  (_resultMap$idx$matche = resultMap[idx].matches).push.apply(_resultMap$idx$matche, _toConsumableArray(matches2));
                });
              }
            } else {
              var key = node.key, searcher = node.searcher;
              var value = item[keys.indexOf(key)];
              return _this._findMatches({
                key,
                value,
                searcher
              });
            }
          };
          records.forEach(function(_ref4) {
            var item = _ref4.$, idx = _ref4.i;
            if (isDefined(item)) {
              evaluateExpression(expression, item, idx);
            }
          });
          return results;
        }
      }, {
        key: "_searchObjectList",
        value: function _searchObjectList(query) {
          var _this2 = this;
          var searcher = createSearcher(query, this.options);
          var _this$_myIndex2 = this._myIndex, keys = _this$_myIndex2.keys, records = _this$_myIndex2.records;
          var results = [];
          records.forEach(function(_ref5) {
            var item = _ref5.$, idx = _ref5.i;
            if (!isDefined(item)) {
              return;
            }
            var matches = [];
            keys.forEach(function(key, keyIndex) {
              matches.push.apply(matches, _toConsumableArray(_this2._findMatches({
                key,
                value: item[keyIndex],
                searcher
              })));
            });
            if (matches.length) {
              results.push({
                idx,
                item,
                matches
              });
            }
          });
          return results;
        }
      }, {
        key: "_findMatches",
        value: function _findMatches(_ref6) {
          var key = _ref6.key, value = _ref6.value, searcher = _ref6.searcher;
          if (!isDefined(value)) {
            return [];
          }
          var matches = [];
          if (isArray(value)) {
            value.forEach(function(_ref7) {
              var text2 = _ref7.v, idx = _ref7.i, norm3 = _ref7.n;
              if (!isDefined(text2)) {
                return;
              }
              var _searcher$searchIn2 = searcher.searchIn(text2), isMatch2 = _searcher$searchIn2.isMatch, score2 = _searcher$searchIn2.score, indices2 = _searcher$searchIn2.indices;
              if (isMatch2) {
                matches.push({
                  score: score2,
                  key,
                  value: text2,
                  idx,
                  norm: norm3,
                  indices: indices2
                });
              }
            });
          } else {
            var text = value.v, norm2 = value.n;
            var _searcher$searchIn3 = searcher.searchIn(text), isMatch = _searcher$searchIn3.isMatch, score = _searcher$searchIn3.score, indices = _searcher$searchIn3.indices;
            if (isMatch) {
              matches.push({
                score,
                key,
                value: text,
                norm: norm2,
                indices
              });
            }
          }
          return matches;
        }
      }]);
      return Fuse2;
    }();
    function computeScore$1(results, keyStore, _ref8) {
      var _ref8$ignoreFieldNorm = _ref8.ignoreFieldNorm, ignoreFieldNorm = _ref8$ignoreFieldNorm === void 0 ? Config.ignoreFieldNorm : _ref8$ignoreFieldNorm;
      results.forEach(function(result) {
        var totalScore = 1;
        result.matches.forEach(function(_ref9) {
          var key = _ref9.key, norm2 = _ref9.norm, score = _ref9.score;
          var weight = keyStore.get(key, "weight");
          totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm2));
        });
        result.score = totalScore;
      });
    }
    function format(results, docs) {
      var _ref10 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref10$includeMatches = _ref10.includeMatches, includeMatches = _ref10$includeMatches === void 0 ? Config.includeMatches : _ref10$includeMatches, _ref10$includeScore = _ref10.includeScore, includeScore = _ref10$includeScore === void 0 ? Config.includeScore : _ref10$includeScore;
      var transformers = [];
      if (includeMatches)
        transformers.push(transformMatches);
      if (includeScore)
        transformers.push(transformScore);
      return results.map(function(result) {
        var idx = result.idx;
        var data = {
          item: docs[idx],
          refIndex: idx
        };
        if (transformers.length) {
          transformers.forEach(function(transformer) {
            transformer(result, data);
          });
        }
        return data;
      });
    }
    Fuse.version = "6.2.0";
    Fuse.createIndex = createIndex;
    Fuse.parseIndex = parseIndex;
    Fuse.config = Config;
    {
      Fuse.parseQuery = parse;
    }
    {
      register(ExtendedSearch);
    }
    module.exports = Fuse;
  }
}, 84);
//# sourceMappingURL=bundle.js.map
